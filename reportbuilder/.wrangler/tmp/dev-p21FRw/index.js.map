{
  "version": 3,
  "sources": ["../bundle-NVybam/checked-fetch.js", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/createCors.ts", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-NVybam/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-NVybam/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/.wrangler/tmp/dev-p21FRw",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "/**\n * Galileo Report Builder - Cloudflare Worker\n * PDF generation service using Cloudflare Browser Rendering\n * \n * This service replaces the local pdf-server.cjs with a scalable\n * Cloudflare Worker solution hosted at reports.galileo.tax\n */\n\nimport { Router } from 'itty-router';\n\n// Initialize router\nconst router = Router();\n\n// CORS headers\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n  'Access-Control-Max-Age': '86400',\n};\n\n// Utility function to add CORS headers to responses\nfunction corsResponse(response) {\n  Object.entries(corsHeaders).forEach(([key, value]) => {\n    response.headers.set(key, value);\n  });\n  return response;\n}\n\n// Utility function for logging with environment context\nfunction log(level, message, data = {}) {\n  const timestamp = new Date().toISOString();\n  const logLevel = globalThis.LOG_LEVEL || 'info';\n  const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n  \n  if (levels[level] >= levels[logLevel]) {\n    console[level](`[${timestamp}] [${level.toUpperCase()}] [ReportBuilder] ${message}`, data);\n  }\n}\n\n// Health check endpoint\nrouter.get('/health', () => {\n  log('info', 'Health check requested');\n  \n  const response = new Response(JSON.stringify({\n    status: 'ok',\n    service: 'Galileo Report Builder',\n    version: globalThis.VERSION || '1.0.0',\n    environment: globalThis.ENVIRONMENT || 'unknown',\n    timestamp: new Date().toISOString(),\n    capabilities: {\n      browserRendering: true,\n      pdfGeneration: true,\n      cloudflareWorker: true\n    }\n  }), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  \n  return corsResponse(response);\n});\n\n// PDF generation endpoint\nrouter.post('/api/generate-pdf', async (request, env) => {\n  try {\n    log('info', 'PDF generation request received');\n    \n    // Parse request body\n    const { html, filename = 'document.pdf', options = {} } = await request.json();\n    \n    if (!html) {\n      log('error', 'No HTML content provided');\n      return corsResponse(new Response(JSON.stringify({ \n        error: 'HTML content is required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      }));\n    }\n    \n    log('info', `Generating PDF: ${filename}`, {\n      htmlSize: html.length,\n      filename,\n      hasOptions: Object.keys(options).length > 0\n    });\n    \n    // Default PDF options matching the original pdf-server.cjs\n    const pdfOptions = {\n      format: 'Letter',\n      margin: {\n        top: '0.25in',\n        right: '0.1in', \n        bottom: '0.4in',\n        left: '0.1in'\n      },\n      printBackground: true,\n      preferCSSPageSize: false,\n      displayHeaderFooter: true,\n      headerTemplate: '<div></div>',\n      footerTemplate: '<div style=\"font-size:11px; text-align:center; width:100%; color:#6b7280; font-family: Plus Jakarta Sans, sans-serif; padding: 0 0.2in;\">Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span> \u2022 Confidential & Proprietary</div>',\n      ...options // Allow custom options to override defaults\n    };\n    \n    // Use Cloudflare Browser Rendering to generate PDF\n    log('debug', 'Launching browser session');\n    \n    const browser = await env.BROWSER.launch();\n    const page = await browser.newPage();\n    \n    try {\n      // Set viewport and load content\n      await page.setViewport({ width: 1200, height: 1600 });\n      log('debug', 'Setting page content');\n      \n      await page.setContent(html, {\n        waitUntil: ['domcontentloaded', 'networkidle0'],\n        timeout: 30000\n      });\n      \n      log('debug', 'Waiting for fonts and render completion');\n      \n      // Wait for Google Fonts to load\n      await page.evaluateHandle(() => document.fonts.ready);\n      \n      // Additional wait for dynamic content and styling (matching original behavior)\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      log('debug', 'Generating PDF with options', pdfOptions);\n      \n      // Generate PDF\n      const pdfBuffer = await page.pdf(pdfOptions);\n      \n      log('info', `PDF generated successfully`, {\n        filename,\n        sizeBytes: pdfBuffer.length,\n        sizeKB: Math.round(pdfBuffer.length / 1024)\n      });\n      \n      // Return PDF response\n      const response = new Response(pdfBuffer, {\n        headers: {\n          'Content-Type': 'application/pdf',\n          'Content-Disposition': `attachment; filename=\"${filename}\"`,\n          'Content-Length': pdfBuffer.length.toString(),\n        },\n      });\n      \n      return corsResponse(response);\n      \n    } finally {\n      // Always close the page\n      await page.close();\n      await browser.close();\n      log('debug', 'Browser session closed');\n    }\n    \n  } catch (error) {\n    log('error', 'PDF generation failed', {\n      error: error.message,\n      stack: error.stack\n    });\n    \n    const response = new Response(JSON.stringify({\n      error: 'PDF generation failed',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n    \n    return corsResponse(response);\n  }\n});\n\n// Root endpoint with service information\nrouter.get('/', () => {\n  const response = new Response(JSON.stringify({\n    service: 'Galileo Report Builder',\n    version: globalThis.VERSION || '1.0.0',\n    description: 'PDF generation service using Cloudflare Browser Rendering',\n    endpoints: {\n      health: '/health',\n      generatePdf: 'POST /api/generate-pdf'\n    },\n    documentation: 'https://docs.galileo.tax/reportbuilder',\n    timestamp: new Date().toISOString()\n  }), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  \n  return corsResponse(response);\n});\n\n// Handle OPTIONS requests for CORS\nrouter.options('*', () => {\n  return corsResponse(new Response(null, { status: 200 }));\n});\n\n// 404 handler\nrouter.all('*', () => {\n  const response = new Response(JSON.stringify({\n    error: 'Not Found',\n    message: 'The requested endpoint does not exist',\n    availableEndpoints: {\n      health: 'GET /health',\n      generatePdf: 'POST /api/generate-pdf',\n      root: 'GET /'\n    }\n  }), {\n    status: 404,\n    headers: { 'Content-Type': 'application/json' }\n  });\n  \n  return corsResponse(response);\n});\n\n// Main fetch handler\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      // Set global environment variables for logging\n      globalThis.ENVIRONMENT = env.ENVIRONMENT || 'unknown';\n      globalThis.VERSION = env.VERSION || '1.0.0';\n      globalThis.LOG_LEVEL = env.LOG_LEVEL || 'info';\n      \n      log('debug', 'Request received', {\n        method: request.method,\n        url: request.url,\n        userAgent: request.headers.get('User-Agent')\n      });\n      \n      // Route the request\n      return await router.handle(request, env, ctx);\n      \n    } catch (error) {\n      log('error', 'Unhandled error in main fetch handler', {\n        error: error.message,\n        stack: error.stack\n      });\n      \n      const response = new Response(JSON.stringify({\n        error: 'Internal Server Error',\n        message: 'An unexpected error occurred',\n        timestamp: new Date().toISOString()\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      return corsResponse(response);\n    }\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/.wrangler/tmp/bundle-NVybam/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/.wrangler/tmp/bundle-NVybam/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/admin/CodeProjects/openside/battleborn/taxapp/reportbuilder/.wrangler/tmp/bundle-NVybam/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "fetch", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "method", "regex", "pathname", "params", "groups", "handler", "proxy", "createResponse", "format", "transform", "body", "headers", "rest", "constructor", "name", "Response", "entries", "Object", "fromEntries", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "e", "e"]
}

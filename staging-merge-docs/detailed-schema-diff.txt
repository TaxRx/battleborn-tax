--- staging-merge-docs/staging-current-schema.sql	2025-07-28 12:02:39
+++ staging-merge-docs/main-production-schema.sql	2025-07-28 12:02:39
@@ -3,7 +3,6 @@
 SET statement_timeout = 0;
 SET lock_timeout = 0;
 SET idle_in_transaction_session_timeout = 0;
-SET transaction_timeout = 0;
 SET client_encoding = 'UTF8';
 SET standard_conforming_strings = on;
 SELECT pg_catalog.set_config('search_path', '', false);
@@ -19,139 +18,34 @@
 ALTER SCHEMA "public" OWNER TO "pg_database_owner";
 
 
-COMMENT ON SCHEMA "public" IS 'handle_new_user trigger has been disabled to allow manual profile creation control';
+COMMENT ON SCHEMA "public" IS 'standard public schema';
 
 
 
-CREATE TYPE "public"."access_level_type" AS ENUM (
-    'full',
-    'limited',
-    'reporting',
-    'none',
-    'client',
-    'expert'
-);
-
-
-ALTER TYPE "public"."access_level_type" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."account_status" AS ENUM (
-    'active',
-    'inactive',
-    'suspended',
-    'deleted'
-);
-
-
-ALTER TYPE "public"."account_status" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."account_type" AS ENUM (
-    'admin',
-    'platform',
-    'affiliate',
-    'client',
-    'expert',
-    'operator'
-);
-
-
-ALTER TYPE "public"."account_type" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."activity_priority" AS ENUM (
-    'low',
-    'medium',
-    'high',
-    'urgent'
-);
-
-
-ALTER TYPE "public"."activity_priority" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."activity_type" AS ENUM (
-    'login',
-    'document_upload',
-    'proposal_view',
-    'profile_update',
-    'calculation_run',
-    'message_sent',
-    'meeting_scheduled',
-    'payment_made',
-    'tool_enrollment',
-    'status_update'
-);
-
-
-ALTER TYPE "public"."activity_type" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."client_role" AS ENUM (
-    'owner',
-    'member',
-    'viewer',
-    'accountant'
-);
-
-
-ALTER TYPE "public"."client_role" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."engagement_status" AS ENUM (
-    'active',
-    'inactive',
-    'pending',
-    'completed',
-    'on_hold',
-    'cancelled'
-);
-
-
-ALTER TYPE "public"."engagement_status" OWNER TO "postgres";
-
-
 CREATE TYPE "public"."entity_type" AS ENUM (
     'LLC',
     'SCORP',
     'CCORP',
     'PARTNERSHIP',
     'SOLEPROP',
-    'OTHER',
-    's_corp',
-    'llc',
-    'c_corp',
-    'partnership',
-    'sole_prop',
-    'other'
+    'OTHER'
 );
 
 
 ALTER TYPE "public"."entity_type" OWNER TO "postgres";
 
 
-CREATE TYPE "public"."filing_status" AS ENUM (
-    'MFJ',
-    'Single',
-    'HOH',
-    'MFS'
-);
-
-
-ALTER TYPE "public"."filing_status" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."proposal_status" AS ENUM (
-    'draft',
-    'submitted',
+CREATE TYPE "public"."qc_status_enum" AS ENUM (
+    'pending',
     'in_review',
-    'expert_sent',
-    'finalized'
+    'ready_for_review',
+    'approved',
+    'requires_changes',
+    'complete'
 );
 
 
-ALTER TYPE "public"."proposal_status" OWNER TO "postgres";
+ALTER TYPE "public"."qc_status_enum" OWNER TO "postgres";
 
 
 CREATE TYPE "public"."rd_report_type" AS ENUM (
@@ -174,112 +68,6 @@
 ALTER TYPE "public"."role_type" OWNER TO "postgres";
 
 
-CREATE TYPE "public"."strategy_type" AS ENUM (
-    'deduction',
-    'credit',
-    'shift'
-);
-
-
-ALTER TYPE "public"."strategy_type" OWNER TO "postgres";
-
-
-CREATE TYPE "public"."subscription_level_type" AS ENUM (
-    'basic',
-    'premium',
-    'enterprise',
-    'trial',
-    'custom'
-);
-
-
-ALTER TYPE "public"."subscription_level_type" OWNER TO "postgres";
-
-
-COMMENT ON TYPE "public"."subscription_level_type" IS 'Subscription levels for tool access control with billing integration';
-
-
-
-CREATE TYPE "public"."user_role" AS ENUM (
-    'affiliate',
-    'admin'
-);
-
-
-ALTER TYPE "public"."user_role" OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."accept_invitation"("invitation_token" character varying, "user_id" "uuid") RETURNS json
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    invitation_record invitations%ROWTYPE;
-    client_record clients%ROWTYPE;
-    result JSON;
-BEGIN
-    -- Get the invitation
-    SELECT * INTO invitation_record
-    FROM invitations
-    WHERE token = invitation_token
-    AND status = 'pending'
-    AND expires_at > now();
-    
-    IF NOT FOUND THEN
-        RETURN json_build_object(
-            'success', false,
-            'error', 'Invalid or expired invitation'
-        );
-    END IF;
-    
-    -- Get the client
-    SELECT * INTO client_record
-    FROM clients
-    WHERE id = invitation_record.client_id;
-    
-    -- Check if user is already a member
-    IF EXISTS (
-        SELECT 1 FROM client_users
-        WHERE client_id = invitation_record.client_id
-        AND user_id = user_id
-        AND is_active = true
-    ) THEN
-        RETURN json_build_object(
-            'success', false,
-            'error', 'User is already a member of this client'
-        );
-    END IF;
-    
-    -- Create client_users relationship
-    INSERT INTO client_users (client_id, user_id, role, invited_by, accepted_at)
-    VALUES (
-        invitation_record.client_id,
-        user_id,
-        invitation_record.role,
-        invitation_record.invited_by,
-        now()
-    );
-    
-    -- Update invitation status
-    UPDATE invitations
-    SET status = 'accepted',
-        accepted_at = now(),
-        accepted_by = user_id,
-        updated_at = now()
-    WHERE id = invitation_record.id;
-    
-    RETURN json_build_object(
-        'success', true,
-        'client_id', invitation_record.client_id,
-        'client_name', client_record.full_name,
-        'role', invitation_record.role
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."accept_invitation"("invitation_token" character varying, "user_id" "uuid") OWNER TO "postgres";
-
-
 CREATE OR REPLACE FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean DEFAULT true, "p_ordinary_k1_income" numeric DEFAULT 0, "p_guaranteed_k1_income" numeric DEFAULT 0, "p_annual_revenue" numeric DEFAULT 0, "p_employee_count" integer DEFAULT 0) RETURNS "uuid"
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
@@ -312,12835 +100,5802 @@
 ALTER FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) OWNER TO "postgres";
 
 
-CREATE OR REPLACE FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date" DEFAULT (CURRENT_DATE - '1 day'::interval)) RETURNS TABLE("metric_type" character varying, "metric_count" integer, "success" boolean, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
+CREATE OR REPLACE FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) RETURNS "void"
+    LANGUAGE "plpgsql"
     AS $$
-DECLARE
-    v_start_time TIMESTAMP WITH TIME ZONE;
-    v_end_time TIMESTAMP WITH TIME ZONE;
 BEGIN
-    v_start_time := p_date::TIMESTAMP WITH TIME ZONE;
-    v_end_time := (p_date + INTERVAL '1 day')::TIMESTAMP WITH TIME ZONE;
-    
-    -- Active users metric
-    INSERT INTO public.platform_usage_metrics (
-        metric_date, metric_type, metric_name, metric_value
-    )
-    SELECT 
-        p_date,
-        'user_activity',
-        'daily_active_users',
-        COUNT(DISTINCT actor_id)
-    FROM public.account_activities
-    WHERE created_at >= v_start_time AND created_at < v_end_time;
-    
-    -- Tool usage metrics
-    INSERT INTO public.platform_usage_metrics (
-        metric_date, metric_type, metric_name, metric_value, tool_id
-    )
-    SELECT 
-        p_date,
-        'tool_usage',
-        'daily_tool_sessions',
-        COUNT(*),
-        tool_id
-    FROM public.tool_usage_logs
-    WHERE session_start >= v_start_time AND session_start < v_end_time
-    GROUP BY tool_id;
-    
-    -- Account activity metrics
-    INSERT INTO public.platform_usage_metrics (
-        metric_date, metric_type, metric_name, metric_value, dimensions
-    )
-    SELECT 
-        p_date,
-        'account_activity',
-        'activities_by_type',
-        COUNT(*),
-        jsonb_build_object('activity_type', activity_type)
-    FROM public.account_activities
-    WHERE created_at >= v_start_time AND created_at < v_end_time
-    GROUP BY activity_type;
-    
-    -- Payment success rate
-    INSERT INTO public.platform_usage_metrics (
-        metric_date, metric_type, metric_name, metric_value, dimensions
-    )
-    SELECT 
-        p_date,
-        'financial',
-        'payment_success_rate',
-        CASE 
-            WHEN COUNT(*) > 0 THEN 
-                (COUNT(*) FILTER (WHERE status = 'succeeded')::NUMERIC / COUNT(*)::NUMERIC) * 100
-            ELSE 0
-        END,
-        jsonb_build_object(
-            'total_payments', COUNT(*),
-            'successful_payments', COUNT(*) FILTER (WHERE status = 'succeeded')
-        )
-    FROM public.payments
-    WHERE created_at >= v_start_time AND created_at < v_end_time;
-    
-    RETURN QUERY
-    SELECT 
-        'user_activity'::VARCHAR, 
-        COUNT(*)::INTEGER,
-        TRUE,
-        'User activity metrics aggregated'::TEXT
-    UNION ALL
-    SELECT 
-        'tool_usage'::VARCHAR,
-        COUNT(*)::INTEGER,
-        TRUE,
-        'Tool usage metrics aggregated'::TEXT
-    UNION ALL
-    SELECT 
-        'financial'::VARCHAR,
-        COUNT(*)::INTEGER,
-        TRUE,
-        'Financial metrics aggregated'::TEXT;
+    UPDATE clients 
+    SET 
+        archived = p_archive,
+        archived_at = CASE WHEN p_archive THEN NOW() ELSE NULL END
+    WHERE id = p_client_id;
 END;
 $$;
 
 
-ALTER FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date") OWNER TO "postgres";
+ALTER FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) OWNER TO "postgres";
 
 
-COMMENT ON FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date") IS 'Aggregate daily platform usage metrics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."analyze_performance_metrics"("p_hours" integer DEFAULT 24, "p_percentile" integer DEFAULT 95) RETURNS TABLE("endpoint" character varying, "operation_type" character varying, "request_count" bigint, "avg_response_time_ms" numeric, "p95_response_time_ms" numeric, "error_rate" numeric, "success_rate" numeric, "unique_users" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
+CREATE OR REPLACE FUNCTION "public"."archive_rd_federal_credit_version"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
     AS $$
 BEGIN
-    RETURN QUERY
-    SELECT 
-        pm.endpoint,
-        pm.operation_type,
-        COUNT(*)::BIGINT as request_count,
-        AVG(pm.response_time_ms)::NUMERIC as avg_response_time_ms,
-        PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY pm.response_time_ms)::NUMERIC as p95_response_time_ms,
-        (COUNT(*) FILTER (WHERE pm.status_code >= 400)::NUMERIC / COUNT(*)::NUMERIC) * 100 as error_rate,
-        (COUNT(*) FILTER (WHERE pm.status_code < 400)::NUMERIC / COUNT(*)::NUMERIC) * 100 as success_rate,
-        COUNT(DISTINCT pm.profile_id)::INTEGER as unique_users
-    FROM public.performance_metrics pm
-    WHERE pm.metric_timestamp >= NOW() - (p_hours || ' hours')::INTERVAL
-    GROUP BY pm.endpoint, pm.operation_type
-    ORDER BY request_count DESC;
+    -- Mark previous version as not latest
+    UPDATE rd_federal_credit 
+    SET is_latest = FALSE 
+    WHERE business_year_id = NEW.business_year_id 
+    AND research_activity_id = NEW.research_activity_id
+    AND id != NEW.id;
+    
+    -- Set previous version reference
+    UPDATE rd_federal_credit 
+    SET previous_version_id = (
+        SELECT id FROM rd_federal_credit 
+        WHERE business_year_id = NEW.business_year_id 
+        AND research_activity_id = NEW.research_activity_id
+        AND id != NEW.id
+        ORDER BY created_at DESC 
+        LIMIT 1
+    )
+    WHERE id = NEW.id;
+    
+    RETURN NEW;
 END;
 $$;
 
 
-ALTER FUNCTION "public"."analyze_performance_metrics"("p_hours" integer, "p_percentile" integer) OWNER TO "postgres";
+ALTER FUNCTION "public"."archive_rd_federal_credit_version"() OWNER TO "postgres";
 
 
-COMMENT ON FUNCTION "public"."analyze_performance_metrics"("p_hours" integer, "p_percentile" integer) IS 'Analyze API performance metrics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) RETURNS "void"
+CREATE OR REPLACE FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) RETURNS numeric
     LANGUAGE "plpgsql"
     AS $$
+DECLARE
+  business_record RECORD;
+  base_period_years INTEGER[];
+  total_gross_receipts NUMERIC := 0;
+  total_qre NUMERIC := 0;
+  year_count INTEGER := 0;
+  year INTEGER;
+  historical_item JSONB;
 BEGIN
-    UPDATE clients 
-    SET 
-        archived = p_archive,
-        archived_at = CASE WHEN p_archive THEN NOW() ELSE NULL END
-    WHERE id = p_client_id;
+  -- Get business record
+  SELECT * INTO business_record 
+  FROM rd_businesses 
+  WHERE id = business_id;
+  
+  IF NOT FOUND THEN
+    RETURN 0;
+  END IF;
+  
+  -- Get base period years
+  base_period_years := get_base_period_years(business_record.start_year, tax_year);
+  
+  -- Calculate averages from historical data
+  FOREACH year IN ARRAY base_period_years LOOP
+    -- Find historical data for this year
+    FOR historical_item IN SELECT jsonb_array_elements(business_record.historical_data) LOOP
+      IF (historical_item->>'year')::INTEGER = year THEN
+        total_gross_receipts := total_gross_receipts + (historical_item->>'gross_receipts')::NUMERIC;
+        total_qre := total_qre + (historical_item->>'qre')::NUMERIC;
+        year_count := year_count + 1;
+        EXIT;
+      END IF;
+    END LOOP;
+  END LOOP;
+  
+  -- Return average QRE if we have data, otherwise 0
+  IF year_count > 0 THEN
+    RETURN total_qre / year_count;
+  ELSE
+    RETURN 0;
+  END IF;
 END;
 $$;
 
 
-ALTER FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) OWNER TO "postgres";
+ALTER FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) OWNER TO "postgres";
 
 
-CREATE OR REPLACE FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying DEFAULT 'global'::character varying, "p_scope_id" "uuid" DEFAULT NULL::"uuid", "p_expires_at" timestamp with time zone DEFAULT NULL::timestamp with time zone, "p_notes" "text" DEFAULT NULL::"text") RETURNS TABLE("success" boolean, "role_id" "uuid", "message" "text")
+CREATE OR REPLACE FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) RETURNS numeric
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
 DECLARE
-    v_role_id UUID;
-    v_granted_by UUID;
-    existing_role_id UUID;
+    personal_total DECIMAL(12,2) := 0;
+    business_total DECIMAL(12,2) := 0;
 BEGIN
-    -- Get current user
-    v_granted_by := auth.uid();
+    -- Get personal income for the year
+    SELECT COALESCE(total_income, 0) INTO personal_total
+    FROM personal_years
+    WHERE user_id = p_user_id AND year = p_year;
     
-    -- Check if role already exists for this profile and scope
-    SELECT id INTO existing_role_id 
-    FROM public.profile_roles 
-    WHERE profile_id = p_profile_id 
-      AND role_name = p_role_name 
-      AND scope = p_scope 
-      AND COALESCE(scope_id::text, '') = COALESCE(p_scope_id::text, '')
-      AND is_active = true;
+    -- Get business income for the year
+    SELECT COALESCE(total_business_income, 0) INTO business_total
+    FROM business_years
+    WHERE user_id = p_user_id AND year = p_year;
     
-    IF existing_role_id IS NOT NULL THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            existing_role_id as role_id,
-            'Role already assigned to this profile in the specified scope'::TEXT as message;
-        RETURN;
-    END IF;
-    
-    -- Validate role name exists in role_definitions
-    IF NOT EXISTS (SELECT 1 FROM public.role_definitions WHERE role_name = p_role_name AND is_active = true) THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            NULL::UUID as role_id,
-            'Invalid role name specified'::TEXT as message;
-        RETURN;
-    END IF;
-    
-    -- Insert new role assignment
-    INSERT INTO public.profile_roles (
-        profile_id, role_name, scope, scope_id, granted_by, expires_at, notes
-    ) VALUES (
-        p_profile_id, p_role_name, p_scope, p_scope_id, v_granted_by, p_expires_at, p_notes
-    ) RETURNING id INTO v_role_id;
-    
-    -- Log the role assignment
-    PERFORM log_profile_activity(
-        p_profile_id,
-        'role_assigned',
-        'role',
-        v_role_id,
-        'Role assigned: ' || p_role_name || ' (' || p_scope || ')',
-        jsonb_build_object(
-            'role_name', p_role_name,
-            'scope', p_scope,
-            'scope_id', p_scope_id,
-            'expires_at', p_expires_at,
-            'granted_by', v_granted_by
-        )
-    );
-    
-    RETURN QUERY SELECT 
-        TRUE as success,
-        v_role_id as role_id,
-        'Role successfully assigned'::TEXT as message;
+    RETURN COALESCE(personal_total, 0) + COALESCE(business_total, 0);
 END;
 $$;
 
 
-ALTER FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying, "p_scope_id" "uuid", "p_expires_at" timestamp with time zone, "p_notes" "text") OWNER TO "postgres";
+ALTER FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) OWNER TO "postgres";
 
 
-COMMENT ON FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying, "p_scope_id" "uuid", "p_expires_at" timestamp with time zone, "p_notes" "text") IS 'Assign a role to a profile with scope and expiration support';
+CREATE OR REPLACE FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) RETURNS TABLE("can_release" boolean, "reason" "text", "jurat_signed" boolean, "payment_received" boolean, "qc_approved" boolean)
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+DECLARE
+  business_year_record RECORD;
+  control_record RECORD;
+  jurat_exists BOOLEAN;
+BEGIN
+  -- Get business year info
+  SELECT * INTO business_year_record
+  FROM rd_business_years
+  WHERE id = p_business_year_id;
+  
+  -- Get document control info
+  SELECT * INTO control_record
+  FROM rd_qc_document_controls
+  WHERE business_year_id = p_business_year_id 
+  AND document_type = p_document_type;
+  
+  -- Check if jurat is signed (if required)
+  SELECT EXISTS(
+    SELECT 1 FROM rd_signatures 
+    WHERE business_year_id = p_business_year_id 
+    AND signature_type = 'jurat'
+  ) INTO jurat_exists;
+  
+  -- Determine if document can be released based on type and requirements
+  CASE p_document_type
+    WHEN 'research_report' THEN
+      -- Research Report: Available when QC marks as ready
+      RETURN QUERY SELECT 
+        (business_year_record.qc_status IN ('ready_for_review', 'approved', 'complete')),
+        CASE 
+          WHEN business_year_record.qc_status IN ('ready_for_review', 'approved', 'complete') THEN 'Document approved for release'
+          ELSE 'Document pending QC approval'
+        END,
+        jurat_exists,
+        COALESCE(business_year_record.payment_received, FALSE),
+        (business_year_record.qc_status IN ('approved', 'complete'));
+        
+    WHEN 'filing_guide' THEN
+      -- Filing Guide: Available after jurat signed + QC approval + payment
+      RETURN QUERY SELECT 
+        (jurat_exists AND business_year_record.qc_status = 'complete' AND COALESCE(business_year_record.payment_received, FALSE)),
+        CASE 
+          WHEN NOT jurat_exists THEN 'Jurat must be signed first'
+          WHEN business_year_record.qc_status != 'complete' THEN 'QC approval required'
+          WHEN NOT COALESCE(business_year_record.payment_received, FALSE) THEN 'Payment required'
+          ELSE 'Document approved for release'
+        END,
+        jurat_exists,
+        COALESCE(business_year_record.payment_received, FALSE),
+        (business_year_record.qc_status = 'complete');
+        
+    WHEN 'allocation_report' THEN
+      -- Allocation Report: Available after QC approval  
+      RETURN QUERY SELECT 
+        (business_year_record.qc_status IN ('approved', 'complete')),
+        CASE 
+          WHEN business_year_record.qc_status IN ('approved', 'complete') THEN 'Document approved for release'
+          ELSE 'Document pending QC approval'
+        END,
+        jurat_exists,
+        COALESCE(business_year_record.payment_received, FALSE),
+        (business_year_record.qc_status IN ('approved', 'complete'));
+        
+    ELSE
+      -- Default: Require QC approval
+      RETURN QUERY SELECT 
+        (business_year_record.qc_status IN ('approved', 'complete')),
+        'Document pending QC approval',
+        jurat_exists,
+        COALESCE(business_year_record.payment_received, FALSE),
+        (business_year_record.qc_status IN ('approved', 'complete'));
+  END CASE;
+END;
+$$;
 
 
+ALTER FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) OWNER TO "postgres";
 
-CREATE OR REPLACE FUNCTION "public"."auto_log_account_changes"() RETURNS "trigger"
+
+COMMENT ON FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) IS 'Checks if documents can be released based on business rules';
+
+
+
+CREATE OR REPLACE FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text" DEFAULT NULL::"text", "p_business_address" "text" DEFAULT NULL::"text", "p_business_city" "text" DEFAULT NULL::"text", "p_business_state" "text" DEFAULT NULL::"text", "p_business_zip" "text" DEFAULT NULL::"text", "p_business_phone" "text" DEFAULT NULL::"text", "p_business_email" "text" DEFAULT NULL::"text", "p_industry" "text" DEFAULT NULL::"text", "p_year_established" integer DEFAULT NULL::integer, "p_annual_revenue" numeric DEFAULT NULL::numeric, "p_employee_count" integer DEFAULT NULL::integer) RETURNS "uuid"
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
 DECLARE
-    changed_fields JSONB;
-    activity_description TEXT;
+    v_business_id UUID;
 BEGIN
-    -- Log account updates
-    IF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'accounts' THEN
-        -- Calculate changed fields
-        SELECT json_object_agg(key, json_build_object('old', old_val, 'new', new_val))::jsonb
-        INTO changed_fields
-        FROM (
-            SELECT key, 
-                   to_jsonb(OLD) ->> key as old_val,
-                   to_jsonb(NEW) ->> key as new_val
-            FROM jsonb_each(to_jsonb(NEW))
-            WHERE to_jsonb(NEW) ->> key IS DISTINCT FROM to_jsonb(OLD) ->> key
-        ) changes;
-        
-        -- Create meaningful description
-        activity_description := 'Account information updated: ' || NEW.name;
-        IF changed_fields ? 'type' THEN
-            activity_description := activity_description || ' (type changed)';
-        END IF;
-        IF changed_fields ? 'name' THEN
-            activity_description := activity_description || ' (name changed)';
-        END IF;
-        
-        PERFORM log_account_activity(
-            NEW.id,
-            'account_updated',
-            'account',
-            NEW.id,
-            activity_description,
-            jsonb_build_object(
-                'old_values', to_jsonb(OLD),
-                'new_values', to_jsonb(NEW),
-                'changed_fields', changed_fields
-            )
-        );
-    END IF;
-    
-    -- Log account creation
-    IF TG_OP = 'INSERT' AND TG_TABLE_NAME = 'accounts' THEN
-        PERFORM log_account_activity(
-            NEW.id,
-            'account_created',
-            'account',
-            NEW.id,
-            'New account created: ' || NEW.name || ' (type: ' || NEW.type || ')',
-            jsonb_build_object(
-                'account_data', to_jsonb(NEW),
-                'created_by_system', auth.uid() IS NULL
-            )
-        );
-    END IF;
-    
-    -- Log account deletion
-    IF TG_OP = 'DELETE' AND TG_TABLE_NAME = 'accounts' THEN
-        PERFORM log_account_activity(
-            OLD.id,
-            'account_deleted',
-            'account',
-            OLD.id,
-            'Account deleted: ' || OLD.name,
-            jsonb_build_object(
-                'deleted_account_data', to_jsonb(OLD),
-                'deletion_timestamp', NOW()
-            )
-        );
-    END IF;
-    
-    RETURN COALESCE(NEW, OLD);
+    -- Insert business
+    INSERT INTO public.centralized_businesses (
+        business_name,
+        entity_type,
+        ein,
+        business_address,
+        business_city,
+        business_state,
+        business_zip,
+        business_phone,
+        business_email,
+        industry,
+        year_established,
+        annual_revenue,
+        employee_count,
+        created_by
+    ) VALUES (
+        p_business_name,
+        p_entity_type,
+        p_ein,
+        p_business_address,
+        p_business_city,
+        p_business_state,
+        p_business_zip,
+        p_business_phone,
+        p_business_email,
+        p_industry,
+        p_year_established,
+        p_annual_revenue,
+        p_employee_count,
+        auth.uid()
+    ) RETURNING id INTO v_business_id;
+
+    -- Create tool enrollment
+    INSERT INTO public.tool_enrollments (
+        client_file_id,
+        business_id,
+        tool_slug,
+        enrolled_by
+    ) VALUES (
+        p_client_file_id,
+        v_business_id,
+        p_tool_slug,
+        auth.uid()
+    );
+
+    RETURN v_business_id;
 END;
 $$;
 
 
-ALTER FUNCTION "public"."auto_log_account_changes"() OWNER TO "postgres";
+ALTER FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) OWNER TO "postgres";
 
 
-CREATE OR REPLACE FUNCTION "public"."auto_log_profile_changes"() RETURNS "trigger"
+COMMENT ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) IS 'Creates a new business and enrolls it in a tax tool';
+
+
+
+CREATE OR REPLACE FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text" DEFAULT NULL::"text", "p_filing_status" "text" DEFAULT 'single'::"text", "p_dependents" integer DEFAULT 0, "p_home_address" "text" DEFAULT NULL::"text", "p_state" "text" DEFAULT 'NV'::"text", "p_wages_income" numeric DEFAULT 0, "p_passive_income" numeric DEFAULT 0, "p_unearned_income" numeric DEFAULT 0, "p_capital_gains" numeric DEFAULT 0, "p_household_income" numeric DEFAULT 0, "p_standard_deduction" boolean DEFAULT true, "p_custom_deduction" numeric DEFAULT 0, "p_business_owner" boolean DEFAULT false, "p_business_name" "text" DEFAULT NULL::"text", "p_entity_type" "text" DEFAULT NULL::"text", "p_business_address" "text" DEFAULT NULL::"text", "p_ordinary_k1_income" numeric DEFAULT 0, "p_guaranteed_k1_income" numeric DEFAULT 0, "p_business_annual_revenue" numeric DEFAULT 0) RETURNS "json"
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
 DECLARE
-    changed_fields JSONB;
-    activity_description TEXT;
-    target_profile_id UUID;
+  v_client_file_id UUID;
+  v_business_id UUID;
+  v_admin_id UUID;
+  v_affiliate_id UUID;
+  v_tax_profile_data JSONB;
 BEGIN
-    -- Determine the profile ID for logging
-    IF TG_OP = 'DELETE' THEN
-        target_profile_id := OLD.id;
-    ELSE
-        target_profile_id := NEW.id;
-    END IF;
-    
-    -- Log profile updates
-    IF TG_OP = 'UPDATE' THEN
-        -- Calculate changed fields
-        SELECT json_object_agg(key, json_build_object('old', old_val, 'new', new_val))::jsonb
-        INTO changed_fields
-        FROM (
-            SELECT key, 
-                   to_jsonb(OLD) ->> key as old_val,
-                   to_jsonb(NEW) ->> key as new_val
-            FROM jsonb_each(to_jsonb(NEW))
-            WHERE to_jsonb(NEW) ->> key IS DISTINCT FROM to_jsonb(OLD) ->> key
-            AND key NOT IN ('updated_at') -- Exclude automatic timestamp
-        ) changes;
-        
-        activity_description := 'Profile updated: ' || COALESCE(NEW.full_name, NEW.email);
-        IF changed_fields ? 'status' THEN
-            activity_description := activity_description || ' (status changed)';
-        END IF;
-        IF changed_fields ? 'role' THEN
-            activity_description := activity_description || ' (role changed)';
-        END IF;
-        
-        PERFORM log_profile_activity(
-            target_profile_id,
-            'profile_updated',
-            'profile',
-            target_profile_id,
-            activity_description,
-            jsonb_build_object(
-                'old_values', to_jsonb(OLD),
-                'new_values', to_jsonb(NEW),
-                'changed_fields', changed_fields,
-                'trigger_source', 'auto_log_profile_changes'
-            )
-        );
-    END IF;
-    
-    -- Log profile creation
-    IF TG_OP = 'INSERT' THEN
-        PERFORM log_profile_activity(
-            target_profile_id,
-            'profile_created',
-            'profile',
-            target_profile_id,
-            'New profile created: ' || COALESCE(NEW.full_name, NEW.email) || ' (role: ' || NEW.role || ')',
-            jsonb_build_object(
-                'profile_data', to_jsonb(NEW),
-                'created_by_system', auth.uid() IS NULL,
-                'trigger_source', 'auto_log_profile_changes'
-            )
-        );
-    END IF;
-    
-    -- Log profile deletion
-    IF TG_OP = 'DELETE' THEN
-        PERFORM log_profile_activity(
-            target_profile_id,
-            'profile_deleted',
-            'profile',
-            target_profile_id,
-            'Profile deleted: ' || COALESCE(OLD.full_name, OLD.email),
-            jsonb_build_object(
-                'deleted_profile_data', to_jsonb(OLD),
-                'deletion_timestamp', NOW(),
-                'trigger_source', 'auto_log_profile_changes'
-            )
-        );
-    END IF;
-    
-    RETURN COALESCE(NEW, OLD);
+  -- Get current user info
+  v_admin_id := auth.uid();
+  
+  -- Create tax profile data
+  v_tax_profile_data := jsonb_build_object(
+    'fullName', p_full_name,
+    'email', p_email,
+    'phone', p_phone,
+    'filingStatus', p_filing_status,
+    'dependents', p_dependents,
+    'homeAddress', p_home_address,
+    'state', p_state,
+    'wagesIncome', p_wages_income,
+    'passiveIncome', p_passive_income,
+    'unearnedIncome', p_unearned_income,
+    'capitalGains', p_capital_gains,
+    'householdIncome', p_household_income,
+    'standardDeduction', p_standard_deduction,
+    'customDeduction', p_custom_deduction,
+    'businessOwner', p_business_owner,
+    'businessName', p_business_name,
+    'entityType', p_entity_type,
+    'businessAddress', p_business_address,
+    'ordinaryK1Income', p_ordinary_k1_income,
+    'guaranteedK1Income', p_guaranteed_k1_income,
+    'businessAnnualRevenue', p_business_annual_revenue
+  );
+
+  -- Insert into admin_client_files
+  INSERT INTO admin_client_files (
+    admin_id,
+    affiliate_id,
+    full_name,
+    email,
+    phone,
+    filing_status,
+    dependents,
+    home_address,
+    state,
+    wages_income,
+    passive_income,
+    unearned_income,
+    capital_gains,
+    household_income,
+    standard_deduction,
+    custom_deduction,
+    business_owner,
+    business_name,
+    entity_type,
+    business_address,
+    ordinary_k1_income,
+    guaranteed_k1_income,
+    business_annual_revenue,
+    tax_profile_data,
+    archived
+  ) VALUES (
+    v_admin_id,
+    v_affiliate_id,
+    p_full_name,
+    p_email,
+    p_phone,
+    p_filing_status,
+    p_dependents,
+    p_home_address,
+    p_state,
+    p_wages_income,
+    p_passive_income,
+    p_unearned_income,
+    p_capital_gains,
+    p_household_income,
+    p_standard_deduction,
+    p_custom_deduction,
+    p_business_owner,
+    p_business_name,
+    p_entity_type,
+    p_business_address,
+    p_ordinary_k1_income,
+    p_guaranteed_k1_income,
+    p_business_annual_revenue,
+    v_tax_profile_data,
+    FALSE
+  ) RETURNING id INTO v_client_file_id;
+
+  -- If business owner and business name provided, create business
+  IF p_business_owner AND p_business_name IS NOT NULL AND p_business_name != '' THEN
+    INSERT INTO centralized_businesses (
+      business_name,
+      entity_type,
+      business_address,
+      ordinary_k1_income,
+      guaranteed_k1_income,
+      annual_revenue,
+      created_by,
+      archived
+    ) VALUES (
+      p_business_name,
+      COALESCE(p_entity_type, 'Other')::centralized_businesses.entity_type%TYPE,
+      p_business_address,
+      p_ordinary_k1_income,
+      p_guaranteed_k1_income,
+      p_business_annual_revenue,
+      v_admin_id,
+      FALSE
+    ) RETURNING id INTO v_business_id;
+
+    -- Create initial business year record
+    INSERT INTO business_years (
+      business_id,
+      year,
+      is_active,
+      ordinary_k1_income,
+      guaranteed_k1_income,
+      annual_revenue
+    ) VALUES (
+      v_business_id,
+      EXTRACT(YEAR FROM NOW()),
+      TRUE,
+      p_ordinary_k1_income,
+      p_guaranteed_k1_income,
+      p_business_annual_revenue
+    );
+  END IF;
+
+  -- Return the created IDs
+  RETURN json_build_object(
+    'client_file_id', v_client_file_id,
+    'business_id', v_business_id
+  );
 END;
 $$;
 
 
-ALTER FUNCTION "public"."auto_log_profile_changes"() OWNER TO "postgres";
+ALTER FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) OWNER TO "postgres";
 
 
-CREATE OR REPLACE FUNCTION "public"."auto_log_significant_tool_usage"() RETURNS "trigger"
+CREATE OR REPLACE FUNCTION "public"."create_strategy_details_for_proposal"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  -- This function will be called when a proposal is created
+  -- It will parse the proposed_strategies JSON and create corresponding strategy_details records
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."create_strategy_details_for_proposal"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text" DEFAULT NULL::"text") RETURNS "uuid"
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
 DECLARE
-    tool_name TEXT;
-    account_name TEXT;
-    user_name TEXT;
-    activity_description TEXT;
-    should_log BOOLEAN := false;
+    v_enrollment_id UUID;
 BEGIN
-    -- Only log certain significant actions
-    IF NEW.action IN ('tool_access', 'bulk_operation', 'data_export', 'api_call') 
-       OR NEW.success = false 
-       OR NEW.data_volume_mb > 100 
-       OR NEW.duration_seconds > 3600 THEN
-        should_log := true;
-    END IF;
+    INSERT INTO public.tool_enrollments (
+        client_file_id,
+        business_id,
+        tool_slug,
+        enrolled_by,
+        notes
+    ) VALUES (
+        p_client_file_id,
+        p_business_id,
+        p_tool_slug,
+        auth.uid(),
+        p_notes
+    ) ON CONFLICT (client_file_id, business_id, tool_slug) 
+    DO UPDATE SET 
+        status = 'active',
+        notes = COALESCE(p_notes, tool_enrollments.notes),
+        enrolled_at = NOW()
+    RETURNING id INTO v_enrollment_id;
     
-    -- Don't log routine feature usage to avoid noise
-    IF NOT should_log THEN
-        RETURN NEW;
-    END IF;
-    
-    -- Get contextual information
-    SELECT name INTO tool_name FROM public.tools WHERE id = NEW.tool_id;
-    SELECT name INTO account_name FROM public.accounts WHERE id = NEW.account_id;
-    SELECT full_name INTO user_name FROM public.profiles WHERE id = NEW.profile_id;
-    
-    -- Create activity description
-    IF NEW.success = false THEN
-        activity_description := 'Tool usage failed: ' || tool_name || ' (' || NEW.action || ')';
-    ELSIF NEW.action = 'data_export' THEN
-        activity_description := 'Data exported from: ' || tool_name;
-        IF NEW.data_volume_mb IS NOT NULL THEN
-            activity_description := activity_description || ' (' || NEW.data_volume_mb || ' MB)';
-        END IF;
-    ELSIF NEW.action = 'bulk_operation' THEN
-        activity_description := 'Bulk operation performed: ' || tool_name;
-    ELSIF NEW.data_volume_mb > 100 THEN
-        activity_description := 'Large data operation: ' || tool_name || ' (' || NEW.data_volume_mb || ' MB)';
-    ELSIF NEW.duration_seconds > 3600 THEN
-        activity_description := 'Extended tool session: ' || tool_name || ' (' || (NEW.duration_seconds / 60) || ' minutes)';
-    ELSE
-        activity_description := 'Tool accessed: ' || tool_name || ' (' || NEW.action || ')';
-    END IF;
-    
-    -- Log the activity
-    PERFORM log_account_activity(
-        NEW.account_id,
-        CASE 
-            WHEN NEW.success = false THEN 'admin_action'
-            WHEN NEW.action = 'data_export' THEN 'data_export'
-            WHEN NEW.action = 'bulk_operation' THEN 'bulk_operation'
-            ELSE 'tool_assigned'
-        END,
-        'tool',
-        NEW.tool_id,
-        activity_description,
-        jsonb_build_object(
-            'tool_name', tool_name,
-            'account_name', account_name,
-            'user_name', user_name,
-            'action', NEW.action,
-            'feature_used', NEW.feature_used,
-            'duration_seconds', NEW.duration_seconds,
-            'data_volume_mb', NEW.data_volume_mb,
-            'success', NEW.success,
-            'error_code', NEW.error_code,
-            'session_id', NEW.session_id,
-            'usage_log_id', NEW.id
-        )
-    );
-    
-    RETURN NEW;
+    RETURN v_enrollment_id;
 END;
 $$;
 
 
-ALTER FUNCTION "public"."auto_log_significant_tool_usage"() OWNER TO "postgres";
+ALTER FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") OWNER TO "postgres";
 
 
-COMMENT ON FUNCTION "public"."auto_log_significant_tool_usage"() IS 'Logs significant tool usage events as account activities';
+COMMENT ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") IS 'Enrolls a client/business in a tax tool';
 
 
 
-CREATE OR REPLACE FUNCTION "public"."auto_log_tool_assignment_changes"() RETURNS "trigger"
+CREATE OR REPLACE FUNCTION "public"."generate_portal_token"("p_business_id" "uuid") RETURNS TABLE("token" character varying, "expires_at" timestamp without time zone)
     LANGUAGE "plpgsql" SECURITY DEFINER
     AS $$
 DECLARE
-    target_account_id UUID;
-    target_tool_id UUID;
-    changed_fields JSONB;
-    activity_description TEXT;
-    tool_name TEXT;
-    account_name TEXT;
-    old_status TEXT;
-    new_status TEXT;
-BEGIN
-    -- Get the account_id and tool_id for the assignment
-    IF TG_OP = 'DELETE' THEN
-        target_account_id := OLD.account_id;
-        target_tool_id := OLD.tool_id;
-    ELSE
-        target_account_id := NEW.account_id;
-        target_tool_id := NEW.tool_id;
-    END IF;
-    
-    -- Get tool and account names for description
-    SELECT name INTO tool_name FROM public.tools WHERE id = target_tool_id;
-    SELECT name INTO account_name FROM public.accounts WHERE id = target_account_id;
-    
-    -- Log tool assignment updates
-    IF TG_OP = 'UPDATE' AND TG_TABLE_NAME = 'account_tool_access' THEN
-        -- Calculate changed fields
-        SELECT json_object_agg(key, json_build_object('old', old_val, 'new', new_val))::jsonb
-        INTO changed_fields
-        FROM (
-            SELECT key, 
-                   to_jsonb(OLD) ->> key as old_val,
-                   to_jsonb(NEW) ->> key as new_val
-            FROM jsonb_each(to_jsonb(NEW))
-            WHERE to_jsonb(NEW) ->> key IS DISTINCT FROM to_jsonb(OLD) ->> key
-              AND key NOT IN ('updated_at', 'updated_by') -- Exclude automatic fields
-        ) changes;
-        
-        -- Create meaningful description based on what changed
-        old_status := OLD.status;
-        new_status := NEW.status;
-        
-        IF changed_fields ? 'status' THEN
-            activity_description := 'Tool access status changed: ' || tool_name || ' (' || old_status || ' → ' || new_status || ')';
-        ELSIF changed_fields ? 'subscription_level' THEN
-            activity_description := 'Tool subscription level updated: ' || tool_name || ' (' || OLD.subscription_level || ' → ' || NEW.subscription_level || ')';
-        ELSIF changed_fields ? 'expires_at' THEN
-            activity_description := 'Tool access expiration updated: ' || tool_name;
-        ELSIF changed_fields ? 'access_level' THEN
-            activity_description := 'Tool access level changed: ' || tool_name || ' (' || OLD.access_level || ' → ' || NEW.access_level || ')';
-        ELSIF changed_fields ? 'features_enabled' THEN
-            activity_description := 'Tool features updated: ' || tool_name;
-        ELSIF changed_fields ? 'usage_limits' THEN
-            activity_description := 'Tool usage limits updated: ' || tool_name;
-        ELSE
-            activity_description := 'Tool access modified: ' || tool_name;
-        END IF;
-        
-        PERFORM log_account_activity(
-            target_account_id,
-            'tool_access_modified',
-            'tool',
-            target_tool_id,
-            activity_description,
-            jsonb_build_object(
-                'tool_name', tool_name,
-                'account_name', account_name,
-                'old_values', to_jsonb(OLD),
-                'new_values', to_jsonb(NEW),
-                'changed_fields', changed_fields,
-                'action_type', 'update'
-            )
-        );
-    END IF;
-    
-    -- Log tool assignment creation
-    IF TG_OP = 'INSERT' AND TG_TABLE_NAME = 'account_tool_access' THEN
-        activity_description := 'Tool access granted: ' || tool_name || 
-                               ' (level: ' || NEW.access_level || 
-                               ', subscription: ' || NEW.subscription_level || ')';
-        
-        PERFORM log_account_activity(
-            target_account_id,
-            'tool_assigned',
-            'tool',
-            target_tool_id,
-            activity_description,
-            jsonb_build_object(
-                'tool_name', tool_name,
-                'account_name', account_name,
-                'access_level', NEW.access_level,
-                'subscription_level', NEW.subscription_level,
-                'status', NEW.status,
-                'expires_at', NEW.expires_at,
-                'granted_by', NEW.created_by,
-                'action_type', 'assign'
-            )
-        );
-    END IF;
-    
-    -- Log tool assignment removal
-    IF TG_OP = 'DELETE' AND TG_TABLE_NAME = 'account_tool_access' THEN
-        activity_description := 'Tool access removed: ' || tool_name || 
-                               ' (was: ' || OLD.access_level || ', ' || OLD.subscription_level || ')';
-        
-        PERFORM log_account_activity(
-            target_account_id,
-            'tool_removed',
-            'tool',
-            target_tool_id,
-            activity_description,
-            jsonb_build_object(
-                'tool_name', tool_name,
-                'account_name', account_name,
-                'previous_access_level', OLD.access_level,
-                'previous_subscription_level', OLD.subscription_level,
-                'previous_status', OLD.status,
-                'granted_at', OLD.granted_at,
-                'last_accessed_at', OLD.last_accessed_at,
-                'removal_timestamp', NOW(),
-                'action_type', 'remove'
-            )
-        );
-    END IF;
-    
-    RETURN COALESCE(NEW, OLD);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."auto_log_tool_assignment_changes"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."auto_log_tool_assignment_changes"() IS 'Automatically logs tool assignment changes with detailed context';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type" DEFAULT 'full'::"public"."access_level_type", "p_subscription_level" "public"."subscription_level_type" DEFAULT 'basic'::"public"."subscription_level_type", "p_expires_at" timestamp with time zone DEFAULT NULL::timestamp with time zone, "p_notes" "text" DEFAULT NULL::"text") RETURNS "jsonb"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    result JSONB;
-    success_count INTEGER := 0;
-    error_count INTEGER := 0;
-    account_id UUID;
-    tool_id UUID;
-    errors JSONB := '[]'::jsonb;
-    assignments JSONB := '[]'::jsonb;
-BEGIN
-    -- Iterate through all account/tool combinations
-    FOREACH account_id IN ARRAY p_account_ids
-    LOOP
-        FOREACH tool_id IN ARRAY p_tool_ids
-        LOOP
-            BEGIN
-                -- Insert or update the tool assignment
-                INSERT INTO public.account_tool_access (
-                    account_id,
-                    tool_id,
-                    access_level,
-                    subscription_level,
-                    expires_at,
-                    notes,
-                    created_by,
-                    status
-                ) VALUES (
-                    account_id,
-                    tool_id,
-                    p_access_level,
-                    p_subscription_level,
-                    p_expires_at,
-                    p_notes,
-                    auth.uid(),
-                    'active'
-                )
-                ON CONFLICT (account_id, tool_id) 
-                DO UPDATE SET
-                    access_level = EXCLUDED.access_level,
-                    subscription_level = EXCLUDED.subscription_level,
-                    expires_at = EXCLUDED.expires_at,
-                    notes = EXCLUDED.notes,
-                    updated_by = auth.uid(),
-                    status = 'active';
-                
-                success_count := success_count + 1;
-                assignments := assignments || jsonb_build_object(
-                    'account_id', account_id,
-                    'tool_id', tool_id,
-                    'status', 'success'
-                );
-                
-            EXCEPTION WHEN OTHERS THEN
-                error_count := error_count + 1;
-                errors := errors || jsonb_build_object(
-                    'account_id', account_id,
-                    'tool_id', tool_id,
-                    'error', SQLERRM
-                );
-            END;
-        END LOOP;
-    END LOOP;
-    
-    -- Log bulk operation activity
-    PERFORM log_account_activity(
-        NULL, -- Will log for system user in individual assignments
-        'bulk_operation',
-        'system',
-        gen_random_uuid(),
-        'Bulk tool assignment: ' || success_count || ' assignments, ' || error_count || ' errors',
-        jsonb_build_object(
-            'operation_type', 'bulk_assign_tools',
-            'account_count', array_length(p_account_ids, 1),
-            'tool_count', array_length(p_tool_ids, 1),
-            'success_count', success_count,
-            'error_count', error_count,
-            'access_level', p_access_level,
-            'subscription_level', p_subscription_level,
-            'expires_at', p_expires_at,
-            'assignments', assignments,
-            'errors', errors
-        )
-    );
-    
-    -- Return operation result
-    result := jsonb_build_object(
-        'success_count', success_count,
-        'error_count', error_count,
-        'total_operations', success_count + error_count,
-        'assignments', assignments,
-        'errors', errors
-    );
-    
-    RETURN result;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type", "p_subscription_level" "public"."subscription_level_type", "p_expires_at" timestamp with time zone, "p_notes" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type", "p_subscription_level" "public"."subscription_level_type", "p_expires_at" timestamp with time zone, "p_notes" "text") IS 'Performs bulk tool assignments with comprehensive error handling and activity logging';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[] DEFAULT NULL::"uuid"[], "p_sync_strategy" "text" DEFAULT 'auto'::"text", "p_max_conflicts" integer DEFAULT 10) RETURNS TABLE("operation_id" "uuid", "total_processed" integer, "successful_syncs" integer, "conflicts_created" integer, "errors_encountered" integer, "processing_time_ms" integer, "summary" "jsonb")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    operation_uuid UUID := gen_random_uuid();
-    start_time TIMESTAMP := clock_timestamp();
-    profile_ids_to_process UUID[];
-    profile_id UUID;
-    sync_result RECORD;
-    total_count INTEGER := 0;
-    success_count INTEGER := 0;
-    conflict_count INTEGER := 0;
-    error_count INTEGER := 0;
-    operation_summary JSONB;
-BEGIN
-    -- Determine which profiles to process
-    IF p_profile_ids IS NULL THEN
-        -- Get all profiles needing sync
-        SELECT array_agg(id) INTO profile_ids_to_process
-        FROM public.profiles 
-        WHERE auth_sync_status IN ('pending', 'error') 
-           OR auth_sync_last_attempted IS NULL
-           OR auth_sync_last_attempted < NOW() - INTERVAL '24 hours';
-    ELSE
-        profile_ids_to_process := p_profile_ids;
-    END IF;
-
-    -- Process each profile
-    FOREACH profile_id IN ARRAY profile_ids_to_process
-    LOOP
-        total_count := total_count + 1;
-        
-        -- Stop if we've hit the conflict limit
-        IF conflict_count >= p_max_conflicts THEN
-            EXIT;
-        END IF;
-        
-        BEGIN
-            SELECT * INTO sync_result 
-            FROM sync_profile_with_auth(profile_id, p_sync_strategy);
-            
-            IF sync_result.success THEN
-                success_count := success_count + 1;
-            ELSE
-                IF sync_result.conflicts_created > 0 THEN
-                    conflict_count := conflict_count + sync_result.conflicts_created;
-                ELSE
-                    error_count := error_count + 1;
-                END IF;
-            END IF;
-            
-        EXCEPTION WHEN OTHERS THEN
-            error_count := error_count + 1;
-            
-            -- Log the error
-            PERFORM log_profile_activity(
-                profile_id,
-                'profile_sync_failed',
-                'auth',
-                profile_id,
-                'Bulk sync failed: ' || SQLERRM,
-                jsonb_build_object(
-                    'operation_id', operation_uuid,
-                    'error_message', SQLERRM,
-                    'error_state', SQLSTATE
-                )
-            );
-        END;
-    END LOOP;
-
-    -- Create summary
-    operation_summary := jsonb_build_object(
-        'operation_id', operation_uuid,
-        'strategy', p_sync_strategy,
-        'started_at', start_time,
-        'completed_at', clock_timestamp(),
-        'profiles_requested', array_length(profile_ids_to_process, 1),
-        'max_conflicts_limit', p_max_conflicts,
-        'stopped_early', conflict_count >= p_max_conflicts
-    );
-
-    RETURN QUERY SELECT 
-        operation_uuid as operation_id,
-        total_count as total_processed,
-        success_count as successful_syncs,
-        conflict_count as conflicts_created,
-        error_count as errors_encountered,
-        EXTRACT(MILLISECONDS FROM clock_timestamp() - start_time)::INTEGER as processing_time_ms,
-        operation_summary as summary;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[], "p_sync_strategy" "text", "p_max_conflicts" integer) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[], "p_sync_strategy" "text", "p_max_conflicts" integer) IS 'Perform bulk synchronization of profiles with auth.users';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text" DEFAULT NULL::"text") RETURNS "jsonb"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $_$
-DECLARE
-    result JSONB;
-    update_count INTEGER;
-    where_conditions TEXT := '';
-    query_text TEXT;
-BEGIN
-    -- Build dynamic WHERE clause from filters
-    IF p_assignment_filters ? 'account_ids' THEN
-        where_conditions := where_conditions || ' AND account_id = ANY($1)';
-    END IF;
-    
-    IF p_assignment_filters ? 'tool_ids' THEN
-        where_conditions := where_conditions || ' AND tool_id = ANY($2)';
-    END IF;
-    
-    IF p_assignment_filters ? 'subscription_levels' THEN
-        where_conditions := where_conditions || ' AND subscription_level = ANY($3)';
-    END IF;
-    
-    IF p_assignment_filters ? 'current_status' THEN
-        where_conditions := where_conditions || ' AND status = ANY($4)';
-    END IF;
-    
-    -- Remove leading ' AND '
-    where_conditions := substring(where_conditions from 5);
-    
-    -- Perform the update
-    query_text := 'UPDATE public.account_tool_access SET 
-                   status = $5,
-                   notes = COALESCE($6, notes),
-                   updated_by = auth.uid()
-                   WHERE ' || where_conditions;
-    
-    EXECUTE query_text 
-    USING 
-        p_assignment_filters->'account_ids',
-        p_assignment_filters->'tool_ids', 
-        p_assignment_filters->'subscription_levels',
-        p_assignment_filters->'current_status',
-        p_new_status,
-        p_notes;
-    
-    GET DIAGNOSTICS update_count = ROW_COUNT;
-    
-    -- Return result
-    result := jsonb_build_object(
-        'updated_count', update_count,
-        'new_status', p_new_status,
-        'filters_applied', p_assignment_filters
-    );
-    
-    RETURN result;
-END;
-$_$;
-
-
-ALTER FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text") IS 'Performs bulk status updates on tool assignments with dynamic filtering';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) RETURNS numeric
-    LANGUAGE "plpgsql"
-    AS $$
-DECLARE
-  business_record RECORD;
-  base_period_years INTEGER[];
-  total_gross_receipts NUMERIC := 0;
-  total_qre NUMERIC := 0;
-  year_count INTEGER := 0;
-  year INTEGER;
-  historical_item JSONB;
-BEGIN
-  -- Get business record
-  SELECT * INTO business_record 
-  FROM rd_businesses 
-  WHERE id = business_id;
-  
-  IF NOT FOUND THEN
-    RETURN 0;
-  END IF;
-  
-  -- Get base period years
-  base_period_years := get_base_period_years(business_record.start_year, tax_year);
-  
-  -- Calculate averages from historical data
-  FOREACH year IN ARRAY base_period_years LOOP
-    -- Find historical data for this year
-    FOR historical_item IN SELECT jsonb_array_elements(business_record.historical_data) LOOP
-      IF (historical_item->>'year')::INTEGER = year THEN
-        total_gross_receipts := total_gross_receipts + (historical_item->>'gross_receipts')::NUMERIC;
-        total_qre := total_qre + (historical_item->>'qre')::NUMERIC;
-        year_count := year_count + 1;
-        EXIT;
-      END IF;
-    END LOOP;
-  END LOOP;
-  
-  -- Return average QRE if we have data, otherwise 0
-  IF year_count > 0 THEN
-    RETURN total_qre / year_count;
-  ELSE
-    RETURN 0;
-  END IF;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") RETURNS "jsonb"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    metrics JSONB := '{}';
-    total_proposals INTEGER;
-    active_proposals INTEGER;
-    total_savings DECIMAL;
-    recent_activities INTEGER;
-    completion_rate DECIMAL;
-BEGIN
-    -- Calculate proposal metrics
-    SELECT COUNT(*), COUNT(CASE WHEN status != 'cancelled' THEN 1 END), COALESCE(SUM(total_savings), 0)
-    INTO total_proposals, active_proposals, total_savings
-    FROM tax_proposals WHERE client_id = p_client_id::TEXT;
-    
-    -- Calculate recent activity count (last 30 days)
-    SELECT COUNT(*)
-    INTO recent_activities
-    FROM client_activities 
-    WHERE client_id = p_client_id AND created_at >= NOW() - INTERVAL '30 days';
-    
-    -- Calculate completion rate based on engagement status
-    SELECT completion_percentage
-    INTO completion_rate
-    FROM client_engagement_status
-    WHERE client_id = p_client_id;
-    
-    -- Build metrics JSON
-    metrics := jsonb_build_object(
-        'total_proposals', COALESCE(total_proposals, 0),
-        'active_proposals', COALESCE(active_proposals, 0),
-        'total_savings', COALESCE(total_savings, 0),
-        'recent_activities', COALESCE(recent_activities, 0),
-        'completion_rate', COALESCE(completion_rate, 0.00),
-        'calculated_at', NOW()
-    );
-    
-    -- Cache the metrics
-    INSERT INTO client_dashboard_metrics (client_id, metric_type, metric_data, expires_at)
-    VALUES (p_client_id, 'overview', metrics, NOW() + INTERVAL '1 hour')
-    ON CONFLICT (client_id, metric_type) DO UPDATE SET
-        metric_data = metrics,
-        calculated_at = NOW(),
-        expires_at = NOW() + INTERVAL '1 hour',
-        updated_at = NOW();
-    
-    RETURN metrics;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") IS 'Calculates and caches dashboard metrics for a client';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) RETURNS numeric
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    personal_total DECIMAL(12,2) := 0;
-    business_total DECIMAL(12,2) := 0;
-BEGIN
-    -- Get personal income for the year
-    SELECT COALESCE(total_income, 0) INTO personal_total
-    FROM personal_years
-    WHERE user_id = p_user_id AND year = p_year;
-    
-    -- Get business income for the year
-    SELECT COALESCE(total_business_income, 0) INTO business_total
-    FROM business_years
-    WHERE user_id = p_user_id AND year = p_year;
-    
-    RETURN COALESCE(personal_total, 0) + COALESCE(business_total, 0);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid" DEFAULT NULL::"uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    has_permission BOOLEAN := FALSE;
-BEGIN
-    -- Check direct permissions
-    SELECT true INTO has_permission
-    FROM public.profile_permissions pp
-    WHERE pp.profile_id = p_profile_id
-      AND pp.resource_type = p_resource_type
-      AND pp.action = p_action
-      AND (p_resource_id IS NULL OR pp.resource_id = p_resource_id OR pp.resource_id IS NULL)
-      AND pp.is_active = true
-      AND (pp.expires_at IS NULL OR pp.expires_at > NOW())
-    LIMIT 1;
-    
-    IF has_permission THEN
-        RETURN TRUE;
-    END IF;
-    
-    -- Check role-based permissions (simplified - would integrate with role definitions)
-    SELECT true INTO has_permission
-    FROM public.profile_roles pr
-    JOIN public.profiles p ON pr.profile_id = p.id
-    WHERE pr.profile_id = p_profile_id
-      AND pr.is_active = true
-      AND (pr.expires_at IS NULL OR pr.expires_at > NOW())
-      AND (
-        (pr.role_name = 'super_admin') OR
-        (pr.role_name = 'admin' AND p_resource_type != 'system') OR
-        (pr.role_name = 'affiliate_manager' AND p_resource_type IN ('client', 'affiliate', 'tool')) OR
-        (pr.role_name = 'client_manager' AND p_resource_type = 'client')
-      )
-    LIMIT 1;
-    
-    RETURN COALESCE(has_permission, FALSE);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid") IS 'Check if a profile has a specific permission';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."cleanup_expired_sessions"() RETURNS integer
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    cleaned_count INTEGER;
-BEGIN
-    UPDATE admin_sessions 
-    SET is_active = false 
-    WHERE is_active = true 
-    AND expires_at < NOW();
-    
-    GET DIAGNOSTICS cleaned_count = ROW_COUNT;
-    RETURN cleaned_count;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."cleanup_expired_sessions"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."cleanup_old_security_events"() RETURNS integer
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    deleted_count INTEGER;
-BEGIN
-    -- Delete security events older than 1 year
-    DELETE FROM security_events 
-    WHERE created_at < NOW() - INTERVAL '1 year'
-    AND severity IN ('LOW', 'MEDIUM');
-    
-    GET DIAGNOSTICS deleted_count = ROW_COUNT;
-    
-    -- Log the cleanup
-    PERFORM log_security_event(
-        'security_events_cleanup',
-        NULL,
-        jsonb_build_object('deleted_count', deleted_count),
-        'LOW'
-    );
-    
-    RETURN deleted_count;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."cleanup_old_security_events"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."cleanup_old_security_events"() IS 'Clean up old security events to maintain performance';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") RETURNS TABLE("success" boolean, "total_processed" integer, "total_successful" integer, "total_failed" integer, "can_rollback" boolean)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_total_processed INTEGER;
-    v_total_successful INTEGER;
-    v_total_failed INTEGER;
-    v_can_rollback BOOLEAN;
-BEGIN
-    -- Get final counts
-    SELECT 
-        COUNT(*),
-        COUNT(*) FILTER (WHERE success = TRUE),
-        COUNT(*) FILTER (WHERE success = FALSE)
-    INTO v_total_processed, v_total_successful, v_total_failed
-    FROM public.bulk_operation_results
-    WHERE bulk_operation_id = p_bulk_operation_id;
-    
-    -- Determine if rollback is possible
-    v_can_rollback := v_total_successful > 0 AND EXISTS (
-        SELECT 1 FROM public.bulk_operation_results
-        WHERE bulk_operation_id = p_bulk_operation_id 
-          AND success = TRUE 
-          AND rollback_data != '{}'
-    );
-    
-    -- Update bulk operation
-    UPDATE public.bulk_operations 
-    SET 
-        status = CASE 
-            WHEN v_total_failed = 0 THEN 'completed'
-            WHEN v_total_successful = 0 THEN 'failed'
-            ELSE 'completed'
-        END,
-        completed_at = NOW(),
-        can_rollback = v_can_rollback,
-        progress_percentage = 100.00,
-        updated_at = NOW()
-    WHERE id = p_bulk_operation_id;
-    
-    RETURN QUERY SELECT 
-        TRUE as success,
-        v_total_processed as total_processed,
-        v_total_successful as total_successful,
-        v_total_failed as total_failed,
-        v_can_rollback as can_rollback;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") IS 'Mark bulk operation as complete and update final statistics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_alert_id UUID;
-BEGIN
-    INSERT INTO public.account_activities (
-        profile_id,
-        activity_type,
-        target_type,
-        target_id,
-        description,
-        success,
-        metadata
-    ) VALUES (
-        p_profile_id,
-        'security_alert',
-        'alert',
-        gen_random_uuid(),
-        p_title || ': ' || p_description,
-        true,
-        jsonb_build_object(
-            'alert_type', p_alert_type,
-            'severity', p_severity,
-            'title', p_title,
-            'description', p_description,
-            'additional_data', p_metadata
-        )
-    ) RETURNING target_id INTO v_alert_id;
-    
-    RETURN v_alert_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb") IS 'Create activity-based security alerts';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb" DEFAULT '{}'::"jsonb", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS TABLE("operation_id" "uuid", "total_targets" integer, "estimated_duration_minutes" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_operation_id UUID;
-    v_initiated_by UUID;
-    v_total_targets INTEGER;
-    v_estimated_duration INTEGER;
-BEGIN
-    -- Get current user
-    v_initiated_by := auth.uid();
-    v_total_targets := array_length(p_target_profile_ids, 1);
-    
-    -- Estimate duration based on operation type and target count
-    v_estimated_duration := CASE p_operation_type
-        WHEN 'update_status' THEN v_total_targets * 2
-        WHEN 'assign_role' THEN v_total_targets * 3
-        WHEN 'sync_auth' THEN v_total_targets * 5
-        WHEN 'verify_email' THEN v_total_targets * 4
-        ELSE v_total_targets * 3
-    END;
-    
-    -- Create bulk operation record
-    INSERT INTO public.bulk_operations (
-        operation_type, operation_name, initiated_by, target_profile_ids,
-        operation_data, total_targets, metadata,
-        estimated_completion_at
-    ) VALUES (
-        p_operation_type, p_operation_name, v_initiated_by, p_target_profile_ids,
-        p_operation_data, v_total_targets, p_metadata,
-        NOW() + (v_estimated_duration || ' minutes')::INTERVAL
-    ) RETURNING id INTO v_operation_id;
-    
-    -- Create individual result records
-    INSERT INTO public.bulk_operation_results (
-        bulk_operation_id, target_profile_id, sequence_number
-    )
-    SELECT 
-        v_operation_id, 
-        unnest(p_target_profile_ids), 
-        generate_series(1, v_total_targets);
-    
-    RETURN QUERY SELECT 
-        v_operation_id as operation_id,
-        v_total_targets as total_targets,
-        v_estimated_duration as estimated_duration_minutes;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb", "p_metadata" "jsonb") IS 'Create a new bulk operation with tracking records';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text" DEFAULT NULL::"text", "p_business_address" "text" DEFAULT NULL::"text", "p_business_city" "text" DEFAULT NULL::"text", "p_business_state" "text" DEFAULT NULL::"text", "p_business_zip" "text" DEFAULT NULL::"text", "p_business_phone" "text" DEFAULT NULL::"text", "p_business_email" "text" DEFAULT NULL::"text", "p_industry" "text" DEFAULT NULL::"text", "p_year_established" integer DEFAULT NULL::integer, "p_annual_revenue" numeric DEFAULT NULL::numeric, "p_employee_count" integer DEFAULT NULL::integer) RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_business_id UUID;
-BEGIN
-    -- Insert business
-    INSERT INTO public.centralized_businesses (
-        business_name,
-        entity_type,
-        ein,
-        business_address,
-        business_city,
-        business_state,
-        business_zip,
-        business_phone,
-        business_email,
-        industry,
-        year_established,
-        annual_revenue,
-        employee_count,
-        created_by
-    ) VALUES (
-        p_business_name,
-        p_entity_type,
-        p_ein,
-        p_business_address,
-        p_business_city,
-        p_business_state,
-        p_business_zip,
-        p_business_phone,
-        p_business_email,
-        p_industry,
-        p_year_established,
-        p_annual_revenue,
-        p_employee_count,
-        auth.uid()
-    ) RETURNING id INTO v_business_id;
-
-    -- Create tool enrollment
-    INSERT INTO public.tool_enrollments (
-        client_file_id,
-        business_id,
-        tool_slug,
-        enrolled_by
-    ) VALUES (
-        p_client_file_id,
-        v_business_id,
-        p_tool_slug,
-        auth.uid()
-    );
-
-    RETURN v_business_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text" DEFAULT NULL::"text", "p_filing_status" "text" DEFAULT 'single'::"text", "p_dependents" integer DEFAULT 0, "p_home_address" "text" DEFAULT NULL::"text", "p_state" "text" DEFAULT 'NV'::"text", "p_wages_income" numeric DEFAULT 0, "p_passive_income" numeric DEFAULT 0, "p_unearned_income" numeric DEFAULT 0, "p_capital_gains" numeric DEFAULT 0, "p_household_income" numeric DEFAULT 0, "p_standard_deduction" boolean DEFAULT true, "p_custom_deduction" numeric DEFAULT 0, "p_business_owner" boolean DEFAULT false, "p_business_name" "text" DEFAULT NULL::"text", "p_entity_type" "text" DEFAULT NULL::"text", "p_business_address" "text" DEFAULT NULL::"text", "p_ordinary_k1_income" numeric DEFAULT 0, "p_guaranteed_k1_income" numeric DEFAULT 0, "p_business_annual_revenue" numeric DEFAULT 0) RETURNS json
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-  v_client_file_id UUID;
-  v_business_id UUID;
-  v_admin_id UUID;
-  v_affiliate_id UUID;
-  v_tax_profile_data JSONB;
-BEGIN
-  -- Get current user info
-  v_admin_id := auth.uid();
-  
-  -- Create tax profile data
-  v_tax_profile_data := jsonb_build_object(
-    'fullName', p_full_name,
-    'email', p_email,
-    'phone', p_phone,
-    'filingStatus', p_filing_status,
-    'dependents', p_dependents,
-    'homeAddress', p_home_address,
-    'state', p_state,
-    'wagesIncome', p_wages_income,
-    'passiveIncome', p_passive_income,
-    'unearnedIncome', p_unearned_income,
-    'capitalGains', p_capital_gains,
-    'householdIncome', p_household_income,
-    'standardDeduction', p_standard_deduction,
-    'customDeduction', p_custom_deduction,
-    'businessOwner', p_business_owner,
-    'businessName', p_business_name,
-    'entityType', p_entity_type,
-    'businessAddress', p_business_address,
-    'ordinaryK1Income', p_ordinary_k1_income,
-    'guaranteedK1Income', p_guaranteed_k1_income,
-    'businessAnnualRevenue', p_business_annual_revenue
-  );
-
-  -- Insert into admin_client_files
-  INSERT INTO admin_client_files (
-    admin_id,
-    affiliate_id,
-    full_name,
-    email,
-    phone,
-    filing_status,
-    dependents,
-    home_address,
-    state,
-    wages_income,
-    passive_income,
-    unearned_income,
-    capital_gains,
-    household_income,
-    standard_deduction,
-    custom_deduction,
-    business_owner,
-    business_name,
-    entity_type,
-    business_address,
-    ordinary_k1_income,
-    guaranteed_k1_income,
-    business_annual_revenue,
-    tax_profile_data,
-    archived
-  ) VALUES (
-    v_admin_id,
-    v_affiliate_id,
-    p_full_name,
-    p_email,
-    p_phone,
-    p_filing_status,
-    p_dependents,
-    p_home_address,
-    p_state,
-    p_wages_income,
-    p_passive_income,
-    p_unearned_income,
-    p_capital_gains,
-    p_household_income,
-    p_standard_deduction,
-    p_custom_deduction,
-    p_business_owner,
-    p_business_name,
-    p_entity_type,
-    p_business_address,
-    p_ordinary_k1_income,
-    p_guaranteed_k1_income,
-    p_business_annual_revenue,
-    v_tax_profile_data,
-    FALSE
-  ) RETURNING id INTO v_client_file_id;
-
-  -- If business owner and business name provided, create business
-  IF p_business_owner AND p_business_name IS NOT NULL AND p_business_name != '' THEN
-    INSERT INTO centralized_businesses (
-      business_name,
-      entity_type,
-      business_address,
-      ordinary_k1_income,
-      guaranteed_k1_income,
-      annual_revenue,
-      created_by,
-      archived
-    ) VALUES (
-      p_business_name,
-      COALESCE(p_entity_type, 'Other')::centralized_businesses.entity_type%TYPE,
-      p_business_address,
-      p_ordinary_k1_income,
-      p_guaranteed_k1_income,
-      p_business_annual_revenue,
-      v_admin_id,
-      FALSE
-    ) RETURNING id INTO v_business_id;
-
-    -- Create initial business year record
-    INSERT INTO business_years (
-      business_id,
-      year,
-      is_active,
-      ordinary_k1_income,
-      guaranteed_k1_income,
-      annual_revenue
-    ) VALUES (
-      v_business_id,
-      EXTRACT(YEAR FROM NOW()),
-      TRUE,
-      p_ordinary_k1_income,
-      p_guaranteed_k1_income,
-      p_business_annual_revenue
-    );
-  END IF;
-
-  -- Return the created IDs
-  RETURN json_build_object(
-    'client_file_id', v_client_file_id,
-    'business_id', v_business_id
-  );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_tax_docs_folder UUID;
-    v_financial_folder UUID;
-    v_current_year INTEGER := EXTRACT(YEAR FROM NOW());
-BEGIN
-    -- Create Tax Documents folder
-    SELECT create_document_folder(p_client_id, NULL, 'Tax Documents', p_created_by) INTO v_tax_docs_folder;
-    
-    -- Create subfolders for current and previous years
-    PERFORM create_document_folder(p_client_id, v_tax_docs_folder, v_current_year::TEXT, p_created_by);
-    PERFORM create_document_folder(p_client_id, v_tax_docs_folder, (v_current_year - 1)::TEXT, p_created_by);
-    
-    -- Create Financial Statements folder
-    SELECT create_document_folder(p_client_id, NULL, 'Financial Statements', p_created_by) INTO v_financial_folder;
-    
-    -- Create other default folders
-    PERFORM create_document_folder(p_client_id, NULL, 'Contracts & Agreements', p_created_by);
-    PERFORM create_document_folder(p_client_id, NULL, 'Receipts & Invoices', p_created_by);
-    PERFORM create_document_folder(p_client_id, NULL, 'General Documents', p_created_by);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") IS 'Creates default folder structure for new clients';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_folder_id UUID;
-    v_parent_path TEXT := '';
-    v_new_path TEXT;
-BEGIN
-    -- Get parent folder path
-    IF p_parent_folder_id IS NOT NULL THEN
-        SELECT path INTO v_parent_path 
-        FROM document_folders 
-        WHERE id = p_parent_folder_id AND client_id = p_client_id;
-        
-        IF v_parent_path IS NULL THEN
-            RAISE EXCEPTION 'Parent folder not found';
-        END IF;
-    END IF;
-    
-    -- Create new path
-    v_new_path := CASE 
-        WHEN v_parent_path = '' THEN p_name
-        ELSE v_parent_path || '/' || p_name
-    END;
-    
-    -- Insert folder
-    INSERT INTO document_folders (client_id, parent_folder_id, name, path, created_by)
-    VALUES (p_client_id, p_parent_folder_id, p_name, v_new_path, p_created_by)
-    RETURNING id INTO v_folder_id;
-    
-    RETURN v_folder_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") IS 'Creates a new folder with proper path management';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."create_profile_if_missing"("user_id" "uuid", "user_email" "text", "user_name" "text" DEFAULT NULL::"text") RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  INSERT INTO public.profiles (id, name, email, role)
-  VALUES (
-    user_id,
-    COALESCE(user_name, split_part(user_email, '@', 1)),
-    user_email,
-    CASE 
-      WHEN user_email ILIKE '%admin%' THEN 'admin'::user_role
-      ELSE 'affiliate'::user_role
-    END
-  )
-  ON CONFLICT (id) DO NOTHING;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_profile_if_missing"("user_id" "uuid", "user_email" "text", "user_name" "text") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."create_security_alert"("p_alert_type" character varying, "p_severity" character varying, "p_user_id" "uuid" DEFAULT NULL::"uuid", "p_description" "text" DEFAULT ''::"text", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    alert_id UUID;
-BEGIN
-    INSERT INTO security_alerts (
-        alert_type,
-        severity,
-        user_id,
-        description,
-        metadata
-    ) VALUES (
-        p_alert_type,
-        p_severity,
-        p_user_id,
-        p_description,
-        p_metadata
-    ) RETURNING security_alerts.alert_id INTO alert_id;
-    
-    RETURN alert_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_security_alert"("p_alert_type" character varying, "p_severity" character varying, "p_user_id" "uuid", "p_description" "text", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."create_strategy_details_for_proposal"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-  -- This function will be called when a proposal is created
-  -- It will parse the proposed_strategies JSON and create corresponding strategy_details records
-  RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_strategy_details_for_proposal"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid" DEFAULT NULL::"uuid", "p_trial_days" integer DEFAULT NULL::integer, "p_billing_contact_profile_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("subscription_id" "uuid", "success" boolean, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_subscription_id UUID;
-    v_plan_record RECORD;
-    v_trial_end TIMESTAMP WITH TIME ZONE;
-    v_period_end TIMESTAMP WITH TIME ZONE;
-BEGIN
-    -- Get plan details
-    SELECT * INTO v_plan_record FROM public.subscription_plans WHERE id = p_plan_id AND is_active = TRUE;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT NULL::UUID, FALSE, 'Invalid or inactive subscription plan';
-        RETURN;
-    END IF;
-    
-    -- Calculate trial and billing periods
-    IF p_trial_days IS NOT NULL AND p_trial_days > 0 THEN
-        v_trial_end := NOW() + (p_trial_days || ' days')::INTERVAL;
-        v_period_end := v_trial_end;
-    ELSE
-        v_trial_end := NULL;
-        v_period_end := NOW() + (v_plan_record.interval_count || ' ' || v_plan_record.billing_interval)::INTERVAL;
-    END IF;
-    
-    -- Create subscription
-    INSERT INTO public.subscriptions (
-        account_id,
-        plan_id,
-        payment_method_id,
-        billing_contact_profile_id,
-        current_period_end,
-        trial_end,
-        status
-    ) VALUES (
-        p_account_id,
-        p_plan_id,
-        p_payment_method_id,
-        p_billing_contact_profile_id,
-        v_period_end,
-        v_trial_end,
-        CASE WHEN v_trial_end IS NOT NULL THEN 'trialing' ELSE 'active' END
-    ) RETURNING id INTO v_subscription_id;
-    
-    -- Log billing event
-    INSERT INTO public.billing_events (
-        account_id,
-        event_type,
-        subscription_id,
-        event_data
-    ) VALUES (
-        p_account_id,
-        'subscription_created',
-        v_subscription_id,
-        jsonb_build_object(
-            'plan_code', v_plan_record.plan_code,
-            'trial_days', p_trial_days,
-            'status', CASE WHEN v_trial_end IS NOT NULL THEN 'trialing' ELSE 'active' END
-        )
-    );
-    
-    RETURN QUERY SELECT v_subscription_id, TRUE, 'Subscription created successfully';
-END;
-$$;
-
-
-ALTER FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid", "p_trial_days" integer, "p_billing_contact_profile_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid", "p_trial_days" integer, "p_billing_contact_profile_id" "uuid") IS 'Create a new subscription for an account with trial period support';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."detect_profile_sync_discrepancies"() RETURNS TABLE("discrepancy_type" "text", "profile_id" "uuid", "auth_user_id" "uuid", "profile_email" "text", "auth_email" "text", "profile_data" "jsonb", "auth_data" "jsonb", "severity" "text", "description" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    -- Return profiles that exist but have no matching auth.users
-    RETURN QUERY
-    SELECT 
-        'profile_missing_auth'::TEXT as discrepancy_type,
-        p.id as profile_id,
-        NULL::UUID as auth_user_id,
-        p.email as profile_email,
-        NULL::TEXT as auth_email,
-        to_jsonb(p) as profile_data,
-        '{}'::JSONB as auth_data,
-        'high'::TEXT as severity,
-        'Profile exists but no corresponding auth.users record found'::TEXT as description
-    FROM public.profiles p
-    WHERE NOT EXISTS (
-        SELECT 1 FROM auth.users au WHERE au.email = p.email
-    );
-
-    -- Return auth.users that exist but have no matching profile
-    RETURN QUERY
-    SELECT 
-        'auth_missing_profile'::TEXT as discrepancy_type,
-        NULL::UUID as profile_id,
-        au.id as auth_user_id,
-        NULL::TEXT as profile_email,
-        au.email::TEXT as auth_email,
-        '{}'::JSONB as profile_data,
-        jsonb_build_object(
-            'id', au.id,
-            'email', au.email::TEXT,
-            'email_confirmed_at', au.email_confirmed_at,
-            'last_sign_in_at', au.last_sign_in_at,
-            'created_at', au.created_at,
-            'updated_at', au.updated_at,
-            'user_metadata', au.raw_user_meta_data,
-            'app_metadata', au.raw_app_meta_data
-        ) as auth_data,
-        'medium'::TEXT as severity,
-        'Auth.users record exists but no corresponding profile found'::TEXT as description
-    FROM auth.users au
-    WHERE NOT EXISTS (
-        SELECT 1 FROM public.profiles p WHERE p.email = au.email
-    );
-
-    -- Return email mismatches (same UUID but different emails)
-    RETURN QUERY
-    SELECT 
-        'email_mismatch'::TEXT as discrepancy_type,
-        p.id as profile_id,
-        au.id as auth_user_id,
-        p.email as profile_email,
-        au.email::TEXT as auth_email,
-        to_jsonb(p) as profile_data,
-        jsonb_build_object(
-            'id', au.id,
-            'email', au.email::TEXT,
-            'email_confirmed_at', au.email_confirmed_at,
-            'last_sign_in_at', au.last_sign_in_at,
-            'created_at', au.created_at,
-            'updated_at', au.updated_at
-        ) as auth_data,
-        'critical'::TEXT as severity,
-        'Profile and auth.users have same ID but different emails'::TEXT as description
-    FROM public.profiles p
-    JOIN auth.users au ON p.id = au.id
-    WHERE p.email != au.email;
-
-    -- Return metadata inconsistencies
-    RETURN QUERY
-    SELECT 
-        'metadata_inconsistency'::TEXT as discrepancy_type,
-        p.id as profile_id,
-        au.id as auth_user_id,
-        p.email as profile_email,
-        au.email::TEXT as auth_email,
-        to_jsonb(p) as profile_data,
-        jsonb_build_object(
-            'user_metadata', au.raw_user_meta_data,
-            'app_metadata', au.raw_app_meta_data
-        ) as auth_data,
-        'low'::TEXT as severity,
-        'Profile and auth.users metadata may be inconsistent'::TEXT as description
-    FROM public.profiles p
-    JOIN auth.users au ON p.email = au.email
-    WHERE (
-        COALESCE(p.full_name, '') != COALESCE(au.raw_user_meta_data->>'full_name', '') OR
-        COALESCE(p.avatar_url, '') != COALESCE(au.raw_user_meta_data->>'avatar_url', '')
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."detect_profile_sync_discrepancies"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."detect_profile_sync_discrepancies"() IS 'Detect discrepancies between profiles and auth.users tables';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer DEFAULT 24, "p_min_threshold" integer DEFAULT 10) RETURNS TABLE("profile_id" "uuid", "profile_name" "text", "profile_email" "text", "suspicious_pattern" character varying, "activity_count" integer, "risk_score" integer, "details" "jsonb", "detected_at" timestamp with time zone)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    -- High-risk activities in short time
-    RETURN QUERY
-    SELECT 
-        pam.profile_id,
-        pam.profile_name,
-        pam.profile_email,
-        'high_risk_burst'::VARCHAR as suspicious_pattern,
-        COUNT(*)::INTEGER as activity_count,
-        80 as risk_score,
-        jsonb_build_object(
-            'time_window_hours', p_lookback_hours,
-            'high_risk_activities', array_agg(DISTINCT pam.activity_type),
-            'first_activity', MIN(pam.created_at),
-            'last_activity', MAX(pam.created_at)
-        ) as details,
-        NOW() as detected_at
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at >= NOW() - (p_lookback_hours || ' hours')::INTERVAL
-      AND pam.risk_level = 'high'
-      AND pam.profile_id IS NOT NULL
-    GROUP BY pam.profile_id, pam.profile_name, pam.profile_email
-    HAVING COUNT(*) >= 3;
-    
-    -- Multiple failed activities
-    RETURN QUERY
-    SELECT 
-        pam.profile_id,
-        pam.profile_name,
-        pam.profile_email,
-        'multiple_failures'::VARCHAR as suspicious_pattern,
-        COUNT(*)::INTEGER as activity_count,
-        60 as risk_score,
-        jsonb_build_object(
-            'time_window_hours', p_lookback_hours,
-            'failed_activities', array_agg(DISTINCT pam.activity_type),
-            'error_patterns', array_agg(DISTINCT pam.error_details) FILTER (WHERE pam.error_details IS NOT NULL)
-        ) as details,
-        NOW() as detected_at
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at >= NOW() - (p_lookback_hours || ' hours')::INTERVAL
-      AND pam.result_status IN ('error', 'failed')
-      AND pam.profile_id IS NOT NULL
-    GROUP BY pam.profile_id, pam.profile_name, pam.profile_email
-    HAVING COUNT(*) >= 5;
-    
-    -- Unusual activity volume
-    RETURN QUERY
-    SELECT 
-        pam.profile_id,
-        pam.profile_name,
-        pam.profile_email,
-        'unusual_volume'::VARCHAR as suspicious_pattern,
-        COUNT(*)::INTEGER as activity_count,
-        40 as risk_score,
-        jsonb_build_object(
-            'time_window_hours', p_lookback_hours,
-            'total_activities', COUNT(*),
-            'activity_types', array_agg(DISTINCT pam.activity_type),
-            'peak_hour', EXTRACT(HOUR FROM MAX(pam.created_at))
-        ) as details,
-        NOW() as detected_at
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at >= NOW() - (p_lookback_hours || ' hours')::INTERVAL
-      AND pam.profile_id IS NOT NULL
-    GROUP BY pam.profile_id, pam.profile_name, pam.profile_email
-    HAVING COUNT(*) >= p_min_threshold * 3;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer, "p_min_threshold" integer) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer, "p_min_threshold" integer) IS 'Detect suspicious activity patterns in profile management';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text" DEFAULT NULL::"text") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_enrollment_id UUID;
-BEGIN
-    INSERT INTO public.tool_enrollments (
-        client_file_id,
-        business_id,
-        tool_slug,
-        enrolled_by,
-        notes
-    ) VALUES (
-        p_client_file_id,
-        p_business_id,
-        p_tool_slug,
-        auth.uid(),
-        p_notes
-    ) ON CONFLICT (client_file_id, business_id, tool_slug) 
-    DO UPDATE SET 
-        status = 'active',
-        notes = COALESCE(p_notes, tool_enrollments.notes),
-        enrolled_at = NOW()
-    RETURNING id INTO v_enrollment_id;
-    
-    RETURN v_enrollment_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."ensure_client_has_owner"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    -- If deleting or updating an owner, ensure another owner exists
-    IF (TG_OP = 'DELETE' OR TG_OP = 'UPDATE') AND OLD.role = 'owner' THEN
-        IF NOT EXISTS (
-            SELECT 1 FROM client_users 
-            WHERE client_id = OLD.client_id 
-            AND role = 'owner' 
-            AND is_active = true
-            AND (TG_OP = 'DELETE' OR id != OLD.id)
-        ) THEN
-            RAISE EXCEPTION 'Cannot remove the last owner from a client. At least one owner must remain.';
-        END IF;
-    END IF;
-    
-    -- If updating role from owner to non-owner, ensure another owner exists
-    IF TG_OP = 'UPDATE' AND OLD.role = 'owner' AND NEW.role != 'owner' THEN
-        IF NOT EXISTS (
-            SELECT 1 FROM client_users 
-            WHERE client_id = NEW.client_id 
-            AND role = 'owner' 
-            AND is_active = true
-            AND id != NEW.id
-        ) THEN
-            RAISE EXCEPTION 'Cannot change the last owner role. At least one owner must remain.';
-        END IF;
-    END IF;
-    
-    RETURN COALESCE(NEW, OLD);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."ensure_client_has_owner"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."expire_old_invitations"() RETURNS integer
-    LANGUAGE "plpgsql"
-    AS $$
-DECLARE
-    expired_count INTEGER;
-BEGIN
-    UPDATE invitations 
-    SET status = 'expired', updated_at = now()
-    WHERE status = 'pending' AND expires_at < now();
-    
-    GET DIAGNOSTICS expired_count = ROW_COUNT;
-    RETURN expired_count;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."expire_old_invitations"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."expire_tool_access"() RETURNS integer
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    expired_count INTEGER;
-BEGIN
-    -- Update expired tool access records
-    WITH expired_access AS (
-        UPDATE public.account_tool_access 
-        SET status = 'expired',
-            updated_at = NOW(),
-            updated_by = NULL  -- System action
-        WHERE expires_at IS NOT NULL 
-          AND expires_at <= NOW() 
-          AND status = 'active'
-        RETURNING id
-    )
-    SELECT COUNT(*) INTO expired_count FROM expired_access;
-    
-    -- Log expired access as activities
-    INSERT INTO public.account_activities (
-        actor_id,
-        account_id,
-        activity_type,
-        target_type,
-        target_id,
-        description,
-        metadata
-    )
-    SELECT 
-        NULL, -- System action
-        ata.account_id,
-        'tool_access_modified',
-        'tool',
-        ata.tool_id,
-        'Tool access expired: ' || t.name,
-        jsonb_build_object(
-            'action', 'auto_expire',
-            'previous_status', 'active',
-            'new_status', 'expired',
-            'expires_at', ata.expires_at,
-            'automated', true
-        )
-    FROM public.account_tool_access ata
-    JOIN public.tools t ON ata.tool_id = t.id
-    WHERE ata.status = 'expired' 
-      AND ata.updated_at > NOW() - INTERVAL '1 minute'; -- Recently expired
-    
-    RETURN expired_count;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."expire_tool_access"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."expire_tool_access"() IS 'Automatically expires tool access and logs activity. Returns count of expired records.';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."generate_invitation_token"() RETURNS character varying
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    RETURN encode(gen_random_bytes(32), 'hex');
-END;
-$$;
-
-
-ALTER FUNCTION "public"."generate_invitation_token"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date" DEFAULT NULL::"date", "p_billing_period_end" "date" DEFAULT NULL::"date") RETURNS TABLE("invoice_id" "uuid", "success" boolean, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_invoice_id UUID;
-    v_subscription RECORD;
-    v_plan RECORD;
-    v_invoice_number VARCHAR(50);
-    v_subtotal_cents INTEGER;
-    v_total_cents INTEGER;
-BEGIN
-    -- Get subscription and plan details
-    SELECT s.*, sp.* INTO v_subscription
-    FROM public.subscriptions s
-    JOIN public.subscription_plans sp ON s.plan_id = sp.id
-    WHERE s.id = p_subscription_id;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT NULL::UUID, FALSE, 'Subscription not found';
-        RETURN;
-    END IF;
-    
-    -- Generate invoice number
-    v_invoice_number := 'INV-' || TO_CHAR(NOW(), 'YYYYMMDD') || '-' || SUBSTRING(p_subscription_id::TEXT, 1, 8);
-    
-    -- Calculate amounts
-    v_subtotal_cents := v_subscription.price_cents * v_subscription.quantity;
-    v_total_cents := v_subtotal_cents; -- Add tax calculation here if needed
-    
-    -- Create invoice
-    INSERT INTO public.billing_invoices (
-        account_id,
-        subscription_id,
-        invoice_number,
-        subtotal_cents,
-        total_cents,
-        currency,
-        billing_period_start,
-        billing_period_end,
-        due_date,
-        status
-    ) VALUES (
-        v_subscription.account_id,
-        p_subscription_id,
-        v_invoice_number,
-        v_subtotal_cents,
-        v_total_cents,
-        v_subscription.currency,
-        COALESCE(p_billing_period_start, v_subscription.current_period_start::DATE),
-        COALESCE(p_billing_period_end, v_subscription.current_period_end::DATE),
-        CURRENT_DATE + INTERVAL '30 days',
-        'open'
-    ) RETURNING id INTO v_invoice_id;
-    
-    -- Add line items
-    INSERT INTO public.invoice_line_items (
-        invoice_id,
-        description,
-        quantity,
-        unit_price_cents,
-        total_cents,
-        period_start,
-        period_end
-    ) VALUES (
-        v_invoice_id,
-        v_subscription.plan_name,
-        v_subscription.quantity,
-        v_subscription.price_cents,
-        v_subtotal_cents,
-        COALESCE(p_billing_period_start, v_subscription.current_period_start::DATE),
-        COALESCE(p_billing_period_end, v_subscription.current_period_end::DATE)
-    );
-    
-    -- Log billing event
-    INSERT INTO public.billing_events (
-        account_id,
-        event_type,
-        invoice_id,
-        subscription_id,
-        event_data
-    ) VALUES (
-        v_subscription.account_id,
-        'invoice_created',
-        v_invoice_id,
-        p_subscription_id,
-        jsonb_build_object(
-            'invoice_number', v_invoice_number,
-            'total_cents', v_total_cents,
-            'currency', v_subscription.currency
-        )
-    );
-    
-    RETURN QUERY SELECT v_invoice_id, TRUE, 'Invoice generated successfully';
-END;
-$$;
-
-
-ALTER FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date", "p_billing_period_end" "date") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date", "p_billing_period_end" "date") IS 'Generate invoice for subscription billing period';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying DEFAULT NULL::character varying) RETURNS TABLE("account_id" "uuid", "account_name" character varying, "account_type" character varying, "total_events" bigint, "unique_tools" bigint, "avg_session_duration" numeric, "last_activity" timestamp with time zone, "most_used_tool" character varying)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    WITH account_stats AS (
-        SELECT 
-            tul.account_id,
-            COUNT(*) as total_events,
-            COUNT(DISTINCT tul.tool_id) as unique_tools,
-            AVG(tul.duration_seconds) as avg_session_duration,
-            MAX(tul.created_at) as last_activity
-        FROM public.tool_usage_logs tul
-        WHERE tul.created_at >= p_start_date 
-            AND tul.created_at <= p_end_date
-        GROUP BY tul.account_id
-    ),
-    most_used_tools AS (
-        SELECT DISTINCT ON (tul.account_id)
-            tul.account_id,
-            t.name as most_used_tool
-        FROM public.tool_usage_logs tul
-        JOIN public.tools t ON tul.tool_id = t.id
-        WHERE tul.created_at >= p_start_date 
-            AND tul.created_at <= p_end_date
-        GROUP BY tul.account_id, tul.tool_id, t.name
-        ORDER BY tul.account_id, COUNT(*) DESC
-    )
-    SELECT 
-        a.id as account_id,
-        a.name as account_name,
-        a.type as account_type,
-        COALESCE(ast.total_events, 0) as total_events,
-        COALESCE(ast.unique_tools, 0) as unique_tools,
-        COALESCE(ast.avg_session_duration, 0) as avg_session_duration,
-        ast.last_activity,
-        mut.most_used_tool
-    FROM public.accounts a
-    LEFT JOIN account_stats ast ON a.id = ast.account_id
-    LEFT JOIN most_used_tools mut ON a.id = mut.account_id
-    WHERE (p_account_type IS NULL OR a.type = p_account_type)
-        AND ast.total_events > 0
-    ORDER BY ast.total_events DESC NULLS LAST;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying) IS 'Get detailed analytics for accounts with usage data';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_activity_trends"("p_days" integer DEFAULT 7, "p_granularity" character varying DEFAULT 'daily'::character varying) RETURNS TABLE("time_bucket" timestamp with time zone, "total_activities" integer, "successful_activities" integer, "failed_activities" integer, "unique_profiles" integer, "high_risk_activities" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_interval TEXT;
-    v_trunc_format TEXT;
-BEGIN
-    -- Set time bucket format based on granularity
-    CASE p_granularity
-        WHEN 'hourly' THEN 
-            v_interval := '1 hour';
-            v_trunc_format := 'hour';
-        WHEN 'daily' THEN 
-            v_interval := '1 day';
-            v_trunc_format := 'day';
-        WHEN 'weekly' THEN 
-            v_interval := '1 week';
-            v_trunc_format := 'week';
-        ELSE 
-            v_interval := '1 day';
-            v_trunc_format := 'day';
-    END CASE;
-    
-    RETURN QUERY
-    SELECT 
-        DATE_TRUNC(v_trunc_format, pam.created_at) as time_bucket,
-        COUNT(*)::INTEGER as total_activities,
-        COUNT(*) FILTER (WHERE pam.result_status = 'success')::INTEGER as successful_activities,
-        COUNT(*) FILTER (WHERE pam.result_status IN ('error', 'failed'))::INTEGER as failed_activities,
-        COUNT(DISTINCT pam.profile_id)::INTEGER as unique_profiles,
-        COUNT(*) FILTER (WHERE pam.risk_level = 'high')::INTEGER as high_risk_activities
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at >= NOW() - (p_days || ' days')::INTERVAL
-    GROUP BY DATE_TRUNC(v_trunc_format, pam.created_at)
-    ORDER BY time_bucket;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_activity_trends"("p_days" integer, "p_granularity" character varying) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_activity_trends"("p_days" integer, "p_granularity" character varying) IS 'Get activity trends over time with configurable granularity';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") RETURNS TABLE("affiliate_id" "uuid", "affiliate_name" "text", "affiliate_email" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN QUERY
-  SELECT 
-    c.affiliate_id,
-    p.full_name as affiliate_name,
-    p.email as affiliate_email
-  FROM clients c
-  LEFT JOIN profiles p ON c.affiliate_id = p.id
-  WHERE c.id = get_affiliate_from_client.client_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") IS 'Helper function to get affiliate information from a client ID';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_auth_sync_status_summary"() RETURNS TABLE("total_profiles" integer, "total_auth_users" integer, "synced_profiles" integer, "pending_sync" integer, "conflict_profiles" integer, "error_profiles" integer, "unresolved_conflicts" integer, "last_sync_check" timestamp with time zone, "sync_health_score" numeric)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_total_profiles INTEGER;
-    v_total_auth_users INTEGER;
-    v_synced_profiles INTEGER;
-    v_pending_sync INTEGER;
-    v_conflict_profiles INTEGER;
-    v_error_profiles INTEGER;
-    v_unresolved_conflicts INTEGER;
-    v_last_sync_check TIMESTAMP WITH TIME ZONE;
-    v_sync_health_score NUMERIC;
-BEGIN
-    -- Get profile counts
-    SELECT 
-        COUNT(*)::INTEGER,
-        COUNT(*) FILTER (WHERE auth_sync_status = 'synced')::INTEGER,
-        COUNT(*) FILTER (WHERE auth_sync_status = 'pending')::INTEGER,
-        COUNT(*) FILTER (WHERE auth_sync_status = 'conflict')::INTEGER,
-        COUNT(*) FILTER (WHERE auth_sync_status = 'error')::INTEGER
-    INTO 
-        v_total_profiles,
-        v_synced_profiles,
-        v_pending_sync,
-        v_conflict_profiles,
-        v_error_profiles
-    FROM public.profiles;
-
-    -- Get auth users count
-    SELECT COUNT(*)::INTEGER INTO v_total_auth_users FROM auth.users;
-    
-    -- Get unresolved conflicts
-    SELECT COUNT(*)::INTEGER INTO v_unresolved_conflicts 
-    FROM public.profile_sync_conflicts WHERE resolved_at IS NULL;
-    
-    -- Set timestamp
-    v_last_sync_check := NOW();
-
-    -- Calculate sync health score (0-100)
-    v_sync_health_score := CASE 
-        WHEN v_total_profiles = 0 THEN 100
-        ELSE ROUND(
-            (v_synced_profiles::NUMERIC / v_total_profiles::NUMERIC) * 100 - 
-            (v_conflict_profiles::NUMERIC / v_total_profiles::NUMERIC) * 20 - 
-            (v_error_profiles::NUMERIC / v_total_profiles::NUMERIC) * 30,
-            2
-        )
-    END;
-
-    RETURN QUERY SELECT 
-        v_total_profiles,
-        v_total_auth_users,
-        v_synced_profiles,
-        v_pending_sync,
-        v_conflict_profiles,
-        v_error_profiles,
-        v_unresolved_conflicts,
-        v_last_sync_check,
-        v_sync_health_score;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_auth_sync_status_summary"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_auth_sync_status_summary"() IS 'Get comprehensive auth synchronization status summary with health score';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) RETURNS integer[]
-    LANGUAGE "plpgsql"
-    AS $$
-DECLARE
-  start_from_year INTEGER;
-  years INTEGER[] := ARRAY[]::INTEGER[];
-  year INTEGER;
-BEGIN
-  -- Start from 8 years ago or business start year, whichever is later
-  start_from_year := GREATEST(business_start_year, tax_year - 8);
-  
-  -- Generate array of years from start_from_year to tax_year - 1
-  FOR year IN start_from_year..(tax_year - 1) LOOP
-    years := array_append(years, year);
-  END LOOP;
-  
-  RETURN years;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer DEFAULT 90) RETURNS TABLE("metric_name" character varying, "current_value" numeric, "growth_rate" numeric, "projected_30_days" numeric, "projected_90_days" numeric, "capacity_threshold" numeric, "days_until_threshold" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    WITH growth_data AS (
-        SELECT 
-            'active_users' as metric_name,
-            COUNT(DISTINCT profile_id) as current_value,
-            COUNT(DISTINCT profile_id) FILTER (WHERE created_at >= NOW() - INTERVAL '30 days') as recent_value,
-            COUNT(DISTINCT profile_id) FILTER (WHERE created_at >= NOW() - INTERVAL '90 days') as older_value
-        FROM public.account_activities
-        WHERE created_at >= NOW() - (p_days || ' days')::INTERVAL
-    ),
-    growth_rates AS (
-        SELECT 
-            metric_name,
-            current_value,
-            CASE 
-                WHEN older_value > 0 THEN 
-                    ((recent_value::NUMERIC - older_value::NUMERIC) / older_value::NUMERIC) * 100
-                ELSE 0
-            END as growth_rate
-        FROM growth_data
-    )
-    SELECT 
-        gr.metric_name,
-        gr.current_value,
-        gr.growth_rate,
-        gr.current_value * (1 + gr.growth_rate/100) as projected_30_days,
-        gr.current_value * POWER(1 + gr.growth_rate/100, 3) as projected_90_days,
-        10000::NUMERIC as capacity_threshold, -- Example threshold
-        CASE 
-            WHEN gr.growth_rate > 0 THEN
-                (LOG(10000::NUMERIC / gr.current_value) / LOG(1 + gr.growth_rate/100) * 30)::INTEGER
-            ELSE NULL
-        END as days_until_threshold
-    FROM growth_rates gr;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer) IS 'Get capacity planning projections';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") RETURNS TABLE("total_documents" integer, "total_storage_bytes" bigint, "documents_by_type" "jsonb", "documents_by_year" "jsonb", "recent_uploads" integer, "shared_documents" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        COUNT(*)::INTEGER as total_documents,
-        SUM(file_size)::BIGINT as total_storage_bytes,
-        jsonb_object_agg(document_type, type_count) as documents_by_type,
-        jsonb_object_agg(tax_year, year_count) as documents_by_year,
-        COUNT(CASE WHEN created_at > NOW() - INTERVAL '30 days' THEN 1 END)::INTEGER as recent_uploads,
-        COUNT(CASE WHEN id IN (SELECT document_id FROM document_shares WHERE client_id = p_client_id) THEN 1 END)::INTEGER as shared_documents
-    FROM (
-        SELECT 
-            df.*,
-            COUNT(*) OVER (PARTITION BY document_type) as type_count,
-            COUNT(*) OVER (PARTITION BY tax_year) as year_count
-        FROM document_files df
-        WHERE df.client_id = p_client_id
-        AND df.is_current_version = true
-    ) stats;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") IS 'Returns comprehensive document statistics for clients';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_client_info"("client_id" "uuid") RETURNS TABLE("id" "uuid", "full_name" "text", "email" "text", "phone" "text", "affiliate_id" "uuid", "affiliate_name" "text", "affiliate_email" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN QUERY
-  SELECT 
-    c.id,
-    c.full_name,
-    c.email,
-    c.phone,
-    c.affiliate_id,
-    p.full_name as affiliate_name,
-    p.email as affiliate_email
-  FROM clients c
-  LEFT JOIN profiles p ON c.affiliate_id = p.id
-  WHERE c.id = get_client_info.client_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_client_info"("client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_client_info"("client_id" "uuid") IS 'Helper function to get complete client information including affiliate details';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("tool_slug" "text", "tool_name" "text", "status" "text", "enrolled_at" timestamp with time zone)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        te.tool_slug,
-        CASE te.tool_slug
-            WHEN 'rd' THEN 'R&D Tax Calculator'
-            WHEN 'augusta' THEN 'Augusta Rule Estimator'
-            WHEN 'hire_children' THEN 'Hire Children Calculator'
-            WHEN 'cost_segregation' THEN 'Cost Segregation Calculator'
-            WHEN 'convertible_bonds' THEN 'Convertible Tax Bonds Calculator'
-            WHEN 'tax_planning' THEN 'Tax Planning'
-            ELSE te.tool_slug
-        END AS tool_name,
-        te.status,
-        te.enrolled_at
-    FROM public.tool_enrollments te
-    WHERE te.client_file_id = p_client_file_id
-    AND (p_business_id IS NULL OR te.business_id = p_business_id)
-    ORDER BY te.enrolled_at DESC;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") RETURNS json
-    LANGUAGE "plpgsql"
-    AS $$
-DECLARE
-    result JSON;
-BEGIN
-    SELECT json_build_object(
-        'client', c,
-        'personal_years', COALESCE(py_data, '[]'::json),
-        'businesses', COALESCE(b_data, '[]'::json)
-    ) INTO result
-    FROM clients c
-    LEFT JOIN (
-        SELECT 
-            client_id,
-            json_agg(py.*) as py_data
-        FROM personal_years py
-        WHERE py.client_id = client_uuid
-        GROUP BY client_id
-    ) py ON c.id = py.client_id
-    LEFT JOIN (
-        SELECT 
-            b.client_id,
-            json_agg(
-                json_build_object(
-                    'business', b,
-                    'business_years', COALESCE(by_data, '[]'::json)
-                )
-            ) as b_data
-        FROM businesses b
-        LEFT JOIN (
-            SELECT 
-                business_id,
-                json_agg(by.*) as by_data
-            FROM business_years by
-            WHERE by.business_id IN (SELECT id FROM businesses WHERE client_id = client_uuid)
-            GROUP BY business_id
-        ) by ON b.id = by.business_id
-        WHERE b.client_id = client_uuid
-        GROUP BY b.client_id
-    ) b ON c.id = b.client_id
-    WHERE c.id = client_uuid;
-    
-    RETURN result;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying DEFAULT NULL::character varying, "p_days" integer DEFAULT 30) RETURNS TABLE("feature_name" character varying, "feature_category" character varying, "total_users" integer, "total_usage_count" bigint, "avg_usage_per_user" numeric, "adoption_rate" numeric, "first_adoption" "date", "last_adoption" "date")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_total_active_users INTEGER;
-BEGIN
-    -- Get total active users in period
-    SELECT COUNT(DISTINCT profile_id) INTO v_total_active_users
-    FROM public.account_activities
-    WHERE created_at >= CURRENT_DATE - (p_days || ' days')::INTERVAL;
-    
-    RETURN QUERY
-    SELECT 
-        fut.feature_name,
-        fut.feature_category,
-        COUNT(DISTINCT fut.profile_id)::INTEGER as total_users,
-        SUM(fut.usage_count)::BIGINT as total_usage_count,
-        AVG(fut.usage_count)::NUMERIC as avg_usage_per_user,
-        CASE 
-            WHEN v_total_active_users > 0 THEN
-                (COUNT(DISTINCT fut.profile_id)::NUMERIC / v_total_active_users::NUMERIC) * 100
-            ELSE 0
-        END as adoption_rate,
-        MIN(fut.first_used_at::DATE) as first_adoption,
-        MAX(fut.last_used_at::DATE) as last_adoption
-    FROM public.feature_usage_tracking fut
-    WHERE (p_feature_category IS NULL OR fut.feature_category = p_feature_category)
-      AND fut.last_used_at >= CURRENT_DATE - (p_days || ' days')::INTERVAL
-    GROUP BY fut.feature_name, fut.feature_category
-    ORDER BY total_users DESC, total_usage_count DESC;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying, "p_days" integer) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying, "p_days" integer) IS 'Get feature adoption statistics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer DEFAULT 30, "p_account_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("metric_date" "date", "metric_name" character varying, "metric_value" numeric, "dimensions" "jsonb", "trend_direction" character varying, "percentage_change" numeric)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    WITH daily_metrics AS (
-        SELECT 
-            pum.metric_date,
-            pum.metric_name,
-            pum.metric_value,
-            pum.dimensions,
-            LAG(pum.metric_value) OVER (
-                PARTITION BY pum.metric_name 
-                ORDER BY pum.metric_date
-            ) as previous_value
-        FROM public.platform_usage_metrics pum
-        WHERE pum.metric_type = p_metric_type
-          AND pum.metric_date >= CURRENT_DATE - (p_days || ' days')::INTERVAL
-          AND (p_account_id IS NULL OR pum.account_id = p_account_id)
-    )
-    SELECT 
-        dm.metric_date,
-        dm.metric_name,
-        dm.metric_value,
-        dm.dimensions,
-        CASE 
-            WHEN dm.previous_value IS NULL THEN 'new'
-            WHEN dm.metric_value > dm.previous_value THEN 'up'
-            WHEN dm.metric_value < dm.previous_value THEN 'down'
-            ELSE 'stable'
-        END as trend_direction,
-        CASE 
-            WHEN dm.previous_value IS NOT NULL AND dm.previous_value > 0 THEN
-                ((dm.metric_value - dm.previous_value) / dm.previous_value) * 100
-            ELSE NULL
-        END as percentage_change
-    FROM daily_metrics dm
-    ORDER BY dm.metric_date DESC, dm.metric_name;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer, "p_account_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer, "p_account_id" "uuid") IS 'Get platform usage trends with percentage changes';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone DEFAULT ("now"() - '30 days'::interval), "p_end_date" timestamp with time zone DEFAULT "now"(), "p_profile_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("total_activities" integer, "successful_activities" integer, "failed_activities" integer, "success_rate" numeric, "unique_profiles" integer, "activity_types" "jsonb", "activity_categories" "jsonb", "risk_distribution" "jsonb", "peak_activity_hour" integer, "most_active_profile" "jsonb")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_total_activities INTEGER;
-    v_successful_activities INTEGER;
-    v_failed_activities INTEGER;
-    v_unique_profiles INTEGER;
-    v_activity_types JSONB;
-    v_activity_categories JSONB;
-    v_risk_distribution JSONB;
-    v_peak_hour INTEGER;
-    v_most_active JSONB;
-BEGIN
-    -- Base activity counts
-    SELECT 
-        COUNT(*),
-        COUNT(*) FILTER (WHERE success = TRUE),
-        COUNT(*) FILTER (WHERE success = FALSE),
-        COUNT(DISTINCT profile_id)
-    INTO v_total_activities, v_successful_activities, v_failed_activities, v_unique_profiles
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-      AND (p_profile_id IS NULL OR pam.profile_id = p_profile_id);
-    
-    -- Activity type distribution
-    SELECT jsonb_object_agg(activity_type, activity_count)
-    INTO v_activity_types
-    FROM (
-        SELECT activity_type, COUNT(*) as activity_count
-        FROM profile_activity_monitoring pam
-        WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-          AND (p_profile_id IS NULL OR pam.profile_id = p_profile_id)
-        GROUP BY activity_type
-        ORDER BY activity_count DESC
-        LIMIT 10
-    ) activity_types;
-    
-    -- Activity category distribution
-    SELECT jsonb_object_agg(activity_category, category_count)
-    INTO v_activity_categories
-    FROM (
-        SELECT activity_category, COUNT(*) as category_count
-        FROM profile_activity_monitoring pam
-        WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-          AND (p_profile_id IS NULL OR pam.profile_id = p_profile_id)
-        GROUP BY activity_category
-    ) categories;
-    
-    -- Risk level distribution
-    SELECT jsonb_object_agg(risk_level, risk_count)
-    INTO v_risk_distribution
-    FROM (
-        SELECT risk_level, COUNT(*) as risk_count
-        FROM profile_activity_monitoring pam
-        WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-          AND (p_profile_id IS NULL OR pam.profile_id = p_profile_id)
-        GROUP BY risk_level
-    ) risks;
-    
-    -- Peak activity hour
-    SELECT EXTRACT(HOUR FROM created_at)::INTEGER
-    INTO v_peak_hour
-    FROM profile_activity_monitoring pam
-    WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-      AND (p_profile_id IS NULL OR pam.profile_id = p_profile_id)
-    GROUP BY EXTRACT(HOUR FROM created_at)
-    ORDER BY COUNT(*) DESC
-    LIMIT 1;
-    
-    -- Most active profile (if not filtering by specific profile)
-    IF p_profile_id IS NULL THEN
-        SELECT jsonb_build_object(
-            'profile_id', profile_id,
-            'profile_name', profile_name,
-            'profile_email', profile_email,
-            'activity_count', activity_count
-        )
-        INTO v_most_active
-        FROM (
-            SELECT 
-                profile_id, 
-                profile_name, 
-                profile_email, 
-                COUNT(*) as activity_count
-            FROM profile_activity_monitoring pam
-            WHERE pam.created_at BETWEEN p_start_date AND p_end_date
-              AND profile_id IS NOT NULL
-            GROUP BY profile_id, profile_name, profile_email
-            ORDER BY activity_count DESC
-            LIMIT 1
-        ) most_active;
-    END IF;
-    
-    RETURN QUERY SELECT 
-        v_total_activities as total_activities,
-        v_successful_activities as successful_activities,
-        v_failed_activities as failed_activities,
-        CASE 
-            WHEN v_total_activities > 0 THEN ROUND((v_successful_activities::NUMERIC / v_total_activities::NUMERIC) * 100, 2)
-            ELSE 0
-        END as success_rate,
-        v_unique_profiles as unique_profiles,
-        COALESCE(v_activity_types, '{}'::JSONB) as activity_types,
-        COALESCE(v_activity_categories, '{}'::JSONB) as activity_categories,
-        COALESCE(v_risk_distribution, '{}'::JSONB) as risk_distribution,
-        v_peak_hour as peak_activity_hour,
-        COALESCE(v_most_active, '{}'::JSONB) as most_active_profile;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_profile_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_profile_id" "uuid") IS 'Get comprehensive activity analytics for profile management operations';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer DEFAULT 50, "p_offset" integer DEFAULT 0) RETURNS TABLE("id" "uuid", "activity_type" character varying, "activity_category" character varying, "target_type" character varying, "target_id" "uuid", "description" "text", "result_status" character varying, "risk_level" character varying, "duration_ms" integer, "ip_address" "inet", "user_agent" "text", "session_id" character varying, "metadata" "jsonb", "created_at" timestamp with time zone, "time_ago" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        pam.id,
-        pam.activity_type,
-        pam.activity_category,
-        pam.target_type,
-        pam.target_id,
-        pam.description,
-        pam.result_status,
-        pam.risk_level,
-        pam.duration_ms,
-        pam.ip_address,
-        pam.user_agent,
-        pam.session_id,
-        pam.metadata,
-        pam.created_at,
-        CASE 
-            WHEN pam.created_at >= NOW() - INTERVAL '1 minute' THEN 'just now'
-            WHEN pam.created_at >= NOW() - INTERVAL '1 hour' THEN EXTRACT(MINUTE FROM NOW() - pam.created_at)::TEXT || ' minutes ago'
-            WHEN pam.created_at >= NOW() - INTERVAL '1 day' THEN EXTRACT(HOUR FROM NOW() - pam.created_at)::TEXT || ' hours ago'
-            WHEN pam.created_at >= NOW() - INTERVAL '7 days' THEN EXTRACT(DAY FROM NOW() - pam.created_at)::TEXT || ' days ago'
-            ELSE TO_CHAR(pam.created_at, 'YYYY-MM-DD')
-        END as time_ago
-    FROM profile_activity_monitoring pam
-    WHERE pam.profile_id = p_profile_id
-    ORDER BY pam.created_at DESC
-    LIMIT p_limit OFFSET p_offset;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer, "p_offset" integer) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer, "p_offset" integer) IS 'Get paginated activity timeline for a specific profile';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") RETURNS TABLE("permission_source" character varying, "permission_name" character varying, "resource_type" character varying, "resource_id" "uuid", "action" character varying, "scope" character varying, "expires_at" timestamp with time zone, "conditions" "jsonb")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    -- Return direct permissions
-    RETURN QUERY
-    SELECT 
-        'direct'::VARCHAR as permission_source,
-        pp.permission_name,
-        pp.resource_type,
-        pp.resource_id,
-        pp.action,
-        'explicit'::VARCHAR as scope,
-        pp.expires_at,
-        pp.conditions
-    FROM public.profile_permissions pp
-    WHERE pp.profile_id = p_profile_id
-      AND pp.is_active = true
-      AND (pp.expires_at IS NULL OR pp.expires_at > NOW());
-    
-    -- Return role-based permissions (simplified mapping)
-    RETURN QUERY
-    SELECT 
-        'role'::VARCHAR as permission_source,
-        'role_' || pr.role_name as permission_name,
-        'all'::VARCHAR as resource_type,
-        NULL::UUID as resource_id,
-        CASE 
-            WHEN pr.role_name = 'super_admin' THEN 'manage'
-            WHEN pr.role_name = 'admin' THEN 'manage'
-            WHEN pr.role_name = 'affiliate_manager' THEN 'read'
-            ELSE 'read'
-        END as action,
-        pr.scope,
-        pr.expires_at,
-        pr.metadata as conditions
-    FROM public.profile_roles pr
-    WHERE pr.profile_id = p_profile_id
-      AND pr.is_active = true
-      AND (pr.expires_at IS NULL OR pr.expires_at > NOW());
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") IS 'Get all effective permissions for a profile from roles and direct grants';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") RETURNS TABLE("id" "uuid", "full_name" "text", "email" "text", "role" "public"."user_role", "status" character varying, "account_name" "text", "account_type" "public"."account_type", "last_login_at" timestamp with time zone, "login_count" integer, "is_verified" boolean, "auth_sync_status" character varying, "days_since_last_login" integer, "total_activities" integer, "unresolved_sync_conflicts" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        p.id,
-        p.full_name,
-        p.email,
-        p.role,
-        p.status,
-        a.name as account_name,
-        a.type as account_type,
-        p.last_login_at,
-        p.login_count,
-        p.is_verified,
-        p.auth_sync_status,
-        CASE 
-            WHEN p.last_login_at IS NULL THEN NULL
-            ELSE EXTRACT(DAY FROM NOW() - p.last_login_at)::INTEGER
-        END as days_since_last_login,
-        (SELECT COUNT(*) FROM public.account_activities aa 
-         WHERE aa.metadata->>'profile_id' = p.id::text)::INTEGER as total_activities,
-        (SELECT COUNT(*) FROM public.profile_sync_conflicts psc 
-         WHERE psc.profile_id = p.id AND psc.resolved_at IS NULL)::INTEGER as unresolved_sync_conflicts
-    FROM public.profiles p
-    LEFT JOIN public.accounts a ON p.account_id = a.id
-    WHERE p.id = p_profile_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") IS 'Returns comprehensive profile summary with computed fields';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_sync_conflicts_summary"() RETURNS TABLE("total_conflicts" integer, "unresolved_conflicts" integer, "email_mismatches" integer, "missing_auth_users" integer, "missing_profiles" integer, "metadata_inconsistencies" integer, "oldest_unresolved_conflict" timestamp with time zone, "recent_resolutions" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        COUNT(*)::INTEGER as total_conflicts,
-        COUNT(*) FILTER (WHERE resolved_at IS NULL)::INTEGER as unresolved_conflicts,
-        COUNT(*) FILTER (WHERE conflict_type = 'email_mismatch' AND resolved_at IS NULL)::INTEGER as email_mismatches,
-        COUNT(*) FILTER (WHERE conflict_type = 'auth_missing' AND resolved_at IS NULL)::INTEGER as missing_auth_users,
-        COUNT(*) FILTER (WHERE conflict_type = 'profile_missing' AND resolved_at IS NULL)::INTEGER as missing_profiles,
-        COUNT(*) FILTER (WHERE conflict_type = 'metadata_inconsistency' AND resolved_at IS NULL)::INTEGER as metadata_inconsistencies,
-        MIN(created_at) FILTER (WHERE resolved_at IS NULL) as oldest_unresolved_conflict,
-        COUNT(*) FILTER (WHERE resolved_at >= NOW() - INTERVAL '24 hours')::INTEGER as recent_resolutions
-    FROM public.profile_sync_conflicts;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_sync_conflicts_summary"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_sync_conflicts_summary"() IS 'Get summary of sync conflicts by type and status';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_tax_proposal_affiliate"("proposal_id" "uuid") RETURNS TABLE("affiliate_id" "uuid", "affiliate_name" "text", "affiliate_email" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN QUERY
-  SELECT 
-    c.affiliate_id,
-    p.full_name,
-    p.email
-  FROM tax_proposals tp
-  JOIN clients c ON tp.client_id = c.id
-  LEFT JOIN profiles p ON c.affiliate_id = p.id
-  WHERE tp.id = proposal_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_tax_proposal_affiliate"("proposal_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying DEFAULT NULL::character varying) RETURNS TABLE("tool_id" "uuid", "tool_name" character varying, "category" character varying, "total_events" bigint, "unique_accounts" bigint, "avg_duration" numeric, "success_rate" numeric, "growth_rate" numeric)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    WITH current_period AS (
-        SELECT 
-            tul.tool_id,
-            COUNT(*) as current_events,
-            COUNT(DISTINCT tul.account_id) as unique_accounts,
-            AVG(tul.duration_seconds) as avg_duration,
-            (COUNT(*) FILTER (WHERE tul.success = true)::NUMERIC / NULLIF(COUNT(*), 0) * 100) as success_rate
-        FROM public.tool_usage_logs tul
-        WHERE tul.created_at >= p_start_date 
-            AND tul.created_at <= p_end_date
-        GROUP BY tul.tool_id
-    ),
-    previous_period AS (
-        SELECT 
-            tul.tool_id,
-            COUNT(*) as previous_events
-        FROM public.tool_usage_logs tul
-        WHERE tul.created_at >= (p_start_date - (p_end_date - p_start_date))
-            AND tul.created_at < p_start_date
-        GROUP BY tul.tool_id
-    )
-    SELECT 
-        t.id as tool_id,
-        t.name as tool_name,
-        t.category,
-        COALESCE(cp.current_events, 0) as total_events,
-        COALESCE(cp.unique_accounts, 0) as unique_accounts,
-        COALESCE(cp.avg_duration, 0) as avg_duration,
-        COALESCE(cp.success_rate, 100) as success_rate,
-        CASE 
-            WHEN pp.previous_events > 0 THEN 
-                ((cp.current_events::NUMERIC - pp.previous_events::NUMERIC) / pp.previous_events::NUMERIC * 100)
-            ELSE 0
-        END as growth_rate
-    FROM public.tools t
-    LEFT JOIN current_period cp ON t.id = cp.tool_id
-    LEFT JOIN previous_period pp ON t.id = pp.tool_id
-    WHERE (p_tool_category IS NULL OR t.category = p_tool_category)
-        AND cp.current_events > 0
-    ORDER BY cp.current_events DESC NULLS LAST;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying) IS 'Get detailed analytics for tools with growth rate comparison';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid" DEFAULT NULL::"uuid", "p_tool_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("total_events" bigint, "unique_accounts" bigint, "unique_users" bigint, "avg_session_duration" numeric, "success_rate" numeric, "data_volume_mb" numeric)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        COUNT(*) as total_events,
-        COUNT(DISTINCT tul.account_id) as unique_accounts,
-        COUNT(DISTINCT tul.profile_id) as unique_users,
-        COALESCE(AVG(tul.duration_seconds), 0) as avg_session_duration,
-        COALESCE(
-            (COUNT(*) FILTER (WHERE tul.success = true)::NUMERIC / NULLIF(COUNT(*), 0) * 100), 
-            100
-        ) as success_rate,
-        COALESCE(SUM(tul.data_volume_mb), 0) as data_volume_mb
-    FROM public.tool_usage_logs tul
-    WHERE tul.created_at >= p_start_date 
-        AND tul.created_at <= p_end_date
-        AND (p_account_id IS NULL OR tul.account_id = p_account_id)
-        AND (p_tool_id IS NULL OR tul.tool_id = p_tool_id);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid") IS 'Get comprehensive usage metrics for specified time period and optional filters';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text" DEFAULT NULL::"text", "p_admin_id" "uuid" DEFAULT NULL::"uuid", "p_affiliate_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("client_file_id" "uuid", "business_id" "uuid", "admin_id" "uuid", "affiliate_id" "uuid", "archived" boolean, "created_at" timestamp with time zone, "full_name" "text", "email" "text", "business_name" "text", "entity_type" "text", "tool_slug" "text", "tool_status" "text", "total_income" numeric, "filing_status" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT DISTINCT
-        acf.id AS client_file_id,
-        acf.business_id,
-        acf.admin_id,
-        acf.affiliate_id,
-        acf.archived,
-        acf.created_at,
-        acf.full_name,
-        acf.email,
-        cb.business_name,
-        cb.entity_type,
-        te.tool_slug,
-        te.status AS tool_status,
-        COALESCE(
-            (SELECT (wages_income + passive_income + unearned_income + capital_gains) 
-             FROM personal_years py 
-             WHERE py.client_id = acf.id 
-             ORDER BY py.year DESC 
-             LIMIT 1),
-            (acf.wages_income + acf.passive_income + acf.unearned_income + acf.capital_gains)
-        ) AS total_income,
-        acf.filing_status
-    FROM public.admin_client_files acf
-    LEFT JOIN public.centralized_businesses cb ON acf.business_id = cb.id
-    LEFT JOIN public.tool_enrollments te ON te.business_id = cb.id
-    WHERE acf.archived IS NOT TRUE
-    AND (p_tool_filter IS NULL OR te.tool_slug = p_tool_filter)
-    AND (p_admin_id IS NULL OR acf.admin_id = p_admin_id)
-    AND (p_affiliate_id IS NULL OR acf.affiliate_id = p_affiliate_id)
-    ORDER BY acf.created_at DESC;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid" DEFAULT NULL::"uuid", "p_tool_id" "uuid" DEFAULT NULL::"uuid", "p_format" character varying DEFAULT 'csv'::character varying) RETURNS TABLE("event_date" timestamp with time zone, "account_name" character varying, "account_type" character varying, "tool_name" character varying, "tool_category" character varying, "action" character varying, "feature_used" character varying, "duration_seconds" integer, "data_volume_mb" numeric, "success" boolean, "error_code" character varying, "session_id" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        tul.created_at as event_date,
-        a.name as account_name,
-        a.type as account_type,
-        t.name as tool_name,
-        t.category as tool_category,
-        tul.action,
-        tul.feature_used,
-        tul.duration_seconds,
-        tul.data_volume_mb,
-        tul.success,
-        tul.error_code,
-        tul.session_id
-    FROM public.tool_usage_logs tul
-    JOIN public.accounts a ON tul.account_id = a.id
-    JOIN public.tools t ON tul.tool_id = t.id
-    WHERE tul.created_at >= p_start_date 
-        AND tul.created_at <= p_end_date
-        AND (p_account_id IS NULL OR tul.account_id = p_account_id)
-        AND (p_tool_id IS NULL OR tul.tool_id = p_tool_id)
-    ORDER BY tul.created_at DESC
-    LIMIT 10000; -- Limit to prevent excessive data export
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid", "p_format" character varying) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid", "p_format" character varying) IS 'Get comprehensive usage data for export in various formats';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying DEFAULT 'day'::character varying) RETURNS TABLE("date" timestamp with time zone, "total_events" bigint, "unique_accounts" bigint, "avg_duration" numeric, "success_rate" numeric)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    trunc_format TEXT;
-BEGIN
-    -- Set truncation format based on interval
-    CASE p_interval
-        WHEN 'hour' THEN trunc_format := 'hour';
-        WHEN 'day' THEN trunc_format := 'day';
-        WHEN 'week' THEN trunc_format := 'week';
-        WHEN 'month' THEN trunc_format := 'month';
-        ELSE trunc_format := 'day';
-    END CASE;
-
-    RETURN QUERY
-    SELECT 
-        date_trunc(trunc_format, tul.created_at) as date,
-        COUNT(*) as total_events,
-        COUNT(DISTINCT tul.account_id) as unique_accounts,
-        COALESCE(AVG(tul.duration_seconds), 0) as avg_duration,
-        COALESCE(
-            (COUNT(*) FILTER (WHERE tul.success = true)::NUMERIC / NULLIF(COUNT(*), 0) * 100), 
-            100
-        ) as success_rate
-    FROM public.tool_usage_logs tul
-    WHERE tul.created_at >= p_start_date 
-        AND tul.created_at <= p_end_date
-    GROUP BY date_trunc(trunc_format, tul.created_at)
-    ORDER BY date;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying) IS 'Get usage trends aggregated by specified time interval';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."get_user_account_id"("user_id" "uuid") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN (SELECT account_id FROM public.profiles WHERE id = user_id);
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_user_account_id"("user_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") RETURNS "public"."client_role"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    user_role client_role;
-BEGIN
-    SELECT role INTO user_role
-    FROM client_users
-    WHERE user_id = check_user_id
-    AND client_id = check_client_id
-    AND is_active = true;
-    
-    RETURN user_role;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") IS 'Get user role for a specific client';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid" DEFAULT NULL::"uuid", "p_expires_at" timestamp with time zone DEFAULT NULL::timestamp with time zone, "p_conditions" "jsonb" DEFAULT '{}'::"jsonb") RETURNS TABLE("success" boolean, "permission_id" "uuid", "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_permission_id UUID;
-    v_granted_by UUID;
-    existing_permission_id UUID;
-BEGIN
-    -- Get current user
-    v_granted_by := auth.uid();
-    
-    -- Check if permission already exists
-    SELECT id INTO existing_permission_id 
-    FROM public.profile_permissions 
-    WHERE profile_id = p_profile_id 
-      AND permission_name = p_permission_name
-      AND resource_type = p_resource_type 
-      AND action = p_action
-      AND COALESCE(resource_id::text, '') = COALESCE(p_resource_id::text, '')
-      AND is_active = true;
-    
-    IF existing_permission_id IS NOT NULL THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            existing_permission_id as permission_id,
-            'Permission already granted to this profile'::TEXT as message;
-        RETURN;
-    END IF;
-    
-    -- Insert new permission
-    INSERT INTO public.profile_permissions (
-        profile_id, permission_name, resource_type, action, resource_id, 
-        granted_by, expires_at, conditions
-    ) VALUES (
-        p_profile_id, p_permission_name, p_resource_type, p_action, p_resource_id,
-        v_granted_by, p_expires_at, p_conditions
-    ) RETURNING id INTO v_permission_id;
-    
-    -- Log the permission grant
-    PERFORM log_profile_activity(
-        p_profile_id,
-        'permission_granted',
-        'permission',
-        v_permission_id,
-        'Permission granted: ' || p_permission_name || ' on ' || p_resource_type,
-        jsonb_build_object(
-            'permission_name', p_permission_name,
-            'resource_type', p_resource_type,
-            'resource_id', p_resource_id,
-            'action', p_action,
-            'expires_at', p_expires_at,
-            'conditions', p_conditions,
-            'granted_by', v_granted_by
-        )
-    );
-    
-    RETURN QUERY SELECT 
-        TRUE as success,
-        v_permission_id as permission_id,
-        'Permission successfully granted'::TEXT as message;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid", "p_expires_at" timestamp with time zone, "p_conditions" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid", "p_expires_at" timestamp with time zone, "p_conditions" "jsonb") IS 'Grant a specific permission to a profile';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_account_id UUID;
-    v_account_name TEXT;
-    v_full_name TEXT;
-    v_account_type account_type;
-    v_business_name TEXT;
-BEGIN
-    -- Extract data from user metadata
-    v_full_name := COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1));
-    v_account_type := COALESCE(NEW.raw_user_meta_data->>'account_type', 'client')::account_type;
-    v_business_name := NEW.raw_user_meta_data->'business_info'->>'businessName';
-    
-    -- Use businessName if available, otherwise fallback to full_name or email prefix
-    v_account_name := COALESCE(
-        NULLIF(v_business_name, ''),
-        v_full_name,
-        split_part(NEW.email, '@', 1)
-    );
-    
-    -- Create account with the specified type
-    INSERT INTO accounts (name, type)
-    VALUES (v_account_name, v_account_type)
-    RETURNING id INTO v_account_id;
-    
-    -- Create profile linked to the new account with admin role (first profile gets admin)
-    INSERT INTO profiles (id, email, full_name, role, account_id)
-    VALUES (
-        NEW.id, 
-        NEW.email, 
-        v_full_name,
-        'admin',
-        v_account_id
-    );
-    
-    -- Create corresponding affiliate or client record
-    IF v_account_type = 'affiliate' THEN
-        -- Insert into affiliates table with minimal required fields
-        INSERT INTO affiliates (account_id)
-        VALUES (v_account_id);
-    ELSE
-        -- Insert into clients table with required fields only
-        INSERT INTO clients (full_name, email, account_id, user_id, created_by)
-        VALUES (v_full_name, NEW.email, v_account_id, NEW.id, NEW.id);
-    END IF;
-    
-    RETURN NEW;
-EXCEPTION
-    WHEN OTHERS THEN
-        -- Log the error and re-raise it
-        RAISE EXCEPTION 'Error in handle_new_user for user % (type: %): %', NEW.email, v_account_type, SQLERRM;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."handle_new_user"() IS 'Creates account, profile, and affiliate/client records when a new user is registered. First profile gets admin role.';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."handle_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-  NEW.updated_at = now();
-  RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."handle_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."is_admin"() RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN EXISTS (
-    SELECT 1 FROM public.profiles
-    WHERE id = auth.uid() AND role = 'admin'
-  );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."is_admin"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."is_affiliated_with_client"("client_id_to_check" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN EXISTS (
-    SELECT 1 FROM public.clients
-    WHERE id = client_id_to_check AND affiliate_id = auth.uid()
-  );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."is_affiliated_with_client"("client_id_to_check" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."is_security_admin"() RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN EXISTS (
-        SELECT 1 FROM profiles p
-        JOIN accounts a ON p.account_id = a.id
-        WHERE p.id = auth.uid() 
-        AND a.type = 'admin'
-        AND p.admin_role IN ('super_admin', 'admin')
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."is_security_admin"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."is_super_admin"() RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN EXISTS (
-        SELECT 1 FROM profiles p
-        JOIN accounts a ON p.account_id = a.id
-        WHERE p.id = auth.uid() 
-        AND a.type = 'admin'
-        AND p.admin_role = 'super_admin'
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."is_super_admin"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    activity_id UUID;
-    current_user_agent TEXT;
-    current_ip_address INET;
-    current_session_id TEXT;
-BEGIN
-    -- Safely extract request context
-    BEGIN
-        current_user_agent := current_setting('request.headers', true)::json->>'user-agent';
-    EXCEPTION WHEN OTHERS THEN
-        current_user_agent := NULL;
-    END;
-    
-    BEGIN
-        current_ip_address := inet_client_addr();
-    EXCEPTION WHEN OTHERS THEN
-        current_ip_address := NULL;
-    END;
-    
-    BEGIN
-        current_session_id := current_setting('app.current_session_id', true);
-    EXCEPTION WHEN OTHERS THEN
-        current_session_id := NULL;
-    END;
-
-    -- Insert activity record
-    INSERT INTO public.account_activities (
-        actor_id,
-        account_id,
-        activity_type,
-        target_type,
-        target_id,
-        description,
-        metadata,
-        ip_address,
-        user_agent,
-        session_id
-    ) VALUES (
-        auth.uid(),
-        p_account_id,
-        p_activity_type,
-        p_target_type,
-        p_target_id,
-        p_description,
-        p_metadata,
-        current_ip_address,
-        current_user_agent,
-        current_session_id
-    ) RETURNING id INTO activity_id;
-    
-    RETURN activity_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") IS 'Logs account activity with full context including IP, user agent, and session info';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid" DEFAULT "auth"."uid"(), "additional_info" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    INSERT INTO audit_logs (
-        table_name,
-        action,
-        record_id,
-        user_id,
-        metadata,
-        created_at
-    ) VALUES (
-        'client_access',
-        action_type,
-        client_id,
-        user_id,
-        additional_info || jsonb_build_object(
-            'client_id', client_id,
-            'access_timestamp', NOW()
-        ),
-        NOW()
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid", "additional_info" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid", "additional_info" "jsonb") IS 'Log client access events for audit trail';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text" DEFAULT NULL::"text", "p_priority" "public"."activity_priority" DEFAULT 'medium'::"public"."activity_priority", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    activity_id UUID;
-BEGIN
-    -- Insert the activity
-    INSERT INTO client_activities (
-        client_id, user_id, activity_type, title, description, priority, metadata
-    ) VALUES (
-        p_client_id, p_user_id, p_activity_type, p_title, p_description, p_priority, p_metadata
-    ) RETURNING id INTO activity_id;
-    
-    -- Update engagement status
-    INSERT INTO client_engagement_status (client_id, last_activity_at, total_activities)
-    VALUES (p_client_id, NOW(), 1)
-    ON CONFLICT (client_id) DO UPDATE SET
-        last_activity_at = NOW(),
-        total_activities = client_engagement_status.total_activities + 1,
-        updated_at = NOW();
-    
-    -- Update last login if it's a login activity
-    IF p_activity_type = 'login' THEN
-        UPDATE client_engagement_status 
-        SET last_login_at = NOW(), updated_at = NOW()
-        WHERE client_id = p_client_id;
-    END IF;
-    
-    RETURN activity_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text", "p_priority" "public"."activity_priority", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text", "p_priority" "public"."activity_priority", "p_metadata" "jsonb") IS 'Logs a client activity and updates engagement status';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."log_document_access"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    IF TG_OP = 'UPDATE' AND NEW.last_accessed_at IS NOT NULL AND OLD.last_accessed_at IS DISTINCT FROM NEW.last_accessed_at THEN
-        INSERT INTO document_access_logs (document_id, client_id, user_id, action, created_at)
-        VALUES (NEW.id, NEW.client_id, NEW.uploaded_by, 'view', NOW());
-        
-        UPDATE document_files 
-        SET access_count = access_count + 1
-        WHERE id = NEW.id;
-    END IF;
-    
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_document_access"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    activity_id UUID;
-    profile_account_id UUID;
-BEGIN
-    -- Get the account_id for the profile
-    SELECT account_id INTO profile_account_id 
-    FROM public.profiles 
-    WHERE id = p_profile_id;
-    
-    -- Use existing log_account_activity function but for profile context
-    SELECT log_account_activity(
-        profile_account_id,  -- account_id (required by existing function)
-        p_activity_type,     -- activity_type
-        p_target_type,       -- target_type  
-        p_target_id,         -- target_id
-        p_description,       -- description
-        p_metadata || jsonb_build_object(
-            'profile_id', p_profile_id,
-            'activity_context', 'profile_management'
-        )                    -- enhanced metadata with profile context
-    ) INTO activity_id;
-    
-    RETURN activity_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") IS 'Logs profile activity using existing account_activities table with profile context';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid" DEFAULT NULL::"uuid", "event_data" "jsonb" DEFAULT '{}'::"jsonb", "severity" "text" DEFAULT 'LOW'::"text") RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    INSERT INTO security_events (
-        event_type,
-        user_id,
-        client_id,
-        event_data,
-        severity,
-        created_at
-    ) VALUES (
-        event_type,
-        auth.uid(),
-        client_id,
-        event_data,
-        severity,
-        NOW()
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid", "event_data" "jsonb", "severity" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid", "event_data" "jsonb", "severity" "text") IS 'Log security events for audit trail';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying DEFAULT NULL::character varying, "p_duration_seconds" integer DEFAULT NULL::integer, "p_data_volume_mb" numeric DEFAULT NULL::numeric, "p_success" boolean DEFAULT true, "p_error_code" character varying DEFAULT NULL::character varying, "p_error_message" "text" DEFAULT NULL::"text", "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    usage_log_id UUID;
-    current_session_id TEXT;
-    current_user_agent TEXT;
-    current_ip_address INET;
-BEGIN
-    -- Safely extract request context
-    BEGIN
-        current_session_id := current_setting('app.current_session_id', true);
-    EXCEPTION WHEN OTHERS THEN
-        current_session_id := NULL;
-    END;
-    
-    BEGIN
-        current_user_agent := current_setting('request.headers', true)::json->>'user-agent';
-    EXCEPTION WHEN OTHERS THEN
-        current_user_agent := NULL;
-    END;
-    
-    BEGIN
-        current_ip_address := inet_client_addr();
-    EXCEPTION WHEN OTHERS THEN
-        current_ip_address := NULL;
-    END;
-
-    -- Insert usage log record
-    INSERT INTO public.tool_usage_logs (
-        account_id,
-        tool_id,
-        profile_id,
-        session_id,
-        action,
-        feature_used,
-        duration_seconds,
-        data_volume_mb,
-        success,
-        error_code,
-        error_message,
-        metadata,
-        ip_address,
-        user_agent
-    ) VALUES (
-        p_account_id,
-        p_tool_id,
-        auth.uid(),
-        current_session_id,
-        p_action,
-        p_feature_used,
-        p_duration_seconds,
-        p_data_volume_mb,
-        p_success,
-        p_error_code,
-        p_error_message,
-        p_metadata,
-        current_ip_address,
-        current_user_agent
-    ) RETURNING id INTO usage_log_id;
-    
-    -- Update last_accessed_at in account_tool_access
-    UPDATE public.account_tool_access 
-    SET last_accessed_at = NOW()
-    WHERE account_id = p_account_id AND tool_id = p_tool_id;
-    
-    RETURN usage_log_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying, "p_duration_seconds" integer, "p_data_volume_mb" numeric, "p_success" boolean, "p_error_code" character varying, "p_error_message" "text", "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying, "p_duration_seconds" integer, "p_data_volume_mb" numeric, "p_success" boolean, "p_error_code" character varying, "p_error_message" "text", "p_metadata" "jsonb") IS 'Logs tool usage events with full context and updates last access timestamp';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."perform_sync_health_check"() RETURNS TABLE("check_timestamp" timestamp with time zone, "health_score" numeric, "total_discrepancies" integer, "critical_issues" integer, "recommendations" "text"[], "auto_actions_taken" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    discrepancy_count INTEGER;
-    critical_count INTEGER;
-    auto_actions INTEGER := 0;
-    recommendations_list TEXT[] := '{}';
-    health_score_val NUMERIC;
-    discrepancy_rec RECORD;
-BEGIN
-    check_timestamp := NOW();
-    
-    -- Count discrepancies
-    SELECT COUNT(*) INTO discrepancy_count 
-    FROM detect_profile_sync_discrepancies();
-    
-    SELECT COUNT(*) INTO critical_count 
-    FROM detect_profile_sync_discrepancies() 
-    WHERE severity = 'critical';
-    
-    -- Auto-resolve low-severity metadata inconsistencies
-    FOR discrepancy_rec IN 
-        SELECT * FROM detect_profile_sync_discrepancies() 
-        WHERE severity = 'low' AND discrepancy_type = 'metadata_inconsistency'
-    LOOP
-        -- Auto-update profile metadata from auth.users
-        UPDATE public.profiles 
-        SET 
-            full_name = COALESCE(
-                (discrepancy_rec.auth_data->'user_metadata'->>'full_name'),
-                full_name
-            ),
-            avatar_url = COALESCE(
-                (discrepancy_rec.auth_data->'user_metadata'->>'avatar_url'),
-                avatar_url
-            ),
-            auth_sync_status = 'synced',
-            auth_sync_last_attempted = NOW()
-        WHERE id = discrepancy_rec.profile_id;
-        
-        auto_actions := auto_actions + 1;
-    END LOOP;
-    
-    -- Generate recommendations
-    IF critical_count > 0 THEN
-        recommendations_list := recommendations_list || 'Immediate attention required for critical email mismatches';
-    END IF;
-    
-    IF discrepancy_count > 10 THEN
-        recommendations_list := recommendations_list || 'Consider running bulk sync operation';
-    END IF;
-    
-    SELECT COUNT(*) INTO discrepancy_count 
-    FROM public.profile_sync_conflicts 
-    WHERE resolved_at IS NULL AND created_at < NOW() - INTERVAL '7 days';
-    
-    IF discrepancy_count > 0 THEN
-        recommendations_list := recommendations_list || 'Review and resolve conflicts older than 7 days';
-    END IF;
-    
-    -- Calculate health score
-    SELECT sync_health_score INTO health_score_val 
-    FROM get_auth_sync_status_summary();
-    
-    RETURN QUERY SELECT 
-        check_timestamp,
-        health_score_val as health_score,
-        discrepancy_count as total_discrepancies,
-        critical_count as critical_issues,
-        recommendations_list as recommendations,
-        auto_actions as auto_actions_taken;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."perform_sync_health_check"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."perform_sync_health_check"() IS 'Automated sync health check with auto-resolution and recommendations';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") RETURNS TABLE("success" boolean, "result_data" "jsonb", "error_message" "text", "rollback_data" "jsonb")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_start_time TIMESTAMP := clock_timestamp();
-    v_success BOOLEAN := FALSE;
-    v_result JSONB := '{}';
-    v_error_msg TEXT := NULL;
-    v_rollback JSONB := '{}';
-    v_duration INTEGER;
-    profile_record RECORD;
-BEGIN
-    -- Update result record to running
-    UPDATE public.bulk_operation_results 
-    SET status = 'running', started_at = v_start_time
-    WHERE bulk_operation_id = p_bulk_operation_id 
-      AND target_profile_id = p_target_profile_id;
-    
-    -- Get profile data for rollback
-    SELECT * INTO profile_record FROM public.profiles WHERE id = p_target_profile_id;
-    
-    BEGIN
-        -- Process based on operation type
-        CASE p_operation_type
-            WHEN 'update_status' THEN
-                -- Update profile status
-                UPDATE public.profiles 
-                SET 
-                    status = (p_operation_data->>'status')::VARCHAR,
-                    updated_at = NOW()
-                WHERE id = p_target_profile_id;
-                
-                v_rollback := jsonb_build_object(
-                    'operation_type', 'update_status',
-                    'original_status', profile_record.status
-                );
-                v_result := jsonb_build_object('new_status', p_operation_data->>'status');
-                v_success := TRUE;
-                
-            WHEN 'assign_role' THEN
-                -- Assign role to profile
-                PERFORM assign_profile_role(
-                    p_target_profile_id,
-                    p_operation_data->>'role_name',
-                    COALESCE(p_operation_data->>'scope', 'global'),
-                    (p_operation_data->>'scope_id')::UUID,
-                    (p_operation_data->>'expires_at')::TIMESTAMP WITH TIME ZONE,
-                    p_operation_data->>'notes'
-                );
-                
-                v_rollback := jsonb_build_object(
-                    'operation_type', 'revoke_role',
-                    'role_name', p_operation_data->>'role_name'
-                );
-                v_result := jsonb_build_object('role_assigned', p_operation_data->>'role_name');
-                v_success := TRUE;
-                
-            WHEN 'verify_email' THEN
-                -- Verify email
-                UPDATE public.profiles 
-                SET 
-                    is_verified = TRUE,
-                    updated_at = NOW()
-                WHERE id = p_target_profile_id;
-                
-                v_rollback := jsonb_build_object(
-                    'operation_type', 'update_verification',
-                    'original_verified', profile_record.is_verified
-                );
-                v_result := jsonb_build_object('verified', true);
-                v_success := TRUE;
-                
-            WHEN 'sync_auth' THEN
-                -- Sync with auth
-                PERFORM sync_profile_with_auth(p_target_profile_id, 'auto');
-                v_result := jsonb_build_object('synced', true);
-                v_success := TRUE;
-                
-            ELSE
-                v_error_msg := 'Unsupported operation type: ' || p_operation_type;
-                v_success := FALSE;
-        END CASE;
-        
-    EXCEPTION WHEN OTHERS THEN
-        v_error_msg := SQLERRM;
-        v_success := FALSE;
-    END;
-    
-    -- Calculate duration
-    v_duration := EXTRACT(MILLISECONDS FROM clock_timestamp() - v_start_time)::INTEGER;
-    
-    -- Update result record
-    UPDATE public.bulk_operation_results 
-    SET 
-        status = CASE WHEN v_success THEN 'completed' ELSE 'failed' END,
-        completed_at = clock_timestamp(),
-        duration_ms = v_duration,
-        success = v_success,
-        result_data = v_result,
-        error_message = v_error_msg,
-        rollback_data = v_rollback,
-        updated_at = NOW()
-    WHERE bulk_operation_id = p_bulk_operation_id 
-      AND target_profile_id = p_target_profile_id;
-    
-    -- Update bulk operation progress
-    UPDATE public.bulk_operations 
-    SET 
-        processed_count = processed_count + 1,
-        success_count = success_count + CASE WHEN v_success THEN 1 ELSE 0 END,
-        failed_count = failed_count + CASE WHEN v_success THEN 0 ELSE 1 END,
-        progress_percentage = ROUND(
-            ((processed_count + 1)::NUMERIC / total_targets::NUMERIC) * 100, 2
-        ),
-        updated_at = NOW()
-    WHERE id = p_bulk_operation_id;
-    
-    RETURN QUERY SELECT 
-        v_success as success,
-        v_result as result_data,
-        v_error_msg as error_message,
-        v_rollback as rollback_data;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") IS 'Process individual profile within a bulk operation';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying DEFAULT 'USD'::character varying, "p_payment_method_id" "uuid" DEFAULT NULL::"uuid", "p_subscription_id" "uuid" DEFAULT NULL::"uuid", "p_description" "text" DEFAULT NULL::"text") RETURNS TABLE("payment_id" "uuid", "success" boolean, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_payment_id UUID;
-BEGIN
-    -- Create payment record
-    INSERT INTO public.payments (
-        account_id,
-        subscription_id,
-        payment_method_id,
-        amount_cents,
-        currency,
-        description,
-        status
-    ) VALUES (
-        p_account_id,
-        p_subscription_id,
-        p_payment_method_id,
-        p_amount_cents,
-        p_currency,
-        p_description,
-        'pending'
-    ) RETURNING id INTO v_payment_id;
-    
-    -- Log billing event
-    INSERT INTO public.billing_events (
-        account_id,
-        event_type,
-        payment_id,
-        event_data
-    ) VALUES (
-        p_account_id,
-        'payment_created',
-        v_payment_id,
-        jsonb_build_object(
-            'amount_cents', p_amount_cents,
-            'currency', p_currency,
-            'description', p_description
-        )
-    );
-    
-    RETURN QUERY SELECT v_payment_id, TRUE, 'Payment created and pending processing';
-END;
-$$;
-
-
-ALTER FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying, "p_payment_method_id" "uuid", "p_subscription_id" "uuid", "p_description" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying, "p_payment_method_id" "uuid", "p_subscription_id" "uuid", "p_description" "text") IS 'Create a payment record for processing';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."refresh_usage_analytics"() RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    REFRESH MATERIALIZED VIEW CONCURRENTLY daily_usage_summary;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."refresh_usage_analytics"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."refresh_usage_analytics"() IS 'Refresh the daily usage summary materialized view';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text" DEFAULT NULL::"text") RETURNS TABLE("success" boolean, "action_taken" "text", "resolved_profile_id" "uuid", "error_message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    conflict_record RECORD;
-    resolved_successfully BOOLEAN := FALSE;
-    action_description TEXT;
-BEGIN
-    -- Get conflict details
-    SELECT * INTO conflict_record 
-    FROM public.profile_sync_conflicts 
-    WHERE id = p_conflict_id AND resolved_at IS NULL;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            'conflict_not_found'::TEXT as action_taken,
-            NULL::UUID as resolved_profile_id,
-            'Conflict not found or already resolved'::TEXT as error_message;
-        RETURN;
-    END IF;
-
-    -- Apply resolution strategy
-    CASE p_resolution_strategy
-        WHEN 'profile_wins' THEN
-            -- Profile data takes precedence
-            IF conflict_record.conflict_type = 'email_mismatch' THEN
-                -- Would need to update auth.users email (requires admin API)
-                action_description := 'profile_wins_auth_update_required';
-                resolved_successfully := TRUE;
-            ELSIF conflict_record.conflict_type = 'metadata_inconsistency' THEN
-                -- Update auth.users metadata to match profile
-                action_description := 'profile_wins_metadata_updated';
-                resolved_successfully := TRUE;
-            END IF;
-            
-        WHEN 'auth_wins' THEN
-            -- Auth.users data takes precedence
-            IF conflict_record.conflict_type = 'email_mismatch' THEN
-                -- Update profile email to match auth.users
-                UPDATE public.profiles 
-                SET email = (conflict_record.auth_data->>'email')::TEXT,
-                    auth_sync_status = 'synced',
-                    auth_sync_last_attempted = NOW()
-                WHERE id = conflict_record.profile_id;
-                
-                action_description := 'auth_wins_profile_updated';
-                resolved_successfully := TRUE;
-            END IF;
-            
-        WHEN 'manual' THEN
-            -- Manual resolution - just mark as resolved with notes
-            action_description := 'manual_resolution';
-            resolved_successfully := TRUE;
-            
-        WHEN 'ignore' THEN
-            -- Ignore the conflict
-            action_description := 'conflict_ignored';
-            resolved_successfully := TRUE;
-            
-        ELSE
-            RETURN QUERY SELECT 
-                FALSE as success,
-                'invalid_strategy'::TEXT as action_taken,
-                conflict_record.profile_id as resolved_profile_id,
-                'Invalid resolution strategy'::TEXT as error_message;
-            RETURN;
-    END CASE;
-
-    -- Mark conflict as resolved
-    IF resolved_successfully THEN
-        UPDATE public.profile_sync_conflicts 
-        SET 
-            resolved_at = NOW(),
-            resolved_by = auth.uid(),
-            resolution_strategy = p_resolution_strategy,
-            resolution_notes = p_resolution_notes,
-            updated_at = NOW()
-        WHERE id = p_conflict_id;
-        
-        -- Log the resolution
-        PERFORM log_profile_activity(
-            conflict_record.profile_id,
-            'sync_conflict_resolved',
-            'conflict',
-            p_conflict_id,
-            'Sync conflict resolved using ' || p_resolution_strategy || ' strategy',
-            jsonb_build_object(
-                'conflict_id', p_conflict_id,
-                'conflict_type', conflict_record.conflict_type,
-                'resolution_strategy', p_resolution_strategy,
-                'resolution_notes', p_resolution_notes
-            )
-        );
-        
-        RETURN QUERY SELECT 
-            TRUE as success,
-            action_description as action_taken,
-            conflict_record.profile_id as resolved_profile_id,
-            NULL::TEXT as error_message;
-    ELSE
-        RETURN QUERY SELECT 
-            FALSE as success,
-            'resolution_failed'::TEXT as action_taken,
-            conflict_record.profile_id as resolved_profile_id,
-            'Failed to apply resolution strategy'::TEXT as error_message;
-    END IF;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text") IS 'Resolve sync conflicts using specified strategy';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."restore_account"("account_uuid" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    UPDATE public.accounts 
-    SET 
-        status = 'active',
-        updated_at = NOW()
-    WHERE id = account_uuid AND status = 'deleted';
-    
-    RETURN FOUND;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."restore_account"("account_uuid" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."restore_account"("account_uuid" "uuid") IS 'Restores a soft-deleted account by setting status to active';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text" DEFAULT NULL::"text") RETURNS TABLE("success" boolean, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_role_record RECORD;
-    v_revoked_by UUID;
-BEGIN
-    -- Get current user
-    v_revoked_by := auth.uid();
-    
-    -- Get role details before revoking
-    SELECT * INTO v_role_record 
-    FROM public.profile_roles 
-    WHERE id = p_role_id AND is_active = true;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            'Role assignment not found or already inactive'::TEXT as message;
-        RETURN;
-    END IF;
-    
-    -- Deactivate the role
-    UPDATE public.profile_roles 
-    SET 
-        is_active = false,
-        updated_at = NOW(),
-        notes = COALESCE(notes, '') || CASE 
-            WHEN notes IS NOT NULL THEN E'\n' 
-            ELSE '' 
-        END || 'Revoked: ' || COALESCE(p_reason, 'No reason provided')
-    WHERE id = p_role_id;
-    
-    -- Log the role revocation
-    PERFORM log_profile_activity(
-        v_role_record.profile_id,
-        'role_removed',
-        'role',
-        p_role_id,
-        'Role revoked: ' || v_role_record.role_name || ' (' || v_role_record.scope || ')',
-        jsonb_build_object(
-            'role_name', v_role_record.role_name,
-            'scope', v_role_record.scope,
-            'scope_id', v_role_record.scope_id,
-            'revocation_reason', p_reason,
-            'revoked_by', v_revoked_by
-        )
-    );
-    
-    RETURN QUERY SELECT 
-        TRUE as success,
-        'Role successfully revoked'::TEXT as message;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text") IS 'Revoke a role assignment from a profile';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text" DEFAULT NULL::"text") RETURNS TABLE("success" boolean, "rolled_back_count" integer, "failed_rollback_count" integer, "message" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_operation_record RECORD;
-    v_result_record RECORD;
-    v_rolled_back_count INTEGER := 0;
-    v_failed_rollback_count INTEGER := 0;
-    v_rollback_data JSONB;
-BEGIN
-    -- Get bulk operation
-    SELECT * INTO v_operation_record 
-    FROM public.bulk_operations 
-    WHERE id = p_bulk_operation_id AND can_rollback = TRUE;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            0 as rolled_back_count,
-            0 as failed_rollback_count,
-            'Bulk operation not found or cannot be rolled back'::TEXT as message;
-        RETURN;
-    END IF;
-    
-    -- Process rollback for each successful result
-    FOR v_result_record IN 
-        SELECT * FROM public.bulk_operation_results
-        WHERE bulk_operation_id = p_bulk_operation_id 
-          AND success = TRUE 
-          AND rolled_back = FALSE
-          AND rollback_data != '{}'
-        ORDER BY sequence_number DESC
-    LOOP
-        BEGIN
-            v_rollback_data := v_result_record.rollback_data;
-            
-            -- Execute rollback based on operation type
-            CASE v_rollback_data->>'operation_type'
-                WHEN 'update_status' THEN
-                    UPDATE public.profiles 
-                    SET status = (v_rollback_data->>'original_status')::VARCHAR
-                    WHERE id = v_result_record.target_profile_id;
-                    
-                WHEN 'revoke_role' THEN
-                    -- Find and revoke the role that was assigned
-                    PERFORM revoke_profile_role(
-                        (SELECT id FROM public.profile_roles 
-                         WHERE profile_id = v_result_record.target_profile_id 
-                           AND role_name = v_rollback_data->>'role_name'
-                           AND is_active = TRUE
-                         LIMIT 1),
-                        'Bulk operation rollback'
-                    );
-                    
-                WHEN 'update_verification' THEN
-                    UPDATE public.profiles 
-                    SET is_verified = (v_rollback_data->>'original_verified')::BOOLEAN
-                    WHERE id = v_result_record.target_profile_id;
-            END CASE;
-            
-            -- Mark as rolled back
-            UPDATE public.bulk_operation_results 
-            SET rolled_back = TRUE, updated_at = NOW()
-            WHERE id = v_result_record.id;
-            
-            v_rolled_back_count := v_rolled_back_count + 1;
-            
-        EXCEPTION WHEN OTHERS THEN
-            v_failed_rollback_count := v_failed_rollback_count + 1;
-        END;
-    END LOOP;
-    
-    -- Update bulk operation
-    UPDATE public.bulk_operations 
-    SET 
-        status = 'rolled_back',
-        rolled_back_at = NOW(),
-        rollback_reason = p_rollback_reason,
-        updated_at = NOW()
-    WHERE id = p_bulk_operation_id;
-    
-    RETURN QUERY SELECT 
-        TRUE as success,
-        v_rolled_back_count as rolled_back_count,
-        v_failed_rollback_count as failed_rollback_count,
-        ('Rollback completed: ' || v_rolled_back_count || ' operations reversed')::TEXT as message;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text") IS 'Rollback a completed bulk operation';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."schedule_analytics_refresh"() RETURNS "void"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    -- This would require pg_cron extension
-    -- For now, we'll document the manual refresh process
-    RAISE NOTICE 'To enable automatic refresh, install pg_cron extension and run:';
-    RAISE NOTICE 'SELECT cron.schedule(''refresh-usage-analytics'', ''0 2 * * *'', ''SELECT refresh_usage_analytics();'');';
-END;
-$$;
-
-
-ALTER FUNCTION "public"."schedule_analytics_refresh"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."security_health_check"() RETURNS TABLE("check_name" "text", "status" "text", "details" "text", "severity" "text")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    -- Check 1: Tables without RLS
-    RETURN QUERY
-    SELECT 
-        'Tables without RLS'::TEXT,
-        CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END,
-        'Tables without RLS: ' || STRING_AGG(tablename, ', '),
-        'HIGH'::TEXT
-    FROM pg_tables t
-    WHERE t.schemaname = 'public'
-    AND t.tablename NOT LIKE 'pg_%'
-    AND t.tablename NOT LIKE 'sql_%'
-    AND NOT EXISTS (
-        SELECT 1 FROM pg_class c
-        WHERE c.relname = t.tablename
-        AND c.relrowsecurity = true
-    );
-
-    -- Check 2: Tables with RLS but no policies
-    RETURN QUERY
-    SELECT 
-        'Tables with RLS but no policies'::TEXT,
-        CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'WARN' END,
-        'Tables with RLS but no policies: ' || STRING_AGG(tablename, ', '),
-        'MEDIUM'::TEXT
-    FROM pg_tables t
-    WHERE t.schemaname = 'public'
-    AND t.tablename NOT LIKE 'pg_%'
-    AND t.tablename NOT LIKE 'sql_%'
-    AND EXISTS (
-        SELECT 1 FROM pg_class c
-        WHERE c.relname = t.tablename
-        AND c.relrowsecurity = true
-    )
-    AND NOT EXISTS (
-        SELECT 1 FROM pg_policies p
-        WHERE p.tablename = t.tablename
-        AND p.schemaname = 'public'
-    );
-
-    -- Check 3: Overly permissive policies
-    RETURN QUERY
-    SELECT 
-        'Overly permissive policies'::TEXT,
-        CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END,
-        'Permissive policies found: ' || STRING_AGG(tablename || '.' || policyname, ', '),
-        'HIGH'::TEXT
-    FROM pg_policies
-    WHERE schemaname = 'public'
-    AND (
-        qual LIKE '%true%' OR
-        qual LIKE '%1=1%' OR
-        qual IS NULL
-    );
-
-    -- Check 4: Functions without SECURITY DEFINER
-    RETURN QUERY
-    SELECT 
-        'Functions without SECURITY DEFINER'::TEXT,
-        CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'INFO' END,
-        'Functions without SECURITY DEFINER: ' || STRING_AGG(proname, ', '),
-        'LOW'::TEXT
-    FROM pg_proc p
-    JOIN pg_namespace n ON p.pronamespace = n.oid
-    WHERE n.nspname = 'public'
-    AND p.proname LIKE '%client%'
-    AND NOT p.prosecdef;
-
-END;
-$$;
-
-
-ALTER FUNCTION "public"."security_health_check"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."security_health_check"() IS 'Comprehensive security health check for the database';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."set_invitation_token"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    IF NEW.token IS NULL OR NEW.token = '' THEN
-        NEW.token := generate_invitation_token();
-    END IF;
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."set_invitation_token"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."set_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-  NEW.updated_at = NOW();
-  RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."set_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_share_id UUID;
-    v_share_token VARCHAR(255);
-BEGIN
-    -- Generate share token
-    v_share_token := encode(gen_random_bytes(32), 'hex');
-    
-    -- Insert share
-    INSERT INTO document_shares (
-        document_id, client_id, shared_with_user_id, shared_with_email, share_type,
-        expires_at, password_hash, max_downloads, share_token, is_public_link,
-        can_view, can_download, can_comment, can_edit, created_by
-    ) VALUES (
-        p_document_id, p_client_id, p_shared_with_user_id, p_shared_with_email, p_share_type,
-        p_expires_at, p_password_hash, p_max_downloads, v_share_token, p_is_public_link,
-        p_can_view, p_can_download, p_can_comment, p_can_edit, p_created_by
-    ) RETURNING id INTO v_share_id;
-    
-    RETURN v_share_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") IS 'Creates secure document sharing with access control';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    UPDATE public.accounts 
-    SET 
-        status = 'deleted',
-        updated_at = NOW()
-    WHERE id = account_uuid AND status != 'deleted';
-    
-    RETURN FOUND;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") IS 'Soft deletes an account by setting status to deleted';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text" DEFAULT 'auto'::"text", "p_force_sync" boolean DEFAULT false) RETURNS TABLE("success" boolean, "action_taken" "text", "conflicts_created" integer, "error_message" "text", "sync_details" "jsonb")
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    profile_record RECORD;
-    auth_record RECORD;
-    sync_result RECORD;
-    conflicts_count INTEGER := 0;
-    operation_details JSONB := '{}';
-BEGIN
-    -- Get profile data
-    SELECT * INTO profile_record FROM public.profiles WHERE id = p_profile_id;
-    
-    IF NOT FOUND THEN
-        RETURN QUERY SELECT 
-            FALSE as success,
-            'profile_not_found'::TEXT as action_taken,
-            0 as conflicts_created,
-            'Profile not found'::TEXT as error_message,
-            '{}'::JSONB as sync_details;
-        RETURN;
-    END IF;
-
-    -- Get auth.users data by email
-    SELECT * INTO auth_record FROM auth.users WHERE email = profile_record.email;
-
-    -- Handle different sync scenarios
-    IF auth_record IS NULL THEN
-        -- No auth.users record exists
-        IF p_strategy = 'create_auth' OR (p_strategy = 'auto' AND profile_record.status = 'active') THEN
-            -- Would create auth.users record (requires admin API call in application)
-            UPDATE public.profiles 
-            SET auth_sync_status = 'pending',
-                auth_sync_last_attempted = NOW(),
-                metadata = COALESCE(metadata, '{}') || jsonb_build_object(
-                    'sync_action_required', 'create_auth_user',
-                    'sync_attempted_at', NOW()
-                )
-            WHERE id = p_profile_id;
-            
-            operation_details := jsonb_build_object(
-                'action', 'create_auth_required',
-                'profile_email', profile_record.email,
-                'profile_status', profile_record.status
-            );
-            
-            RETURN QUERY SELECT 
-                TRUE as success,
-                'create_auth_required'::TEXT as action_taken,
-                0 as conflicts_created,
-                NULL::TEXT as error_message,
-                operation_details as sync_details;
-        ELSE
-            -- Create conflict record
-            INSERT INTO public.profile_sync_conflicts (
-                profile_id, auth_user_id, conflict_type, profile_data, auth_data, metadata
-            ) VALUES (
-                p_profile_id, NULL, 'auth_missing', 
-                to_jsonb(profile_record), '{}',
-                jsonb_build_object('sync_strategy', p_strategy, 'created_by', 'sync_function')
-            );
-            conflicts_count := 1;
-            
-            UPDATE public.profiles 
-            SET auth_sync_status = 'conflict' 
-            WHERE id = p_profile_id;
-            
-            RETURN QUERY SELECT 
-                FALSE as success,
-                'conflict_created'::TEXT as action_taken,
-                conflicts_count as conflicts_created,
-                'Auth user missing - conflict created'::TEXT as error_message,
-                jsonb_build_object('conflict_type', 'auth_missing') as sync_details;
-        END IF;
-    ELSE
-        -- Auth.users record exists - check for conflicts
-        IF profile_record.email != auth_record.email THEN
-            -- Email mismatch
-            INSERT INTO public.profile_sync_conflicts (
-                profile_id, auth_user_id, conflict_type, profile_data, auth_data
-            ) VALUES (
-                p_profile_id, auth_record.id, 'email_mismatch',
-                to_jsonb(profile_record),
-                jsonb_build_object(
-                    'id', auth_record.id,
-                    'email', auth_record.email,
-                    'created_at', auth_record.created_at
-                )
-            );
-            conflicts_count := 1;
-            
-            UPDATE public.profiles 
-            SET auth_sync_status = 'conflict' 
-            WHERE id = p_profile_id;
-            
-            RETURN QUERY SELECT 
-                FALSE as success,
-                'email_conflict'::TEXT as action_taken,
-                conflicts_count as conflicts_created,
-                'Email mismatch between profile and auth.users'::TEXT as error_message,
-                jsonb_build_object('profile_email', profile_record.email, 'auth_email', auth_record.email) as sync_details;
-        ELSE
-            -- No conflicts - update sync status and sync metadata
-            UPDATE public.profiles 
-            SET 
-                auth_sync_status = 'synced',
-                auth_sync_last_attempted = NOW(),
-                last_login_at = COALESCE(auth_record.last_sign_in_at, last_login_at),
-                is_verified = COALESCE(auth_record.email_confirmed_at IS NOT NULL, is_verified),
-                metadata = COALESCE(metadata, '{}') || jsonb_build_object(
-                    'auth_user_id', auth_record.id,
-                    'last_sync_at', NOW(),
-                    'auth_created_at', auth_record.created_at,
-                    'auth_updated_at', auth_record.updated_at
-                )
-            WHERE id = p_profile_id;
-            
-            -- Log the sync activity
-            PERFORM log_profile_activity(
-                p_profile_id,
-                'profile_synced',
-                'auth',
-                auth_record.id,
-                'Profile successfully synchronized with auth.users',
-                jsonb_build_object(
-                    'auth_user_id', auth_record.id,
-                    'sync_strategy', p_strategy,
-                    'sync_timestamp', NOW()
-                )
-            );
-            
-            operation_details := jsonb_build_object(
-                'auth_user_id', auth_record.id,
-                'last_sign_in_at', auth_record.last_sign_in_at,
-                'email_confirmed', auth_record.email_confirmed_at IS NOT NULL
-            );
-            
-            RETURN QUERY SELECT 
-                TRUE as success,
-                'synced'::TEXT as action_taken,
-                0 as conflicts_created,
-                NULL::TEXT as error_message,
-                operation_details as sync_details;
-        END IF;
-    END IF;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text", "p_force_sync" boolean) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text", "p_force_sync" boolean) IS 'Sync individual profile with auth.users, handling conflicts and different strategies';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb" DEFAULT '{}'::"jsonb") RETURNS "void"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    INSERT INTO public.feature_usage_tracking (
-        profile_id,
-        feature_name,
-        feature_category,
-        usage_metadata,
-        last_used_at
-    ) VALUES (
-        p_profile_id,
-        p_feature_name,
-        p_feature_category,
-        p_metadata,
-        NOW()
-    )
-    ON CONFLICT (profile_id, feature_name) DO UPDATE
-    SET 
-        usage_count = feature_usage_tracking.usage_count + 1,
-        last_used_at = NOW(),
-        usage_metadata = feature_usage_tracking.usage_metadata || p_metadata;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb") IS 'Track feature usage for adoption analytics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."update_account_tool_access_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    NEW.updated_at = NOW();
-    NEW.updated_by = auth.uid();
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_account_tool_access_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean DEFAULT NULL::boolean, "p_ordinary_k1_income" numeric DEFAULT NULL::numeric, "p_guaranteed_k1_income" numeric DEFAULT NULL::numeric, "p_annual_revenue" numeric DEFAULT NULL::numeric, "p_employee_count" integer DEFAULT NULL::integer) RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  UPDATE business_years SET
-    is_active = COALESCE(p_is_active, is_active),
-    ordinary_k1_income = COALESCE(p_ordinary_k1_income, ordinary_k1_income),
-    guaranteed_k1_income = COALESCE(p_guaranteed_k1_income, guaranteed_k1_income),
-    annual_revenue = COALESCE(p_annual_revenue, annual_revenue),
-    employee_count = COALESCE(p_employee_count, employee_count),
-    updated_at = NOW()
-  WHERE id = p_year_id;
-  
-  RETURN FOUND;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_business_years_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-  NEW.updated_at = NOW();
-  RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_business_years_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status" DEFAULT NULL::"public"."engagement_status", "p_pending_actions" integer DEFAULT NULL::integer, "p_completion_percentage" numeric DEFAULT NULL::numeric, "p_next_action_due" timestamp with time zone DEFAULT NULL::timestamp with time zone) RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    INSERT INTO client_engagement_status (client_id, status, pending_actions, completion_percentage, next_action_due)
-    VALUES (p_client_id, COALESCE(p_status, 'active'), COALESCE(p_pending_actions, 0), COALESCE(p_completion_percentage, 0.00), p_next_action_due)
-    ON CONFLICT (client_id) DO UPDATE SET
-        status = COALESCE(p_status, client_engagement_status.status),
-        pending_actions = COALESCE(p_pending_actions, client_engagement_status.pending_actions),
-        completion_percentage = COALESCE(p_completion_percentage, client_engagement_status.completion_percentage),
-        next_action_due = COALESCE(p_next_action_due, client_engagement_status.next_action_due),
-        updated_at = NOW();
-    
-    RETURN TRUE;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status", "p_pending_actions" integer, "p_completion_percentage" numeric, "p_next_action_due" timestamp with time zone) OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status", "p_pending_actions" integer, "p_completion_percentage" numeric, "p_next_action_due" timestamp with time zone) IS 'Updates client engagement status and metrics';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."update_client_users_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    NEW.updated_at = NOW();
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_client_users_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_document_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    NEW.updated_at = NOW();
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_document_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_invitations_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    NEW.updated_at = now();
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_invitations_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_profile_updated_at"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    NEW.updated_at = NOW();
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."update_profile_updated_at"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-begin
-  new.updated_at = now();
-  return new;
-end;
-$$;
-
-
-ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") RETURNS "uuid"
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    v_document_id UUID;
-    v_job_id UUID;
-BEGIN
-    -- Insert document
-    INSERT INTO document_files (
-        client_id, folder_id, original_name, file_name, file_size, mime_type, 
-        file_extension, storage_path, checksum, document_type, tax_year, 
-        category, tags, uploaded_by
-    ) VALUES (
-        p_client_id, p_folder_id, p_original_name, p_file_name, p_file_size, 
-        p_mime_type, p_file_extension, p_storage_path, p_checksum, p_document_type, 
-        p_tax_year, p_category, p_tags, p_uploaded_by
-    ) RETURNING id INTO v_document_id;
-    
-    -- Create virus scan job
-    INSERT INTO document_processing_jobs (document_id, job_type, input_data)
-    VALUES (v_document_id, 'virus_scan', '{}')
-    RETURNING id INTO v_job_id;
-    
-    -- Create thumbnail generation job for images/PDFs
-    IF p_mime_type LIKE 'image/%' OR p_mime_type = 'application/pdf' THEN
-        INSERT INTO document_processing_jobs (document_id, job_type, input_data)
-        VALUES (v_document_id, 'thumbnail_generation', '{}');
-    END IF;
-    
-    -- Create text extraction job for PDFs
-    IF p_mime_type = 'application/pdf' THEN
-        INSERT INTO document_processing_jobs (document_id, job_type, input_data)
-        VALUES (v_document_id, 'text_extraction', '{}');
-    END IF;
-    
-    RETURN v_document_id;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") IS 'Handles secure document upload with automatic processing jobs';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."user_has_admin_account"("user_id" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-  user_account_id UUID;
-  account_type_val TEXT;
-BEGIN
-  -- Get user's account_id
-  SELECT account_id INTO user_account_id FROM public.profiles WHERE id = user_id;
-  
-  IF user_account_id IS NULL THEN
-    RETURN FALSE;
-  END IF;
-  
-  -- Get account type directly
-  SELECT type INTO account_type_val FROM public.accounts WHERE id = user_account_id;
-  
-  RETURN account_type_val = 'admin';
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_has_admin_account"("user_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN EXISTS (
-        SELECT 1 FROM client_users cu
-        JOIN profiles p ON cu.user_id = p.id
-        WHERE cu.user_id = check_user_id
-        AND cu.client_id = check_client_id
-        AND cu.is_active = true
-    );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") IS 'Check if user has any access to a client';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-DECLARE
-    user_role client_role;
-    role_hierarchy INTEGER;
-    required_hierarchy INTEGER;
-BEGIN
-    -- Get user's role for this client
-    SELECT role INTO user_role
-    FROM client_users
-    WHERE user_id = check_user_id
-    AND client_id = check_client_id
-    AND is_active = true;
-    
-    -- If no role found, return false
-    IF user_role IS NULL THEN
-        RETURN FALSE;
-    END IF;
-    
-    -- Define role hierarchy (higher number = more permissions)
-    role_hierarchy := CASE user_role
-        WHEN 'viewer' THEN 1
-        WHEN 'member' THEN 2
-        WHEN 'accountant' THEN 3
-        WHEN 'owner' THEN 4
-        ELSE 0
-    END;
-    
-    required_hierarchy := CASE required_role
-        WHEN 'viewer' THEN 1
-        WHEN 'member' THEN 2
-        WHEN 'accountant' THEN 3
-        WHEN 'owner' THEN 4
-        ELSE 0
-    END;
-    
-    RETURN role_hierarchy >= required_hierarchy;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") IS 'Check if user has specific role or higher for a client';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."user_has_direct_client_access"("user_id" "uuid", "client_id" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  -- Check if user is the client creator
-  IF EXISTS (
-    SELECT 1 FROM clients c 
-    WHERE c.id = client_id AND c.created_by = user_id
-  ) THEN
-    RETURN TRUE;
-  END IF;
-  
-  -- Check if user is an admin
-  IF EXISTS (
-    SELECT 1 FROM profiles p 
-    WHERE p.id = user_id AND p.role = 'admin'
-  ) THEN
-    RETURN TRUE;
-  END IF;
-  
-  -- Check if user is an affiliate who created the client
-  IF EXISTS (
-    SELECT 1 FROM clients c 
-    WHERE c.id = client_id AND c.affiliate_id = user_id
-  ) THEN
-    RETURN TRUE;
-  END IF;
-  
-  RETURN FALSE;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_has_direct_client_access"("user_id" "uuid", "client_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."user_is_admin"("user_id" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN EXISTS (
-    SELECT 1 FROM public.profiles p 
-    WHERE p.id = user_id AND p.role = 'admin'
-  );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_is_admin"("user_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."user_is_client_owner"("user_id" "uuid", "client_id" "uuid") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-  RETURN EXISTS (
-    SELECT 1 FROM client_users cu
-    WHERE cu.client_id = client_id 
-    AND cu.user_id = user_id 
-    AND cu.role = 'owner'
-    AND cu.is_active = true
-  );
-END;
-$$;
-
-
-ALTER FUNCTION "public"."user_is_client_owner"("user_id" "uuid", "client_id" "uuid") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role" DEFAULT 'viewer'::"public"."client_role") RETURNS boolean
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    -- Check if user has required access
-    IF NOT user_has_client_role(auth.uid(), check_client_id, required_role) THEN
-        -- Log unauthorized access attempt
-        PERFORM log_client_access(
-            'unauthorized_access_attempt',
-            check_client_id,
-            auth.uid(),
-            jsonb_build_object(
-                'required_role', required_role,
-                'user_role', get_user_client_role(auth.uid(), check_client_id)
-            )
-        );
-        RETURN FALSE;
-    END IF;
-    
-    -- Log successful access
-    PERFORM log_client_access(
-        'authorized_access',
-        check_client_id,
-        auth.uid(),
-        jsonb_build_object(
-            'required_role', required_role,
-            'user_role', get_user_client_role(auth.uid(), check_client_id)
-        )
-    );
-    
-    RETURN TRUE;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role") OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role") IS 'Validate user has required access to client and log the attempt';
-
-
-
-CREATE OR REPLACE FUNCTION "public"."validate_document_share"() RETURNS "trigger"
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-    -- Check if share has expired
-    IF NEW.expires_at IS NOT NULL AND NEW.expires_at < NOW() THEN
-        RAISE EXCEPTION 'Share has expired';
-    END IF;
-    
-    -- Check download limits
-    IF NEW.max_downloads IS NOT NULL AND NEW.download_count >= NEW.max_downloads THEN
-        RAISE EXCEPTION 'Download limit exceeded';
-    END IF;
-    
-    RETURN NEW;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."validate_document_share"() OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."validate_historical_data"("data" "jsonb") RETURNS boolean
-    LANGUAGE "plpgsql"
-    AS $$
-BEGIN
-  -- Check if it's an array
-  IF jsonb_typeof(data) != 'array' THEN
-    RETURN FALSE;
-  END IF;
-  
-  -- Check each object in the array
-  FOR i IN 0..jsonb_array_length(data) - 1 LOOP
-    DECLARE
-      item JSONB := data->i;
-    BEGIN
-      -- Check required fields exist and are numbers
-      IF NOT (item ? 'year' AND item ? 'gross_receipts' AND item ? 'qre') THEN
-        RETURN FALSE;
-      END IF;
-      
-      -- Check year is reasonable
-      IF (item->>'year')::INTEGER < 1900 OR (item->>'year')::INTEGER > EXTRACT(YEAR FROM CURRENT_DATE) + 1 THEN
-        RETURN FALSE;
-      END IF;
-      
-      -- Check amounts are non-negative
-      IF (item->>'gross_receipts')::NUMERIC < 0 OR (item->>'qre')::NUMERIC < 0 THEN
-        RETURN FALSE;
-      END IF;
-    END;
-  END LOOP;
-  
-  RETURN TRUE;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."validate_historical_data"("data" "jsonb") OWNER TO "postgres";
-
-
-CREATE OR REPLACE FUNCTION "public"."validate_rls_enabled"() RETURNS TABLE("table_name" "text", "rls_enabled" boolean, "has_policies" boolean, "policy_count" integer)
-    LANGUAGE "plpgsql" SECURITY DEFINER
-    AS $$
-BEGIN
-    RETURN QUERY
-    SELECT 
-        t.tablename::TEXT,
-        t.rowsecurity,
-        COUNT(p.policyname) > 0,
-        COUNT(p.policyname)::INTEGER
-    FROM pg_tables t
-    LEFT JOIN pg_policies p ON t.tablename = p.tablename AND t.schemaname = p.schemaname
-    WHERE t.schemaname = 'public'
-    AND t.tablename NOT LIKE 'pg_%'
-    AND t.tablename NOT LIKE 'sql_%'
-    GROUP BY t.tablename, t.rowsecurity
-    ORDER BY t.tablename;
-END;
-$$;
-
-
-ALTER FUNCTION "public"."validate_rls_enabled"() OWNER TO "postgres";
-
-
-COMMENT ON FUNCTION "public"."validate_rls_enabled"() IS 'Validate that RLS is properly enabled on all tables';
-
-
-SET default_tablespace = '';
-
-SET default_table_access_method = "heap";
-
-
-CREATE TABLE IF NOT EXISTS "public"."account_activities" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "actor_id" "uuid",
-    "account_id" "uuid" NOT NULL,
-    "activity_type" character varying(100) NOT NULL,
-    "target_type" character varying(50) NOT NULL,
-    "target_id" "uuid" NOT NULL,
-    "description" "text" NOT NULL,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
-    "ip_address" "inet",
-    "user_agent" "text",
-    "session_id" "text",
-    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    CONSTRAINT "account_activities_activity_type_check" CHECK ((("activity_type")::"text" = ANY ((ARRAY['account_created'::character varying, 'account_updated'::character varying, 'account_deleted'::character varying, 'profile_added'::character varying, 'profile_removed'::character varying, 'profile_updated'::character varying, 'status_changed'::character varying, 'type_changed'::character varying, 'access_granted'::character varying, 'access_revoked'::character varying, 'tool_assigned'::character varying, 'tool_removed'::character varying, 'tool_access_modified'::character varying, 'billing_updated'::character varying, 'subscription_changed'::character varying, 'payment_processed'::character varying, 'login_success'::character varying, 'login_failed'::character varying, 'password_changed'::character varying, 'data_export'::character varying, 'bulk_operation'::character varying, 'admin_action'::character varying])::"text"[]))),
-    CONSTRAINT "account_activities_target_type_check" CHECK ((("target_type")::"text" = ANY ((ARRAY['account'::character varying, 'profile'::character varying, 'tool'::character varying, 'subscription'::character varying, 'payment'::character varying, 'commission'::character varying, 'client'::character varying, 'expert'::character varying, 'affiliate'::character varying, 'system'::character varying])::"text"[]))),
-    CONSTRAINT "check_activity_type" CHECK ((("activity_type")::"text" = ANY ((ARRAY['account_created'::character varying, 'account_updated'::character varying, 'account_deleted'::character varying, 'account_suspended'::character varying, 'account_activated'::character varying, 'admin_action'::character varying, 'system_action'::character varying, 'data_export'::character varying, 'data_import'::character varying, 'profile_created'::character varying, 'profile_updated'::character varying, 'profile_deleted'::character varying, 'profile_suspended'::character varying, 'profile_activated'::character varying, 'profile_locked'::character varying, 'profile_unlocked'::character varying, 'profile_verified'::character varying, 'login_success'::character varying, 'login_failed'::character varying, 'logout'::character varying, 'password_changed'::character varying, 'password_reset'::character varying, 'two_factor_enabled'::character varying, 'two_factor_disabled'::character varying, 'role_assigned'::character varying, 'role_removed'::character varying, 'permission_granted'::character varying, 'permission_revoked'::character varying, 'profile_synced'::character varying, 'profile_sync_failed'::character varying])::"text"[]))),
-    CONSTRAINT "check_target_type" CHECK ((("target_type")::"text" = ANY ((ARRAY['account'::character varying, 'tool'::character varying, 'profile'::character varying, 'invoice'::character varying, 'user'::character varying, 'role'::character varying, 'permission'::character varying, 'system'::character varying, 'auth'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."account_activities" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."account_activities" IS 'Comprehensive audit log for all account-related activities in the admin platform';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."actor_id" IS 'User who performed the action (null for system actions)';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."account_id" IS 'Account that was affected by the activity';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."activity_type" IS 'Type of activity performed';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."target_type" IS 'Type of entity that was targeted';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."target_id" IS 'ID of the specific entity that was targeted';
-
-
-
-COMMENT ON COLUMN "public"."account_activities"."metadata" IS 'Additional context data (old/new values, etc.)';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."account_tool_access" (
-    "account_id" "uuid" NOT NULL,
-    "tool_id" "uuid" NOT NULL,
-    "access_level" "public"."access_level_type" DEFAULT 'none'::"public"."access_level_type" NOT NULL,
-    "affiliate_id" "uuid",
-    "granted_by" "uuid",
-    "granted_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "subscription_level" "public"."subscription_level_type" DEFAULT 'basic'::"public"."subscription_level_type",
-    "expires_at" timestamp with time zone,
-    "created_by" "uuid",
-    "updated_by" "uuid",
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "notes" "text",
-    "status" character varying(20) DEFAULT 'active'::character varying,
-    "features_enabled" "jsonb" DEFAULT '{}'::"jsonb",
-    "usage_limits" "jsonb" DEFAULT '{}'::"jsonb",
-    "last_accessed_at" timestamp with time zone,
-    CONSTRAINT "account_tool_access_status_check" CHECK ((("status")::"text" = ANY ((ARRAY['active'::character varying, 'inactive'::character varying, 'expired'::character varying, 'suspended'::character varying])::"text"[]))),
-    CONSTRAINT "check_expiration_future" CHECK ((("expires_at" IS NULL) OR ("expires_at" > "granted_at")))
-);
-
-
-ALTER TABLE "public"."account_tool_access" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."account_tool_access" IS 'Enhanced tool access management with subscription levels, expiration, and feature control';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."subscription_level" IS 'Subscription tier determining feature access level';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."expires_at" IS 'Expiration timestamp for time-limited access (NULL = no expiration)';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."created_by" IS 'Admin user who initially granted the access';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."updated_by" IS 'Admin user who last modified the access';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."status" IS 'Current status of the tool access';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."features_enabled" IS 'JSON object specifying which tool features are enabled';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."usage_limits" IS 'JSON object defining usage limits (API calls, exports, etc.)';
-
-
-
-COMMENT ON COLUMN "public"."account_tool_access"."last_accessed_at" IS 'Timestamp of last tool access for analytics';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."accounts" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "name" "text" NOT NULL,
-    "type" "public"."account_type" NOT NULL,
-    "address" "text",
-    "logo_url" "text",
-    "website_url" "text",
-    "stripe_customer_id" "text",
-    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "status" "public"."account_status" DEFAULT 'active'::"public"."account_status" NOT NULL,
-    "contact_email" "text"
-);
-
-
-ALTER TABLE "public"."accounts" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."accounts" IS 'Central table for all entities: admin, platform, affiliate, client, and expert accounts';
-
-
-
-COMMENT ON COLUMN "public"."accounts"."status" IS 'Account status: active (normal operation), inactive (temporarily disabled), suspended (admin action), deleted (soft deleted)';
-
-
-
-COMMENT ON COLUMN "public"."accounts"."contact_email" IS 'Contact email for Stripe billing and account communications';
-
-
-
-CREATE OR REPLACE VIEW "public"."active_accounts" AS
- SELECT "id",
-    "name",
-    "type",
-    "address",
-    "logo_url",
-    "website_url",
-    "stripe_customer_id",
-    "created_at",
-    "updated_at",
-    "status"
-   FROM "public"."accounts"
-  WHERE ("status" <> 'deleted'::"public"."account_status");
-
-
-ALTER VIEW "public"."active_accounts" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."active_accounts" IS 'View showing only non-deleted accounts';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."profile_roles" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "profile_id" "uuid" NOT NULL,
-    "role_name" character varying(100) NOT NULL,
-    "scope" character varying(50) DEFAULT 'global'::character varying,
-    "scope_id" "uuid",
-    "granted_by" "uuid",
-    "granted_at" timestamp with time zone DEFAULT "now"(),
-    "expires_at" timestamp with time zone,
-    "is_active" boolean DEFAULT true,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_role_name" CHECK ((("role_name")::"text" = ANY ((ARRAY['super_admin'::character varying, 'admin'::character varying, 'affiliate_manager'::character varying, 'affiliate'::character varying, 'client_manager'::character varying, 'client'::character varying, 'expert'::character varying, 'consultant'::character varying, 'tool_admin'::character varying, 'read_only'::character varying, 'guest'::character varying])::"text"[]))),
-    CONSTRAINT "check_role_scope" CHECK ((("scope")::"text" = ANY ((ARRAY['global'::character varying, 'account'::character varying, 'tool'::character varying, 'client'::character varying, 'project'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."profile_roles" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."profile_roles" IS 'Granular role assignments for profiles with scope and expiration support';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."profiles" (
-    "id" "uuid" NOT NULL,
-    "email" "text" NOT NULL,
-    "full_name" "text",
-    "role" "text" DEFAULT 'user'::"text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "avatar_url" "text",
-    "account_id" "uuid" NOT NULL,
-    "theme" "text" DEFAULT 'light'::"text",
-    "notifications_enabled" boolean DEFAULT true,
-    "last_login_at" timestamp with time zone,
-    "login_count" integer DEFAULT 0,
-    "status" character varying DEFAULT 'active'::character varying,
-    "admin_notes" "text",
-    "auth_sync_status" character varying DEFAULT 'synced'::character varying,
-    "auth_sync_last_attempted" timestamp with time zone,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "phone" character varying(20),
-    "timezone" character varying(50) DEFAULT 'UTC'::character varying,
-    "preferences" "jsonb" DEFAULT '{}'::"jsonb",
-    "last_seen_at" timestamp with time zone,
-    "is_verified" boolean DEFAULT false,
-    "verification_token" "text",
-    "password_reset_token" "text",
-    "password_reset_expires_at" timestamp with time zone,
-    "two_factor_enabled" boolean DEFAULT false,
-    "two_factor_secret" "text",
-    "backup_codes" "text"[],
-    "failed_login_attempts" integer DEFAULT 0,
-    "locked_until" timestamp with time zone,
-    CONSTRAINT "check_auth_sync_status" CHECK ((("auth_sync_status")::"text" = ANY ((ARRAY['synced'::character varying, 'pending'::character varying, 'conflict'::character varying, 'error'::character varying, 'requires_attention'::character varying])::"text"[]))),
-    CONSTRAINT "check_failed_login_attempts" CHECK ((("failed_login_attempts" >= 0) AND ("failed_login_attempts" <= 10))),
-    CONSTRAINT "check_profile_status" CHECK ((("status")::"text" = ANY ((ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying, 'pending'::character varying, 'locked'::character varying])::"text"[]))),
-    CONSTRAINT "profiles_theme_check" CHECK (("theme" = ANY (ARRAY['light'::"text", 'dark'::"text", 'system'::"text"])))
-);
-
-
-ALTER TABLE "public"."profiles" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."profiles" IS 'Profiles table - deprecated columns removed in favor of accounts-based system';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."role_definitions" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "role_name" character varying(100) NOT NULL,
-    "display_name" character varying(200) NOT NULL,
-    "description" "text",
-    "is_system_role" boolean DEFAULT false,
-    "default_permissions" "jsonb" DEFAULT '[]'::"jsonb",
-    "role_hierarchy_level" integer DEFAULT 0,
-    "can_assign_roles" character varying(100)[] DEFAULT '{}'::character varying[],
-    "max_scope" character varying(50) DEFAULT 'global'::character varying,
-    "is_active" boolean DEFAULT true,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."role_definitions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."role_definitions" IS 'Role templates and definitions with default permissions and hierarchy';
-
-
-
-CREATE OR REPLACE VIEW "public"."active_profile_roles" AS
- SELECT "pr"."id",
-    "pr"."profile_id",
-    "p"."full_name" AS "profile_name",
-    "p"."email" AS "profile_email",
-    "pr"."role_name",
-    "rd"."display_name" AS "role_display_name",
-    "rd"."description" AS "role_description",
-    "pr"."scope",
-    "pr"."scope_id",
-    "pr"."granted_by",
-    "granted_by_profile"."full_name" AS "granted_by_name",
-    "pr"."granted_at",
-    "pr"."expires_at",
-    "pr"."is_active",
-    "pr"."notes",
-    "pr"."metadata",
-        CASE
-            WHEN ("pr"."expires_at" IS NULL) THEN false
-            WHEN ("pr"."expires_at" <= "now"()) THEN true
-            ELSE false
-        END AS "is_expired",
-        CASE
-            WHEN ("pr"."expires_at" IS NULL) THEN NULL::boolean
-            WHEN ("pr"."expires_at" <= ("now"() + '7 days'::interval)) THEN true
-            ELSE false
-        END AS "expires_soon",
-    "rd"."role_hierarchy_level"
-   FROM ((("public"."profile_roles" "pr"
-     JOIN "public"."profiles" "p" ON (("pr"."profile_id" = "p"."id")))
-     LEFT JOIN "public"."role_definitions" "rd" ON ((("pr"."role_name")::"text" = ("rd"."role_name")::"text")))
-     LEFT JOIN "public"."profiles" "granted_by_profile" ON (("pr"."granted_by" = "granted_by_profile"."id")))
-  WHERE ("pr"."is_active" = true);
-
-
-ALTER VIEW "public"."active_profile_roles" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."active_profile_roles" IS 'Active profile role assignments with full details and computed fields';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."tools" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "name" "text" NOT NULL,
-    "slug" "text" NOT NULL,
-    "description" "text",
-    "status" "text" DEFAULT 'active'::"text" NOT NULL,
-    CONSTRAINT "tools_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'in_development'::"text", 'deprecated'::"text"])))
-);
-
-
-ALTER TABLE "public"."tools" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."tools" IS 'Defines the suite of tax tools offered by the platform.';
-
-
-
-CREATE OR REPLACE VIEW "public"."active_tool_assignments" AS
- SELECT "ata"."account_id",
-    "ata"."tool_id",
-    "a"."name" AS "account_name",
-    "a"."type" AS "account_type",
-    "t"."name" AS "tool_name",
-    "t"."slug" AS "tool_slug",
-    "ata"."access_level",
-    "ata"."subscription_level",
-    "ata"."status",
-    "ata"."expires_at",
-    "ata"."granted_at",
-    "ata"."last_accessed_at",
-    "p_created"."full_name" AS "created_by_name",
-    "p_updated"."full_name" AS "updated_by_name",
-    "ata"."notes",
-    "ata"."features_enabled",
-    "ata"."usage_limits",
-        CASE
-            WHEN ("ata"."expires_at" IS NULL) THEN false
-            WHEN ("ata"."expires_at" <= "now"()) THEN true
-            ELSE false
-        END AS "is_expired",
-        CASE
-            WHEN ("ata"."expires_at" IS NULL) THEN NULL::boolean
-            WHEN ("ata"."expires_at" <= ("now"() + '7 days'::interval)) THEN true
-            ELSE false
-        END AS "expires_soon"
-   FROM (((("public"."account_tool_access" "ata"
-     JOIN "public"."accounts" "a" ON (("ata"."account_id" = "a"."id")))
-     JOIN "public"."tools" "t" ON (("ata"."tool_id" = "t"."id")))
-     LEFT JOIN "public"."profiles" "p_created" ON (("ata"."created_by" = "p_created"."id")))
-     LEFT JOIN "public"."profiles" "p_updated" ON (("ata"."updated_by" = "p_updated"."id")))
-  WHERE (("ata"."status")::"text" = ANY ((ARRAY['active'::character varying, 'expired'::character varying])::"text"[]));
-
-
-ALTER VIEW "public"."active_tool_assignments" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."active_tool_assignments" IS 'Complete view of tool assignments with account, tool, and expiration details';
-
-
-
-CREATE OR REPLACE VIEW "public"."activity_summary_by_type" AS
- SELECT "activity_type",
-    "count"(*) AS "total_count",
-    "count"(DISTINCT "account_id") AS "affected_accounts",
-    "max"("created_at") AS "last_occurrence",
-    "min"("created_at") AS "first_occurrence"
-   FROM "public"."account_activities"
-  WHERE ("created_at" >= ("now"() - '30 days'::interval))
-  GROUP BY "activity_type"
-  ORDER BY ("count"(*)) DESC;
-
-
-ALTER VIEW "public"."activity_summary_by_type" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."activity_summary_by_type" IS 'Summary of activities by type for the last 30 days';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."admin_client_files" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid",
-    "admin_id" "uuid",
-    "affiliate_id" "uuid",
-    "status" "text" DEFAULT 'active'::"text",
-    "created_at" timestamp without time zone DEFAULT "now"(),
-    "updated_at" timestamp without time zone DEFAULT "now"(),
-    "tax_profile_data" "jsonb",
-    "last_calculation_date" timestamp without time zone,
-    "projected_savings" numeric(10,2),
-    "archived" boolean DEFAULT false,
-    "archived_at" timestamp with time zone,
-    "business_id" "uuid",
-    "ordinary_k1_income" numeric(15,2) DEFAULT 0,
-    "guaranteed_k1_income" numeric(15,2) DEFAULT 0,
-    "household_income" numeric(15,2) DEFAULT 0,
-    "business_annual_revenue" numeric(15,2) DEFAULT 0,
-    "email" "text",
-    "full_name" "text",
-    "phone" "text",
-    "filing_status" "text",
-    "dependents" numeric,
-    "home_address" "text",
-    "state" "text",
-    "wages_income" numeric,
-    "passive_income" numeric,
-    "unearned_income" numeric,
-    "capital_gains" numeric,
-    "custom_deduction" numeric,
-    "business_owner" boolean,
-    "business_name" "text",
-    "entity_type" "text",
-    "business_address" "text",
-    "standard_deduction" boolean
-);
-
-
-ALTER TABLE "public"."admin_client_files" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."admin_sessions" (
-    "session_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid",
-    "role" character varying(50) NOT NULL,
-    "permissions" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "last_activity" timestamp with time zone DEFAULT "now"(),
-    "expires_at" timestamp with time zone NOT NULL,
-    "ip_address" "inet",
-    "user_agent" "text",
-    "is_active" boolean DEFAULT true,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb"
-);
-
-
-ALTER TABLE "public"."admin_sessions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."admin_sessions" IS 'Enhanced admin session management with timeout and security tracking';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."affiliate_tool_permissions" (
-    "affiliate_profile_id" "uuid" NOT NULL,
-    "tool_id" "uuid" NOT NULL,
-    "permission_level" "text" NOT NULL,
-    CONSTRAINT "affiliate_tool_permissions_permission_level_check" CHECK (("permission_level" = ANY (ARRAY['full'::"text", 'limited'::"text", 'reporting'::"text", 'none'::"text"])))
-);
-
-
-ALTER TABLE "public"."affiliate_tool_permissions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."affiliate_tool_permissions" IS 'Maps which tools an affiliate can access, as set by their parent partner.';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."affiliates" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "commission_rate" numeric(5,4) DEFAULT 0.10,
-    "territory" "text",
-    "specializations" "text"[],
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
-);
-
-
-ALTER TABLE "public"."affiliates" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."affiliates" IS 'Extension table for affiliate-specific data when account.type = affiliate';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."augusta_rule_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "days_rented" integer DEFAULT 14 NOT NULL,
-    "daily_rate" numeric(10,2) DEFAULT 1500 NOT NULL,
-    "total_rent" numeric(12,2) DEFAULT 21000 NOT NULL,
-    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "rental_dates" "jsonb",
-    "parties_info" "jsonb",
-    "rental_info" "jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."augusta_rule_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."billing_events" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "event_type" character varying(50) NOT NULL,
-    "event_data" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
-    "subscription_id" "uuid",
-    "payment_id" "uuid",
-    "invoice_id" "uuid",
-    "gateway_event_id" character varying(100),
-    "processed" boolean DEFAULT false,
-    "processed_at" timestamp with time zone,
-    "error_message" "text",
-    "retry_count" integer DEFAULT 0,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_billing_event_type" CHECK ((("event_type")::"text" = ANY ((ARRAY['subscription_created'::character varying, 'subscription_updated'::character varying, 'subscription_canceled'::character varying, 'payment_succeeded'::character varying, 'payment_failed'::character varying, 'payment_refunded'::character varying, 'invoice_created'::character varying, 'invoice_paid'::character varying, 'invoice_payment_failed'::character varying, 'customer_created'::character varying, 'customer_updated'::character varying, 'payment_method_attached'::character varying, 'trial_will_end'::character varying, 'subscription_will_renew'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."billing_events" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."billing_events" IS 'Billing system events and webhook processing queue';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."billing_invoices" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "subscription_id" "uuid",
-    "invoice_number" character varying(50) NOT NULL,
-    "status" character varying(20) DEFAULT 'draft'::character varying,
-    "subtotal_cents" integer DEFAULT 0 NOT NULL,
-    "tax_cents" integer DEFAULT 0,
-    "discount_cents" integer DEFAULT 0,
-    "total_cents" integer DEFAULT 0 NOT NULL,
-    "currency" character varying(3) DEFAULT 'USD'::character varying,
-    "due_date" "date",
-    "paid_at" timestamp with time zone,
-    "billing_period_start" "date",
-    "billing_period_end" "date",
-    "billing_address" "jsonb" DEFAULT '{}'::"jsonb",
-    "notes" "text",
-    "pdf_url" "text",
-    "stripe_invoice_id" character varying(100),
-    "square_invoice_id" character varying(100),
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_billing_invoice_status" CHECK ((("status")::"text" = ANY ((ARRAY['draft'::character varying, 'open'::character varying, 'paid'::character varying, 'void'::character varying, 'uncollectible'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."billing_invoices" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."billing_invoices" IS 'Invoice records with billing details and PDF generation';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."bulk_operation_results" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "bulk_operation_id" "uuid" NOT NULL,
-    "target_profile_id" "uuid" NOT NULL,
-    "sequence_number" integer NOT NULL,
-    "status" character varying(20) DEFAULT 'pending'::character varying NOT NULL,
-    "started_at" timestamp with time zone,
-    "completed_at" timestamp with time zone,
-    "duration_ms" integer,
-    "success" boolean,
-    "result_data" "jsonb" DEFAULT '{}'::"jsonb",
-    "error_message" "text",
-    "error_code" character varying(50),
-    "retry_count" integer DEFAULT 0,
-    "rollback_data" "jsonb" DEFAULT '{}'::"jsonb",
-    "rolled_back" boolean DEFAULT false,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_bulk_result_status" CHECK ((("status")::"text" = ANY ((ARRAY['pending'::character varying, 'running'::character varying, 'completed'::character varying, 'failed'::character varying, 'skipped'::character varying, 'rolled_back'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."bulk_operation_results" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."bulk_operation_results" IS 'Detailed results for individual profile operations within bulk operations';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."bulk_operations" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "operation_type" character varying(50) NOT NULL,
-    "operation_name" character varying(200) NOT NULL,
-    "initiated_by" "uuid",
-    "target_profile_ids" "uuid"[] NOT NULL,
-    "operation_data" "jsonb" DEFAULT '{}'::"jsonb",
-    "total_targets" integer NOT NULL,
-    "processed_count" integer DEFAULT 0,
-    "success_count" integer DEFAULT 0,
-    "failed_count" integer DEFAULT 0,
-    "status" character varying(20) DEFAULT 'pending'::character varying,
-    "progress_percentage" numeric(5,2) DEFAULT 0.00,
-    "started_at" timestamp with time zone,
-    "completed_at" timestamp with time zone,
-    "estimated_completion_at" timestamp with time zone,
-    "results" "jsonb" DEFAULT '[]'::"jsonb",
-    "errors" "jsonb" DEFAULT '[]'::"jsonb",
-    "rollback_data" "jsonb" DEFAULT '{}'::"jsonb",
-    "can_rollback" boolean DEFAULT false,
-    "rolled_back_at" timestamp with time zone,
-    "rollback_reason" "text",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_bulk_operation_status" CHECK ((("status")::"text" = ANY ((ARRAY['pending'::character varying, 'running'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying, 'rolled_back'::character varying])::"text"[]))),
-    CONSTRAINT "check_bulk_operation_type" CHECK ((("operation_type")::"text" = ANY ((ARRAY['update_status'::character varying, 'assign_role'::character varying, 'revoke_role'::character varying, 'grant_permission'::character varying, 'revoke_permission'::character varying, 'sync_auth'::character varying, 'verify_email'::character varying, 'reset_password'::character varying, 'update_metadata'::character varying, 'merge_profiles'::character varying, 'archive_profiles'::character varying, 'transfer_ownership'::character varying, 'bulk_invite'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."bulk_operations" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."bulk_operations" IS 'Tracking and management for bulk profile operations';
-
-
-
-CREATE OR REPLACE VIEW "public"."bulk_operation_summaries" AS
- SELECT "bo"."id",
-    "bo"."operation_type",
-    "bo"."operation_name",
-    "bo"."status",
-    "bo"."total_targets",
-    "bo"."processed_count",
-    "bo"."success_count",
-    "bo"."failed_count",
-    "bo"."progress_percentage",
-    "bo"."can_rollback",
-    "bo"."created_at",
-    "bo"."started_at",
-    "bo"."completed_at",
-    "bo"."estimated_completion_at",
-    "p"."full_name" AS "initiated_by_name",
-    "p"."email" AS "initiated_by_email",
-        CASE
-            WHEN ("bo"."completed_at" IS NOT NULL) THEN (EXTRACT(epoch FROM ("bo"."completed_at" - "bo"."started_at")))::integer
-            WHEN ("bo"."started_at" IS NOT NULL) THEN (EXTRACT(epoch FROM ("now"() - "bo"."started_at")))::integer
-            ELSE NULL::integer
-        END AS "duration_seconds",
-        CASE
-            WHEN ((("bo"."status")::"text" = 'completed'::"text") AND ("bo"."failed_count" = 0)) THEN 'success'::character varying
-            WHEN ((("bo"."status")::"text" = 'completed'::"text") AND ("bo"."failed_count" > 0)) THEN 'partial'::character varying
-            WHEN (("bo"."status")::"text" = 'failed'::"text") THEN 'failed'::character varying
-            WHEN (("bo"."status")::"text" = 'rolled_back'::"text") THEN 'rolled_back'::character varying
-            ELSE "bo"."status"
-        END AS "overall_status"
-   FROM ("public"."bulk_operations" "bo"
-     LEFT JOIN "public"."profiles" "p" ON (("bo"."initiated_by" = "p"."id")));
-
-
-ALTER VIEW "public"."bulk_operation_summaries" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."bulk_operation_summaries" IS 'Summary view for bulk operations with computed fields';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."business_years" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "is_active" boolean DEFAULT true,
-    "ordinary_k1_income" numeric(12,2) DEFAULT 0,
-    "guaranteed_k1_income" numeric(12,2) DEFAULT 0,
-    "annual_revenue" numeric(15,2) DEFAULT 0,
-    "employee_count" integer DEFAULT 0,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."business_years" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."businesses" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "business_name" character varying(255) NOT NULL,
-    "entity_type" character varying(50) DEFAULT 'LLC'::character varying NOT NULL,
-    "ein" character varying(20),
-    "business_address" "text",
-    "business_city" character varying(100),
-    "business_state" character varying(2),
-    "business_zip" character varying(10),
-    "business_phone" character varying(50),
-    "business_email" character varying(255),
-    "industry" character varying(100),
-    "year_established" integer,
-    "annual_revenue" numeric(15,2) DEFAULT 0,
-    "employee_count" integer DEFAULT 0,
-    "is_active" boolean DEFAULT true,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."businesses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."calculations" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "date" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "tax_info" "jsonb" NOT NULL,
-    "breakdown" "jsonb" NOT NULL,
-    "strategies" "jsonb"[],
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
-);
-
-
-ALTER TABLE "public"."calculations" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."centralized_businesses" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "business_name" "text" NOT NULL,
-    "entity_type" "text" NOT NULL,
-    "ein" "text",
-    "business_address" "text",
-    "business_city" "text",
-    "business_state" "text",
-    "business_zip" "text",
-    "business_phone" "text",
-    "business_email" "text",
-    "industry" "text",
-    "year_established" integer,
-    "annual_revenue" numeric(15,2),
-    "employee_count" integer,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "centralized_businesses_entity_type_check" CHECK (("entity_type" = ANY (ARRAY['LLC'::"text", 'S-Corp'::"text", 'C-Corp'::"text", 'Partnership'::"text", 'Sole Proprietorship'::"text", 'Other'::"text"])))
-);
-
-
-ALTER TABLE "public"."centralized_businesses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."charitable_donation_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "donation_amount" numeric(12,2) DEFAULT 0 NOT NULL,
-    "fmv_multiplier" numeric(5,2) DEFAULT 5.0 NOT NULL,
-    "agi_limit" numeric(3,2) DEFAULT 0.6 NOT NULL,
-    "deduction_value" numeric(12,2) DEFAULT 0 NOT NULL,
-    "federal_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "state_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."charitable_donation_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."client_activities" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "user_id" "uuid",
-    "activity_type" "public"."activity_type" NOT NULL,
-    "title" "text" NOT NULL,
-    "description" "text",
-    "priority" "public"."activity_priority" DEFAULT 'medium'::"public"."activity_priority",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "is_read" boolean DEFAULT false,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."client_activities" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."client_activities" IS 'Tracks all client activities for dashboard display and audit purposes';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."client_dashboard_metrics" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "metric_type" "text" NOT NULL,
-    "metric_value" numeric,
-    "metric_data" "jsonb" DEFAULT '{}'::"jsonb",
-    "calculated_at" timestamp with time zone DEFAULT "now"(),
-    "expires_at" timestamp with time zone,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."client_dashboard_metrics" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."client_dashboard_metrics" IS 'Cached dashboard metrics for performance optimization';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."client_engagement_status" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "status" "public"."engagement_status" DEFAULT 'active'::"public"."engagement_status" NOT NULL,
-    "last_activity_at" timestamp with time zone,
-    "last_login_at" timestamp with time zone,
-    "total_activities" integer DEFAULT 0,
-    "pending_actions" integer DEFAULT 0,
-    "completion_percentage" numeric(5,2) DEFAULT 0.00,
-    "next_action_due" timestamp with time zone,
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."client_engagement_status" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."client_engagement_status" IS 'Maintains current engagement status and metrics for each client';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."clients" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "full_name" character varying(255) NOT NULL,
-    "email" character varying(255) NOT NULL,
-    "phone" character varying(50),
-    "filing_status" character varying(50) DEFAULT 'single'::character varying NOT NULL,
-    "home_address" "text",
-    "state" character varying(2),
-    "dependents" integer DEFAULT 0,
-    "standard_deduction" boolean DEFAULT true,
-    "custom_deduction" numeric(12,2) DEFAULT 0,
-    "created_by" "uuid",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "archived" boolean DEFAULT false,
-    "archived_at" timestamp with time zone,
-    "city" "text",
-    "zip_code" "text",
-    "account_id" "uuid",
-    "primary_affiliate_id" "uuid",
-    "has_completed_tax_profile" boolean DEFAULT false
-);
-
-
-ALTER TABLE "public"."clients" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."clients" IS 'Clients table cleaned up - removed affiliate_id, user_id, partner_id columns. Client relationships now managed through client_users junction table and accounts table.';
-
-
-
-CREATE OR REPLACE VIEW "public"."client_dashboard_summary" AS
- SELECT "c"."id",
-    "c"."full_name",
-    "c"."email",
-    "ces"."status" AS "engagement_status",
-    "ces"."last_activity_at",
-    "ces"."last_login_at",
-    "ces"."total_activities",
-    "ces"."pending_actions",
-    "ces"."completion_percentage",
-    "ces"."next_action_due",
-    "count"("ca"."id") AS "recent_activities_count",
-    "count"(
-        CASE
-            WHEN ("ca"."is_read" = false) THEN 1
-            ELSE NULL::integer
-        END) AS "unread_activities_count"
-   FROM (("public"."clients" "c"
-     LEFT JOIN "public"."client_engagement_status" "ces" ON (("c"."id" = "ces"."client_id")))
-     LEFT JOIN "public"."client_activities" "ca" ON ((("c"."id" = "ca"."client_id") AND ("ca"."created_at" >= ("now"() - '7 days'::interval)))))
-  GROUP BY "c"."id", "c"."full_name", "c"."email", "ces"."status", "ces"."last_activity_at", "ces"."last_login_at", "ces"."total_activities", "ces"."pending_actions", "ces"."completion_percentage", "ces"."next_action_due";
-
-
-ALTER VIEW "public"."client_dashboard_summary" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."client_users" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "role" "public"."client_role" DEFAULT 'member'::"public"."client_role" NOT NULL,
-    "invited_by" "uuid",
-    "invited_at" timestamp with time zone DEFAULT "now"(),
-    "accepted_at" timestamp with time zone,
-    "is_active" boolean DEFAULT true NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "valid_role" CHECK (("role" = ANY (ARRAY['owner'::"public"."client_role", 'member'::"public"."client_role", 'viewer'::"public"."client_role", 'accountant'::"public"."client_role"])))
-);
-
-
-ALTER TABLE "public"."client_users" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."client_users" IS 'Links users (profiles) to client accounts, allowing multiple users per client.';
-
-
-
-COMMENT ON COLUMN "public"."client_users"."role" IS 'User role for this client: owner (full access), member (standard), viewer (read-only), accountant (professional)';
-
-
-
-COMMENT ON COLUMN "public"."client_users"."invited_by" IS 'User who invited this user to the client';
-
-
-
-COMMENT ON COLUMN "public"."client_users"."invited_at" IS 'When the invitation was sent';
-
-
-
-COMMENT ON COLUMN "public"."client_users"."accepted_at" IS 'When the user accepted the invitation';
-
-
-
-COMMENT ON COLUMN "public"."client_users"."is_active" IS 'Whether this user relationship is currently active';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."commission_transactions" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "proposal_id" "uuid" NOT NULL,
-    "affiliate_id" "uuid",
-    "expert_id" "uuid",
-    "transaction_type" "text" NOT NULL,
-    "amount" numeric(12,2) NOT NULL,
-    "currency" "text" DEFAULT 'USD'::"text",
-    "transaction_date" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "payment_method" "text",
-    "reference_number" "text",
-    "status" "text" DEFAULT 'pending'::"text",
-    "notes" "text",
-    "created_by" "uuid",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    CONSTRAINT "commission_transactions_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'processing'::"text", 'completed'::"text", 'failed'::"text", 'cancelled'::"text"]))),
-    CONSTRAINT "commission_transactions_transaction_type_check" CHECK (("transaction_type" = ANY (ARRAY['expert_payment_received'::"text", 'affiliate_payment_due'::"text", 'affiliate_payment_sent'::"text", 'admin_commission'::"text"])))
-);
-
-
-ALTER TABLE "public"."commission_transactions" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."contractor_expenses" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid",
-    "contractor_name" "text",
-    "amount" numeric,
-    "description" "text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
-);
-
-
-ALTER TABLE "public"."contractor_expenses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."convertible_tax_bonds_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "ctb_payment" numeric(12,2) DEFAULT 0 NOT NULL,
-    "ctb_tax_offset" numeric(12,2) DEFAULT 0 NOT NULL,
-    "net_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "remaining_tax_after_ctb" numeric(12,2) DEFAULT 0 NOT NULL,
-    "reduction_ratio" numeric(5,4) DEFAULT 0.75 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."convertible_tax_bonds_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."cost_segregation_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "property_value" numeric(12,2) DEFAULT 0 NOT NULL,
-    "land_value" numeric(12,2) DEFAULT 0 NOT NULL,
-    "improvement_value" numeric(12,2) DEFAULT 0 NOT NULL,
-    "bonus_depreciation_rate" numeric(5,4) DEFAULT 0.8 NOT NULL,
-    "year_acquired" integer DEFAULT 2024 NOT NULL,
-    "current_year_deduction" numeric(12,2) DEFAULT 0 NOT NULL,
-    "years_2_to_5_annual" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."cost_segregation_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."tool_usage_logs" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "tool_id" "uuid" NOT NULL,
-    "profile_id" "uuid",
-    "session_id" "text",
-    "action" character varying(100) NOT NULL,
-    "feature_used" character varying(100),
-    "duration_seconds" integer,
-    "data_volume_mb" numeric(10,2),
-    "success" boolean DEFAULT true,
-    "error_code" character varying(50),
-    "error_message" "text",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "ip_address" "inet",
-    "user_agent" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "tool_usage_logs_action_check" CHECK ((("action")::"text" = ANY ((ARRAY['tool_access'::character varying, 'feature_use'::character varying, 'calculation_run'::character varying, 'data_export'::character varying, 'document_upload'::character varying, 'report_generation'::character varying, 'api_call'::character varying, 'bulk_operation'::character varying, 'template_use'::character varying, 'collaboration_action'::character varying, 'workflow_step'::character varying, 'integration_sync'::character varying])::"text"[]))),
-    CONSTRAINT "tool_usage_logs_data_volume_mb_check" CHECK (("data_volume_mb" >= (0)::numeric)),
-    CONSTRAINT "tool_usage_logs_duration_seconds_check" CHECK (("duration_seconds" >= 0))
-);
-
-
-ALTER TABLE "public"."tool_usage_logs" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."tool_usage_logs" IS 'Comprehensive tracking of tool usage for analytics, billing, and optimization';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."account_id" IS 'Account that owns the tool access';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."tool_id" IS 'Tool that was accessed or used';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."profile_id" IS 'User who performed the action (NULL for system actions)';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."action" IS 'Type of action performed with the tool';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."feature_used" IS 'Specific feature within the tool that was used';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."duration_seconds" IS 'Duration of the session or action in seconds';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."data_volume_mb" IS 'Amount of data processed in megabytes';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."success" IS 'Whether the action completed successfully';
-
-
-
-COMMENT ON COLUMN "public"."tool_usage_logs"."metadata" IS 'Additional context data for the usage event';
-
-
-
-CREATE MATERIALIZED VIEW "public"."daily_usage_summary" AS
- SELECT "date_trunc"('day'::"text", "tul"."created_at") AS "usage_date",
-    "tul"."tool_id",
-    "t"."name" AS "tool_name",
-    "t"."slug" AS "tool_slug",
-    "count"(*) AS "total_events",
-    "count"(DISTINCT "tul"."account_id") AS "unique_accounts",
-    "count"(DISTINCT "tul"."profile_id") AS "unique_users",
-    "avg"("tul"."duration_seconds") AS "avg_duration_seconds",
-    "sum"("tul"."data_volume_mb") AS "total_data_volume_mb",
-    "count"(*) FILTER (WHERE ("tul"."success" = false)) AS "failed_events",
-    "count"(*) FILTER (WHERE ("tul"."success" = true)) AS "successful_events"
-   FROM ("public"."tool_usage_logs" "tul"
-     JOIN "public"."tools" "t" ON (("tul"."tool_id" = "t"."id")))
-  WHERE ("tul"."created_at" >= ("now"() - '365 days'::interval))
-  GROUP BY ("date_trunc"('day'::"text", "tul"."created_at")), "tul"."tool_id", "t"."name", "t"."slug"
-  ORDER BY ("date_trunc"('day'::"text", "tul"."created_at")) DESC, ("count"(*)) DESC
-  WITH NO DATA;
-
-
-ALTER MATERIALIZED VIEW "public"."daily_usage_summary" OWNER TO "postgres";
-
-
-COMMENT ON MATERIALIZED VIEW "public"."daily_usage_summary" IS 'Pre-computed daily usage statistics for improved analytics performance';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_access_logs" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "document_id" "uuid" NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "user_id" "uuid",
-    "share_id" "uuid",
-    "action" character varying(50) NOT NULL,
-    "ip_address" "inet",
-    "user_agent" "text",
-    "device_info" "jsonb",
-    "country" character varying(2),
-    "region" character varying(100),
-    "city" character varying(100),
-    "session_id" character varying(255),
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "valid_action" CHECK ((("action")::"text" = ANY ((ARRAY['view'::character varying, 'download'::character varying, 'share'::character varying, 'edit'::character varying, 'delete'::character varying, 'upload'::character varying, 'preview'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."document_access_logs" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_access_logs" IS 'Comprehensive audit trail for document access';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_comments" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "document_id" "uuid" NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "comment" "text" NOT NULL,
-    "comment_type" character varying(20) DEFAULT 'general'::character varying,
-    "parent_comment_id" "uuid",
-    "thread_level" integer DEFAULT 0,
-    "is_resolved" boolean DEFAULT false,
-    "resolved_by" "uuid",
-    "resolved_at" timestamp with time zone,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "valid_comment_type" CHECK ((("comment_type")::"text" = ANY ((ARRAY['general'::character varying, 'review'::character varying, 'approval'::character varying, 'question'::character varying, 'issue'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."document_comments" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_comments" IS 'Threaded commenting system for document collaboration';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_files" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "folder_id" "uuid",
-    "original_name" character varying(255) NOT NULL,
-    "file_name" character varying(255) NOT NULL,
-    "file_size" bigint NOT NULL,
-    "mime_type" character varying(100) NOT NULL,
-    "file_extension" character varying(10) NOT NULL,
-    "storage_path" "text" NOT NULL,
-    "storage_bucket" character varying(100) DEFAULT 'client-documents'::character varying NOT NULL,
-    "checksum" character varying(64) NOT NULL,
-    "encryption_key_id" "uuid",
-    "document_type" character varying(50) DEFAULT 'general'::character varying,
-    "tax_year" integer,
-    "category" character varying(100),
-    "tags" "text"[],
-    "access_level" character varying(20) DEFAULT 'private'::character varying,
-    "password_protected" boolean DEFAULT false,
-    "version_number" integer DEFAULT 1,
-    "is_current_version" boolean DEFAULT true,
-    "parent_version_id" "uuid",
-    "uploaded_by" "uuid" NOT NULL,
-    "uploaded_at" timestamp with time zone DEFAULT "now"(),
-    "last_accessed_at" timestamp with time zone,
-    "access_count" integer DEFAULT 0,
-    "processing_status" character varying(20) DEFAULT 'pending'::character varying,
-    "virus_scan_status" character varying(20) DEFAULT 'pending'::character varying,
-    "virus_scan_result" "jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "valid_access_level" CHECK ((("access_level")::"text" = ANY ((ARRAY['private'::character varying, 'shared'::character varying, 'public'::character varying])::"text"[]))),
-    CONSTRAINT "valid_document_type" CHECK ((("document_type")::"text" = ANY ((ARRAY['general'::character varying, 'tax_document'::character varying, 'financial_statement'::character varying, 'contract'::character varying, 'invoice'::character varying, 'receipt'::character varying, 'bank_statement'::character varying, 'w2'::character varying, '1099'::character varying, 'k1'::character varying, 'other'::character varying])::"text"[]))),
-    CONSTRAINT "valid_processing_status" CHECK ((("processing_status")::"text" = ANY ((ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying])::"text"[]))),
-    CONSTRAINT "valid_virus_scan_status" CHECK ((("virus_scan_status")::"text" = ANY ((ARRAY['pending'::character varying, 'scanning'::character varying, 'clean'::character varying, 'infected'::character varying, 'error'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."document_files" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_files" IS 'Main document storage table with metadata, versioning, and security';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_folders" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "parent_folder_id" "uuid",
-    "name" character varying(255) NOT NULL,
-    "path" "text" NOT NULL,
-    "created_by" "uuid" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."document_folders" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_folders" IS 'Hierarchical folder structure for organizing client documents';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_processing_jobs" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "document_id" "uuid" NOT NULL,
-    "job_type" character varying(50) NOT NULL,
-    "status" character varying(20) DEFAULT 'pending'::character varying,
-    "input_data" "jsonb",
-    "output_data" "jsonb",
-    "error_message" "text",
-    "started_at" timestamp with time zone,
-    "completed_at" timestamp with time zone,
-    "processing_time_ms" integer,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "valid_job_status" CHECK ((("status")::"text" = ANY ((ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying])::"text"[]))),
-    CONSTRAINT "valid_job_type" CHECK ((("job_type")::"text" = ANY ((ARRAY['virus_scan'::character varying, 'thumbnail_generation'::character varying, 'text_extraction'::character varying, 'pdf_processing'::character varying, 'image_optimization'::character varying, 'metadata_extraction'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."document_processing_jobs" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_processing_jobs" IS 'Asynchronous processing jobs for documents';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_shares" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "document_id" "uuid" NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "shared_with_user_id" "uuid",
-    "shared_with_email" character varying(255),
-    "share_type" character varying(20) DEFAULT 'view'::character varying NOT NULL,
-    "expires_at" timestamp with time zone,
-    "password_hash" character varying(255),
-    "max_downloads" integer,
-    "download_count" integer DEFAULT 0,
-    "share_token" character varying(255),
-    "is_public_link" boolean DEFAULT false,
-    "can_view" boolean DEFAULT true,
-    "can_download" boolean DEFAULT true,
-    "can_comment" boolean DEFAULT false,
-    "can_edit" boolean DEFAULT false,
-    "created_by" "uuid" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "last_accessed_at" timestamp with time zone,
-    "revoked_at" timestamp with time zone,
-    "revoked_by" "uuid",
-    CONSTRAINT "share_recipient_required" CHECK ((("shared_with_user_id" IS NOT NULL) OR ("shared_with_email" IS NOT NULL) OR ("is_public_link" = true))),
-    CONSTRAINT "valid_share_type" CHECK ((("share_type")::"text" = ANY ((ARRAY['view'::character varying, 'edit'::character varying, 'comment'::character varying, 'download'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."document_shares" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_shares" IS 'Document sharing and access control system';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."document_versions" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "document_id" "uuid" NOT NULL,
-    "version_number" integer NOT NULL,
-    "change_description" "text",
-    "storage_path" "text" NOT NULL,
-    "file_size" bigint NOT NULL,
-    "checksum" character varying(64) NOT NULL,
-    "created_by" "uuid" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."document_versions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."document_versions" IS 'Version history for document files';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."drf_tmp_test" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
-);
-
-
-ALTER TABLE "public"."drf_tmp_test" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."employees" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid",
-    "name" "text",
-    "role" "text",
-    "salary" numeric,
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
-);
-
-
-ALTER TABLE "public"."employees" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."experts" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "name" "text" NOT NULL,
-    "email" "text" NOT NULL,
-    "phone" "text",
-    "company" "text",
-    "specialties" "text"[] DEFAULT '{}'::"text"[],
-    "current_workload" integer DEFAULT 0,
-    "max_capacity" integer DEFAULT 10,
-    "commission_rate" numeric(5,4) DEFAULT 0.10,
-    "is_active" boolean DEFAULT true,
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "account_id" "uuid"
-);
-
-
-ALTER TABLE "public"."experts" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."family_management_company_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "members" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
-    "total_salaries" numeric(12,2) DEFAULT 0 NOT NULL,
-    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."family_management_company_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."feature_usage_tracking" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "profile_id" "uuid" NOT NULL,
-    "feature_name" character varying(100) NOT NULL,
-    "feature_category" character varying(50) NOT NULL,
-    "usage_count" integer DEFAULT 1,
-    "first_used_at" timestamp with time zone DEFAULT "now"(),
-    "last_used_at" timestamp with time zone DEFAULT "now"(),
-    "usage_metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."feature_usage_tracking" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."feature_usage_tracking" IS 'Track feature adoption and usage patterns';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."hire_children_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "children" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
-    "total_salaries" numeric(12,2) DEFAULT 0 NOT NULL,
-    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."hire_children_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."invitations" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "invited_by" "uuid" NOT NULL,
-    "email" character varying(255) NOT NULL,
-    "role" "public"."client_role" DEFAULT 'member'::"public"."client_role" NOT NULL,
-    "token" character varying(255) NOT NULL,
-    "status" character varying(20) DEFAULT 'pending'::character varying NOT NULL,
-    "expires_at" timestamp with time zone DEFAULT ("now"() + '48:00:00'::interval) NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "accepted_at" timestamp with time zone,
-    "accepted_by" "uuid",
-    "message" "text",
-    "resent_count" integer DEFAULT 0,
-    "last_resent_at" timestamp with time zone,
-    CONSTRAINT "invitations_status_check" CHECK ((("status")::"text" = ANY ((ARRAY['pending'::character varying, 'accepted'::character varying, 'expired'::character varying, 'cancelled'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."invitations" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."invoice_line_items" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "invoice_id" "uuid" NOT NULL,
-    "description" "text" NOT NULL,
-    "quantity" integer DEFAULT 1,
-    "unit_price_cents" integer NOT NULL,
-    "total_cents" integer NOT NULL,
-    "period_start" "date",
-    "period_end" "date",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."invoice_line_items" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."invoice_line_items" IS 'Individual line items for invoice billing details';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."invoices" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "partner_id" "uuid" NOT NULL,
-    "status" "text" DEFAULT 'due'::"text" NOT NULL,
-    "total_amount" numeric(10,2) NOT NULL,
-    "due_date" "date" NOT NULL,
-    "stripe_invoice_id" "text",
-    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    CONSTRAINT "invoices_status_check" CHECK (("status" = ANY (ARRAY['due'::"text", 'paid'::"text", 'overdue'::"text", 'cancelled'::"text"])))
-);
-
-
-ALTER TABLE "public"."invoices" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."invoices" IS 'Stores invoices generated from transactions for partners.';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."leads" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "user_id" "uuid",
-    "name" "text" NOT NULL,
-    "email" "text",
-    "phone" "text",
-    "status" "text" DEFAULT 'new'::"text",
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."leads" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."login_attempts" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "email" character varying(255),
-    "ip_address" "inet" NOT NULL,
-    "success" boolean NOT NULL,
-    "attempted_at" timestamp with time zone DEFAULT "now"(),
-    "user_agent" "text",
-    "failure_reason" "text",
-    "blocked" boolean DEFAULT false
-);
-
-
-ALTER TABLE "public"."login_attempts" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."login_attempts" IS 'Login attempt tracking for brute force protection';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."mfa_settings" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid",
-    "enabled" boolean DEFAULT false,
-    "method" character varying(50),
-    "secret_key" "text",
-    "backup_codes" "text"[],
-    "phone_number" character varying(20),
-    "verified" boolean DEFAULT false,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "last_used" timestamp with time zone,
-    CONSTRAINT "mfa_settings_method_check" CHECK ((("method")::"text" = ANY ((ARRAY['totp'::character varying, 'sms'::character varying, 'email'::character varying, 'hardware_key'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."mfa_settings" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."mfa_settings" IS 'Multi-factor authentication settings for enhanced security';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."payment_methods" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "method_type" character varying(20) NOT NULL,
-    "is_default" boolean DEFAULT false,
-    "stripe_payment_method_id" character varying(100),
-    "square_card_id" character varying(100),
-    "last_four" character varying(4),
-    "brand" character varying(20),
-    "exp_month" integer,
-    "exp_year" integer,
-    "billing_address" "jsonb" DEFAULT '{}'::"jsonb",
-    "is_active" boolean DEFAULT true,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_payment_method_type" CHECK ((("method_type")::"text" = ANY ((ARRAY['card'::character varying, 'bank_account'::character varying, 'paypal'::character varying, 'apple_pay'::character varying, 'google_pay'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."payment_methods" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."payment_methods" IS 'Customer payment methods with secure tokenized storage';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."payments" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "subscription_id" "uuid",
-    "invoice_id" "uuid",
-    "payment_method_id" "uuid",
-    "amount_cents" integer NOT NULL,
-    "currency" character varying(3) DEFAULT 'USD'::character varying,
-    "status" character varying(20) DEFAULT 'pending'::character varying,
-    "payment_type" character varying(20) DEFAULT 'subscription'::character varying,
-    "description" "text",
-    "stripe_payment_intent_id" character varying(100),
-    "stripe_charge_id" character varying(100),
-    "square_payment_id" character varying(100),
-    "gateway_response" "jsonb" DEFAULT '{}'::"jsonb",
-    "failure_reason" "text",
-    "processed_at" timestamp with time zone,
-    "refunded_at" timestamp with time zone,
-    "refund_amount_cents" integer DEFAULT 0,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_payment_status" CHECK ((("status")::"text" = ANY ((ARRAY['pending'::character varying, 'processing'::character varying, 'succeeded'::character varying, 'failed'::character varying, 'canceled'::character varying, 'refunded'::character varying, 'partially_refunded'::character varying])::"text"[]))),
-    CONSTRAINT "check_payment_type" CHECK ((("payment_type")::"text" = ANY ((ARRAY['subscription'::character varying, 'invoice'::character varying, 'one_time'::character varying, 'setup'::character varying, 'refund'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."payments" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."payments" IS 'Payment transaction records with gateway tracking';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."performance_metrics" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "metric_timestamp" timestamp with time zone DEFAULT "now"(),
-    "endpoint" character varying(200),
-    "operation_type" character varying(50),
-    "response_time_ms" integer,
-    "status_code" integer,
-    "error_message" "text",
-    "profile_id" "uuid",
-    "account_id" "uuid",
-    "request_metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."performance_metrics" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."performance_metrics" IS 'API and operation performance tracking';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."personal_years" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "wages_income" numeric(12,2) DEFAULT 0,
-    "passive_income" numeric(12,2) DEFAULT 0,
-    "unearned_income" numeric(12,2) DEFAULT 0,
-    "capital_gains" numeric(12,2) DEFAULT 0,
-    "long_term_capital_gains" numeric(12,2) DEFAULT 0,
-    "household_income" numeric(12,2) DEFAULT 0,
-    "ordinary_income" numeric(12,2) DEFAULT 0,
-    "is_active" boolean DEFAULT true,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."personal_years" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."platform_usage_metrics" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "metric_date" "date" NOT NULL,
-    "metric_hour" integer DEFAULT 0,
-    "metric_type" character varying(50) NOT NULL,
-    "metric_name" character varying(100) NOT NULL,
-    "metric_value" numeric DEFAULT 0 NOT NULL,
-    "dimensions" "jsonb" DEFAULT '{}'::"jsonb",
-    "account_id" "uuid",
-    "tool_id" "uuid",
-    "profile_id" "uuid",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "platform_usage_metrics_metric_hour_check" CHECK ((("metric_hour" >= 0) AND ("metric_hour" <= 23)))
-);
-
-
-ALTER TABLE "public"."platform_usage_metrics" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."platform_usage_metrics" IS 'Aggregated platform usage metrics for analytics';
-
-
-
-CREATE OR REPLACE VIEW "public"."profile_activity_monitoring" AS
- SELECT "aa"."id",
-    "aa"."actor_id" AS "profile_id",
-    "p"."full_name" AS "profile_name",
-    "p"."email" AS "profile_email",
-    "p"."role" AS "profile_role",
-    "aa"."activity_type",
-    "aa"."target_type",
-    "aa"."target_id",
-    "aa"."description",
-    "aa"."metadata",
-    "aa"."ip_address",
-    "aa"."user_agent",
-    "aa"."session_id",
-    "aa"."created_at",
-        CASE
-            WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-            WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-            WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-            ELSE true
-        END AS "success",
-    ("aa"."metadata" ->> 'error_details'::"text") AS "error_details",
-    COALESCE((("aa"."metadata" ->> 'duration_ms'::"text"))::integer, NULL::integer) AS "duration_ms",
-        CASE
-            WHEN ("aa"."created_at" >= ("now"() - '01:00:00'::interval)) THEN 'recent'::"text"
-            WHEN ("aa"."created_at" >= ("now"() - '24:00:00'::interval)) THEN 'today'::"text"
-            WHEN ("aa"."created_at" >= ("now"() - '7 days'::interval)) THEN 'this_week'::"text"
-            WHEN ("aa"."created_at" >= ("now"() - '30 days'::interval)) THEN 'this_month'::"text"
-            ELSE 'older'::"text"
-        END AS "time_category",
-        CASE
-            WHEN (("aa"."activity_type")::"text" = ANY ((ARRAY['login'::character varying, 'logout'::character varying, 'password_reset'::character varying])::"text"[])) THEN 'authentication'::"text"
-            WHEN (("aa"."activity_type")::"text" = ANY ((ARRAY['profile_created'::character varying, 'profile_updated'::character varying, 'profile_deleted'::character varying])::"text"[])) THEN 'profile_management'::"text"
-            WHEN (("aa"."activity_type")::"text" = ANY ((ARRAY['role_assigned'::character varying, 'role_removed'::character varying, 'permission_granted'::character varying, 'permission_revoked'::character varying])::"text"[])) THEN 'access_control'::"text"
-            WHEN (("aa"."activity_type")::"text" = ANY ((ARRAY['bulk_operation'::character varying, 'profile_sync_failed'::character varying, 'sync_conflict_resolved'::character varying])::"text"[])) THEN 'system_operations'::"text"
-            ELSE 'other'::"text"
-        END AS "activity_category",
-        CASE
-            WHEN (
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = true) THEN 'success'::"text"
-            WHEN ((
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = false) AND (("aa"."metadata" ->> 'error_details'::"text") IS NOT NULL)) THEN 'error'::"text"
-            WHEN (
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = false) THEN 'failed'::"text"
-            ELSE 'unknown'::"text"
-        END AS "result_status",
-        CASE
-            WHEN ((("aa"."activity_type")::"text" = ANY ((ARRAY['profile_deleted'::character varying, 'role_assigned'::character varying, 'permission_granted'::character varying])::"text"[])) AND (
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = true)) THEN 'high'::"text"
-            WHEN ((("aa"."activity_type")::"text" = ANY ((ARRAY['profile_updated'::character varying, 'role_removed'::character varying, 'bulk_operation'::character varying])::"text"[])) AND (
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = true)) THEN 'medium'::"text"
-            WHEN (
-            CASE
-                WHEN (("aa"."activity_type")::"text" ~~ '%_failed'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'success'::"text") = 'false'::"text") THEN false
-                WHEN (("aa"."metadata" ->> 'error'::"text") IS NOT NULL) THEN false
-                ELSE true
-            END = false) THEN 'medium'::"text"
-            ELSE 'low'::"text"
-        END AS "risk_level"
-   FROM ("public"."account_activities" "aa"
-     LEFT JOIN "public"."profiles" "p" ON (("aa"."actor_id" = "p"."id")))
-  WHERE ((("aa"."target_type")::"text" = ANY ((ARRAY['profile'::character varying, 'role'::character varying, 'permission'::character varying, 'auth'::character varying, 'bulk_operation'::character varying])::"text"[])) OR (("aa"."activity_type")::"text" = ANY ((ARRAY['profile_created'::character varying, 'profile_updated'::character varying, 'profile_deleted'::character varying, 'role_assigned'::character varying, 'role_removed'::character varying, 'permission_granted'::character varying, 'permission_revoked'::character varying, 'bulk_operation'::character varying, 'profile_synced'::character varying, 'sync_conflict_resolved'::character varying])::"text"[])));
-
-
-ALTER VIEW "public"."profile_activity_monitoring" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."profile_activity_monitoring" IS 'Comprehensive activity monitoring view for profile management operations';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."profile_sync_conflicts" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "profile_id" "uuid",
-    "auth_user_id" "uuid",
-    "conflict_type" character varying(50) NOT NULL,
-    "profile_data" "jsonb" NOT NULL,
-    "auth_data" "jsonb" NOT NULL,
-    "resolution_strategy" character varying(50),
-    "resolved_by" "uuid",
-    "resolved_at" timestamp with time zone,
-    "resolution_notes" "text",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_conflict_type" CHECK ((("conflict_type")::"text" = ANY ((ARRAY['email_mismatch'::character varying, 'profile_missing'::character varying, 'auth_missing'::character varying, 'data_inconsistency'::character varying, 'role_mismatch'::character varying, 'status_mismatch'::character varying, 'metadata_conflict'::character varying])::"text"[]))),
-    CONSTRAINT "check_resolution_strategy" CHECK ((("resolution_strategy")::"text" = ANY ((ARRAY['profile_wins'::character varying, 'auth_wins'::character varying, 'merge'::character varying, 'manual'::character varying, 'ignore'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."profile_sync_conflicts" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."profile_sync_conflicts" IS 'Tracks conflicts between profiles and auth.users for resolution';
-
-
-
-CREATE OR REPLACE VIEW "public"."profile_management_summary" AS
- SELECT "p"."id",
-    "p"."full_name",
-    "p"."email",
-    "p"."role",
-    "p"."status",
-    "p"."account_id",
-    "a"."name" AS "account_name",
-    "a"."type" AS "account_type",
-    "p"."last_login_at",
-    "p"."login_count",
-    "p"."is_verified",
-    "p"."auth_sync_status",
-    "p"."phone",
-    "p"."avatar_url",
-    "p"."created_at",
-    "p"."updated_at",
-        CASE
-            WHEN ("p"."last_login_at" IS NULL) THEN NULL::integer
-            ELSE (EXTRACT(day FROM ("now"() - "p"."last_login_at")))::integer
-        END AS "days_since_last_login",
-    (( SELECT "count"(*) AS "count"
-           FROM "public"."account_activities" "aa"
-          WHERE (("aa"."metadata" ->> 'profile_id'::"text") = ("p"."id")::"text")))::integer AS "total_activities",
-    (( SELECT "count"(*) AS "count"
-           FROM "public"."profile_sync_conflicts" "psc"
-          WHERE (("psc"."profile_id" = "p"."id") AND ("psc"."resolved_at" IS NULL))))::integer AS "unresolved_conflicts"
-   FROM ("public"."profiles" "p"
-     LEFT JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")));
-
-
-ALTER VIEW "public"."profile_management_summary" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."profile_management_summary" IS 'Comprehensive view for profile management using existing account_activities table';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."profile_permissions" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "profile_id" "uuid" NOT NULL,
-    "permission_name" character varying(100) NOT NULL,
-    "resource_type" character varying(50) NOT NULL,
-    "resource_id" "uuid",
-    "action" character varying(50) NOT NULL,
-    "granted_by" "uuid",
-    "granted_at" timestamp with time zone DEFAULT "now"(),
-    "expires_at" timestamp with time zone,
-    "conditions" "jsonb" DEFAULT '{}'::"jsonb",
-    "is_active" boolean DEFAULT true,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_permission_action" CHECK ((("action")::"text" = ANY ((ARRAY['create'::character varying, 'read'::character varying, 'update'::character varying, 'delete'::character varying, 'manage'::character varying, 'assign'::character varying, 'export'::character varying, 'import'::character varying, 'approve'::character varying, 'execute'::character varying, 'configure'::character varying, 'monitor'::character varying])::"text"[]))),
-    CONSTRAINT "check_resource_type" CHECK ((("resource_type")::"text" = ANY ((ARRAY['account'::character varying, 'profile'::character varying, 'tool'::character varying, 'client'::character varying, 'invoice'::character varying, 'report'::character varying, 'calculation'::character varying, 'document'::character varying, 'system'::character varying, 'analytics'::character varying, 'billing'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."profile_permissions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."profile_permissions" IS 'Fine-grained permission assignments for profiles';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."proposal_assignments" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "proposal_id" "uuid" NOT NULL,
-    "expert_id" "uuid",
-    "assigned_by" "uuid",
-    "assigned_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "submitted_to_expert_at" timestamp with time zone,
-    "expert_response_at" timestamp with time zone,
-    "expert_status" "text" DEFAULT 'assigned'::"text",
-    "notes" "text",
-    "priority" "text" DEFAULT 'medium'::"text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    CONSTRAINT "proposal_assignments_expert_status_check" CHECK (("expert_status" = ANY (ARRAY['assigned'::"text", 'contacted'::"text", 'in_progress'::"text", 'completed'::"text", 'declined'::"text"]))),
-    CONSTRAINT "proposal_assignments_priority_check" CHECK (("priority" = ANY (ARRAY['low'::"text", 'medium'::"text", 'high'::"text", 'urgent'::"text"])))
-);
-
-
-ALTER TABLE "public"."proposal_assignments" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."proposal_timeline" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "proposal_id" "uuid" NOT NULL,
-    "status_from" "text",
-    "status_to" "text" NOT NULL,
-    "changed_by" "uuid",
-    "changed_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "notes" "text",
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb"
-);
-
-
-ALTER TABLE "public"."proposal_timeline" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_areas" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "name" "text" NOT NULL,
-    "category_id" "uuid" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_areas" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_focuses" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "name" "text" NOT NULL,
-    "area_id" "uuid" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_focuses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_research_activities" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "title" "text" NOT NULL,
-    "focus_id" "uuid" NOT NULL,
-    "is_active" boolean DEFAULT true,
-    "default_roles" "jsonb" NOT NULL,
-    "default_steps" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "focus" "text",
-    "category" "text",
-    "area" "text",
-    "research_activity" "text",
-    "subcomponent" "text",
-    "phase" "text",
-    "step" "text"
-);
-
-
-ALTER TABLE "public"."rd_research_activities" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_research_categories" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "name" "text" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_research_categories" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "activity_id" "uuid" NOT NULL,
-    "title" "text" NOT NULL,
-    "phase" "text" NOT NULL,
-    "step" "text",
-    "hint" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "general_description" "text",
-    "goal" "text",
-    "hypothesis" "text",
-    "alternatives" "text",
-    "uncertainties" "text",
-    "developmental_process" "text",
-    "primary_goal" "text",
-    "expected_outcome_type" "text",
-    "cpt_codes" "text",
-    "cdt_codes" "text",
-    "alternative_paths" "text"
-);
-
-
-ALTER TABLE "public"."rd_subcomponents" OWNER TO "postgres";
-
-
-CREATE OR REPLACE VIEW "public"."rd_activity_hierarchy" AS
- SELECT "cat"."name" AS "category",
-    "area"."name" AS "area",
-    "focus"."name" AS "focus",
-    "act"."title" AS "activity_title",
-    "sub"."title" AS "subcomponent_title",
-    "sub"."phase",
-    "sub"."step",
-    "sub"."hint",
-    "sub"."general_description",
-    "sub"."goal",
-    "sub"."hypothesis",
-    "sub"."alternatives",
-    "sub"."uncertainties",
-    "sub"."developmental_process",
-    "sub"."primary_goal",
-    "sub"."expected_outcome_type",
-    "sub"."cpt_codes",
-    "sub"."cdt_codes",
-    "sub"."alternative_paths"
-   FROM (((("public"."rd_research_categories" "cat"
-     JOIN "public"."rd_areas" "area" ON (("area"."category_id" = "cat"."id")))
-     JOIN "public"."rd_focuses" "focus" ON (("focus"."area_id" = "area"."id")))
-     JOIN "public"."rd_research_activities" "act" ON (("act"."focus_id" = "focus"."id")))
-     JOIN "public"."rd_subcomponents" "sub" ON (("sub"."activity_id" = "act"."id")))
-  ORDER BY "cat"."name", "area"."name", "focus"."name", "act"."title", "sub"."step";
-
-
-ALTER VIEW "public"."rd_activity_hierarchy" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_business_years" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "gross_receipts" numeric(15,2) NOT NULL,
-    "total_qre" numeric(15,2) DEFAULT 0,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_business_years" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_businesses" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "ein" "text" NOT NULL,
-    "entity_type" "public"."entity_type" NOT NULL,
-    "start_year" integer NOT NULL,
-    "domicile_state" "text" NOT NULL,
-    "contact_info" "jsonb" NOT NULL,
-    "is_controlled_grp" boolean DEFAULT false,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "historical_data" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
-    CONSTRAINT "check_historical_data_structure" CHECK ("public"."validate_historical_data"("historical_data"))
-);
-
-
-ALTER TABLE "public"."rd_businesses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_contractor_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "contractor_id" "uuid" NOT NULL,
-    "subcomponent_id" "uuid" NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "is_included" boolean DEFAULT true NOT NULL,
-    "baseline_applied_percent" numeric(5,2) DEFAULT 0 NOT NULL,
-    "practice_percentage" numeric(5,2),
-    "year_percentage" numeric(5,2),
-    "frequency_percentage" numeric(5,2),
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "user_id" "uuid",
-    "baseline_practice_percentage" numeric,
-    "baseline_time_percentage" numeric
-);
-
-
-ALTER TABLE "public"."rd_contractor_subcomponents" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_contractor_year_data" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "cost_amount" numeric(15,2) NOT NULL,
-    "applied_percent" numeric(5,2) NOT NULL,
-    "activity_link" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "contractor_id" "uuid",
-    "user_id" "uuid",
-    "activity_roles" "jsonb",
-    "calculated_qre" numeric
-);
-
-
-ALTER TABLE "public"."rd_contractor_year_data" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_contractors" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "role" "text",
-    "annual_cost" numeric(10,2) NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "user_id" "uuid",
-    "first_name" "text",
-    "last_name" "text",
-    "role_id" "uuid",
-    "is_owner" boolean DEFAULT false,
-    "amount" numeric(15,2),
-    "calculated_qre" numeric(15,2)
-);
-
-
-ALTER TABLE "public"."rd_contractors" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_employee_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "employee_id" "uuid" NOT NULL,
-    "subcomponent_id" "uuid" NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "is_included" boolean DEFAULT true NOT NULL,
-    "baseline_applied_percent" numeric(5,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "practice_percentage" numeric,
-    "year_percentage" numeric,
-    "frequency_percentage" numeric,
-    "baseline_practice_percentage" numeric,
-    "baseline_time_percentage" numeric,
-    "user_id" "uuid"
-);
-
-
-ALTER TABLE "public"."rd_employee_subcomponents" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_employee_year_data" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "employee_id" "uuid" NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "applied_percent" numeric(5,2) NOT NULL,
-    "calculated_qre" numeric(15,2) NOT NULL,
-    "activity_roles" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "user_id" "uuid"
-);
-
-
-ALTER TABLE "public"."rd_employee_year_data" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_employees" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "first_name" "text" NOT NULL,
-    "role_id" "uuid" NOT NULL,
-    "is_owner" boolean DEFAULT false,
-    "annual_wage" numeric(15,2) NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "last_name" "text",
-    "user_id" "uuid"
-);
-
-
-ALTER TABLE "public"."rd_employees" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_expenses" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "research_activity_id" "uuid" NOT NULL,
-    "step_id" "uuid" NOT NULL,
-    "subcomponent_id" "uuid" NOT NULL,
-    "employee_id" "uuid",
-    "contractor_id" "uuid",
-    "supply_id" "uuid",
-    "category" "text" NOT NULL,
-    "first_name" "text",
-    "last_name" "text",
-    "role_name" "text",
-    "supply_name" "text",
-    "research_activity_title" "text" NOT NULL,
-    "research_activity_practice_percent" numeric(5,2) NOT NULL,
-    "step_name" "text" NOT NULL,
-    "subcomponent_title" "text" NOT NULL,
-    "subcomponent_year_percent" numeric(5,2) NOT NULL,
-    "subcomponent_frequency_percent" numeric(5,2) NOT NULL,
-    "subcomponent_time_percent" numeric(5,2) NOT NULL,
-    "total_cost" numeric(10,2) NOT NULL,
-    "applied_percent" numeric(5,2) NOT NULL,
-    "baseline_applied_percent" numeric(5,2) NOT NULL,
-    "employee_practice_percent" numeric(5,2),
-    "employee_time_percent" numeric(5,2),
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "rd_expenses_category_check" CHECK (("category" = ANY (ARRAY['Employee'::"text", 'Contractor'::"text", 'Supply'::"text"])))
-);
-
-
-ALTER TABLE "public"."rd_expenses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_federal_credit_results" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "standard_credit" numeric(15,2),
-    "standard_adjusted_credit" numeric(15,2),
-    "standard_base_percentage" numeric(5,4),
-    "standard_fixed_base_amount" numeric(15,2),
-    "standard_incremental_qre" numeric(15,2),
-    "standard_is_eligible" boolean DEFAULT false,
-    "standard_missing_data" "jsonb",
-    "asc_credit" numeric(15,2),
-    "asc_adjusted_credit" numeric(15,2),
-    "asc_avg_prior_qre" numeric(15,2),
-    "asc_incremental_qre" numeric(15,2),
-    "asc_is_startup" boolean DEFAULT false,
-    "asc_missing_data" "jsonb",
-    "selected_method" "text",
-    "use_280c" boolean DEFAULT false,
-    "corporate_tax_rate" numeric(5,4) DEFAULT 0.21,
-    "total_federal_credit" numeric(15,2),
-    "total_state_credits" numeric(15,2),
-    "total_credits" numeric(15,2),
-    "calculation_date" timestamp with time zone DEFAULT "now"(),
-    "qre_breakdown" "jsonb",
-    "historical_data" "jsonb",
-    "state_credits" "jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "rd_federal_credit_results_selected_method_check" CHECK (("selected_method" = ANY (ARRAY['standard'::"text", 'asc'::"text"])))
-);
-
-
-ALTER TABLE "public"."rd_federal_credit_results" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_reports" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid",
-    "business_year_id" "uuid",
-    "type" "public"."rd_report_type" NOT NULL,
-    "generated_text" "text" NOT NULL,
-    "editable_text" "text",
-    "ai_version" "text" NOT NULL,
-    "locked" boolean DEFAULT false,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_reports" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_research_raw" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "category" "text",
-    "area" "text",
-    "focus" "text",
-    "research_activity" "text",
-    "subcomponent" "text",
-    "phase" "text",
-    "step" "text",
-    "hint" "text",
-    "general_description" "text",
-    "goal" "text",
-    "hypothesis" "text",
-    "alternatives" "text",
-    "uncertainties" "text",
-    "developmental_process" "text",
-    "primary_goal" "text",
-    "expected_outcome_type" "text",
-    "cpt_codes" "text",
-    "cdt_codes" "text",
-    "alternative_paths" "text",
-    "uploaded_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_research_raw" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_research_steps" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "research_activity_id" "uuid" NOT NULL,
-    "name" character varying(255) NOT NULL,
-    "description" "text",
-    "step_order" integer NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_research_steps" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_research_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "step_id" "uuid" NOT NULL,
-    "name" character varying(255) NOT NULL,
-    "description" "text",
-    "subcomponent_order" integer NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "hint" "text",
-    "general_description" "text",
-    "goal" "text",
-    "hypothesis" "text",
-    "alternatives" "text",
-    "uncertainties" "text",
-    "developmental_process" "text",
-    "primary_goal" "text",
-    "expected_outcome_type" "text",
-    "cpt_codes" "text",
-    "cdt_codes" "text",
-    "alternative_paths" "text"
-);
-
-
-ALTER TABLE "public"."rd_research_subcomponents" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_roles" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "parent_id" "uuid",
-    "is_default" boolean DEFAULT false,
-    "business_year_id" "uuid",
-    "baseline_applied_percent" numeric
-);
-
-
-ALTER TABLE "public"."rd_roles" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_selected_activities" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "activity_id" "uuid" NOT NULL,
-    "practice_percent" numeric(5,2) NOT NULL,
-    "selected_roles" "jsonb" NOT NULL,
-    "config" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "research_guidelines" "jsonb"
-);
-
-
-ALTER TABLE "public"."rd_selected_activities" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_selected_filter" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "selected_categories" "text"[] DEFAULT '{}'::"text"[],
-    "selected_areas" "text"[] DEFAULT '{}'::"text"[],
-    "selected_focuses" "text"[] DEFAULT '{}'::"text"[],
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_selected_filter" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_selected_steps" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "research_activity_id" "uuid" NOT NULL,
-    "step_id" "uuid" NOT NULL,
-    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_selected_steps" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_selected_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "research_activity_id" "uuid" NOT NULL,
-    "step_id" "uuid" NOT NULL,
-    "subcomponent_id" "uuid" NOT NULL,
-    "frequency_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "year_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "start_month" integer DEFAULT 1 NOT NULL,
-    "start_year" integer NOT NULL,
-    "selected_roles" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
-    "non_rd_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "approval_data" "jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "hint" "text",
-    "general_description" "text",
-    "goal" "text",
-    "hypothesis" "text",
-    "alternatives" "text",
-    "uncertainties" "text",
-    "developmental_process" "text",
-    "primary_goal" "text",
-    "expected_outcome_type" "text",
-    "cpt_codes" "text",
-    "cdt_codes" "text",
-    "alternative_paths" "text",
-    "applied_percentage" numeric,
-    "time_percentage" numeric,
-    "user_notes" "text",
-    "step_name" "text",
-    "practice_percentage" numeric
-);
-
-
-ALTER TABLE "public"."rd_selected_subcomponents" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_state_calculations" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "state" character varying(2) NOT NULL,
-    "calculation_method" "text" NOT NULL,
-    "refundable" "text",
-    "carryforward" "text",
-    "eligible_entities" "text"[],
-    "calculation_formula" "text" NOT NULL,
-    "special_notes" "text",
-    "start_year" numeric NOT NULL,
-    "end_year" numeric,
-    "is_active" boolean DEFAULT true,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "formula_correct" "text"
-);
-
-
-ALTER TABLE "public"."rd_state_calculations" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_supplies" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "description" "text",
-    "annual_cost" numeric(10,2) NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."rd_supplies" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_supply_subcomponents" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "supply_id" "uuid" NOT NULL,
-    "subcomponent_id" "uuid" NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
-    "is_included" boolean DEFAULT true NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "amount_applied" numeric
-);
-
-
-ALTER TABLE "public"."rd_supply_subcomponents" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."rd_supply_year_data" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_year_id" "uuid" NOT NULL,
-    "name" "text" NOT NULL,
-    "cost_amount" numeric(15,2) NOT NULL,
-    "applied_percent" numeric(5,2) NOT NULL,
-    "activity_link" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "supply_id" "uuid",
-    "calculated_qre" numeric(15,2)
-);
-
-
-ALTER TABLE "public"."rd_supply_year_data" OWNER TO "postgres";
-
-
-CREATE OR REPLACE VIEW "public"."recent_account_activities" AS
- SELECT "aa"."id",
-    "aa"."activity_type",
-    "aa"."description",
-    "aa"."created_at",
-    "a"."name" AS "account_name",
-    "a"."type" AS "account_type",
-    "p"."full_name" AS "actor_name",
-    "p"."email" AS "actor_email",
-    "aa"."metadata"
-   FROM (("public"."account_activities" "aa"
-     JOIN "public"."accounts" "a" ON (("aa"."account_id" = "a"."id")))
-     LEFT JOIN "public"."profiles" "p" ON (("aa"."actor_id" = "p"."id")))
-  WHERE ("aa"."created_at" >= ("now"() - '7 days'::interval))
-  ORDER BY "aa"."created_at" DESC;
-
-
-ALTER VIEW "public"."recent_account_activities" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."recent_account_activities" IS 'View showing recent account activities with account and actor details';
-
-
-
-CREATE OR REPLACE VIEW "public"."recent_client_activities" AS
- SELECT "ca"."id",
-    "ca"."client_id",
-    "ca"."user_id",
-    "ca"."activity_type",
-    "ca"."title",
-    "ca"."description",
-    "ca"."priority",
-    "ca"."metadata",
-    "ca"."is_read",
-    "ca"."created_at",
-    "ca"."updated_at",
-    "c"."full_name" AS "client_name",
-    "p"."full_name" AS "user_name"
-   FROM (("public"."client_activities" "ca"
-     JOIN "public"."clients" "c" ON (("ca"."client_id" = "c"."id")))
-     LEFT JOIN "public"."profiles" "p" ON (("ca"."user_id" = "p"."id")))
-  WHERE ("ca"."created_at" >= ("now"() - '30 days'::interval))
-  ORDER BY "ca"."created_at" DESC;
-
-
-ALTER VIEW "public"."recent_client_activities" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."reinsurance_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "strategy_detail_id" "uuid" NOT NULL,
-    "user_contribution" numeric(12,2) DEFAULT 0 NOT NULL,
-    "agi_reduction" numeric(12,2) DEFAULT 0 NOT NULL,
-    "federal_tax_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "state_tax_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_tax_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "net_year1_cost" numeric(12,2) DEFAULT 0 NOT NULL,
-    "breakeven_years" numeric(5,2) DEFAULT 0 NOT NULL,
-    "future_value" numeric(12,2) DEFAULT 0 NOT NULL,
-    "capital_gains_tax" numeric(12,2) DEFAULT 0 NOT NULL,
-    "setup_admin_cost" numeric(12,2) DEFAULT 0 NOT NULL,
-    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."reinsurance_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."research_activities" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid",
-    "name" "text",
-    "description" "text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
-);
-
-
-ALTER TABLE "public"."research_activities" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."security_alerts" (
-    "alert_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "alert_type" character varying(100) NOT NULL,
-    "severity" character varying(20) NOT NULL,
-    "user_id" "uuid",
-    "description" "text" NOT NULL,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "resolved" boolean DEFAULT false,
-    "resolved_at" timestamp with time zone,
-    "resolved_by" "uuid",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "escalated" boolean DEFAULT false,
-    "escalated_at" timestamp with time zone,
-    CONSTRAINT "security_alerts_alert_type_check" CHECK ((("alert_type")::"text" = ANY ((ARRAY['failed_login'::character varying, 'suspicious_ip'::character varying, 'privilege_abuse'::character varying, 'data_breach'::character varying, 'session_anomaly'::character varying, 'brute_force'::character varying, 'unauthorized_access'::character varying, 'policy_violation'::character varying])::"text"[]))),
-    CONSTRAINT "security_alerts_severity_check" CHECK ((("severity")::"text" = ANY ((ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."security_alerts" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."security_alerts" IS 'Real-time security alerts for immediate attention';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."security_events" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "event_type" "text" NOT NULL,
-    "user_id" "uuid",
-    "client_id" "uuid",
-    "ip_address" "inet",
-    "user_agent" "text",
-    "event_data" "jsonb",
-    "severity" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "details" "jsonb" DEFAULT '{}'::"jsonb",
-    "resolved" boolean DEFAULT false,
-    "resolved_at" timestamp with time zone,
-    "resolved_by" "uuid",
-    CONSTRAINT "security_events_severity_check" CHECK (("severity" = ANY (ARRAY['LOW'::"text", 'MEDIUM'::"text", 'HIGH'::"text", 'CRITICAL'::"text"])))
-);
-
-
-ALTER TABLE "public"."security_events" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."security_events" IS 'Audit log for security-related events and access attempts';
-
-
-
-CREATE OR REPLACE VIEW "public"."security_policy_audit" AS
- SELECT "schemaname",
-    "tablename",
-    "policyname",
-    "cmd",
-        CASE
-            WHEN (("qual" ~~ '%true%'::"text") OR ("qual" ~~ '%1=1%'::"text")) THEN 'PERMISSIVE'::"text"
-            WHEN ("qual" ~~ '%auth.uid()%'::"text") THEN 'USER_SCOPED'::"text"
-            WHEN ("qual" ~~ '%role_type%'::"text") THEN 'ROLE_BASED'::"text"
-            ELSE 'CUSTOM'::"text"
-        END AS "policy_type",
-    "qual" AS "policy_condition"
-   FROM "pg_policies"
-  WHERE ("schemaname" = 'public'::"name")
-  ORDER BY "tablename", "policyname";
-
-
-ALTER VIEW "public"."security_policy_audit" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."security_policy_audit" IS 'Audit view for reviewing all RLS policies and their types';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."strategy_commission_rates" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "affiliate_id" "uuid",
-    "strategy_name" "text" NOT NULL,
-    "affiliate_rate" numeric(5,4) NOT NULL,
-    "admin_rate" numeric(5,4) NOT NULL,
-    "expert_fee_percentage" numeric(5,4),
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
-    CONSTRAINT "rates_sum_check" CHECK ((("affiliate_rate" + "admin_rate") <= 1.0))
-);
-
-
-ALTER TABLE "public"."strategy_commission_rates" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."strategy_details" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "proposal_id" "uuid" NOT NULL,
-    "strategy_id" "text" NOT NULL,
-    "strategy_name" "text" NOT NULL,
-    "strategy_category" "text" NOT NULL,
-    "details" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
-    "estimated_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "enabled" boolean DEFAULT false NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."strategy_details" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."subscription_plans" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "plan_code" character varying(50) NOT NULL,
-    "plan_name" character varying(200) NOT NULL,
-    "description" "text",
-    "plan_type" character varying(20) DEFAULT 'recurring'::character varying,
-    "billing_interval" character varying(20) DEFAULT 'monthly'::character varying,
-    "interval_count" integer DEFAULT 1,
-    "price_cents" integer NOT NULL,
-    "currency" character varying(3) DEFAULT 'USD'::character varying,
-    "trial_period_days" integer DEFAULT 0,
-    "max_users" integer,
-    "max_tools" integer,
-    "features" "jsonb" DEFAULT '{}'::"jsonb",
-    "is_active" boolean DEFAULT true,
-    "stripe_price_id" character varying(100),
-    "square_catalog_id" character varying(100),
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_billing_interval" CHECK ((("billing_interval")::"text" = ANY ((ARRAY['daily'::character varying, 'weekly'::character varying, 'monthly'::character varying, 'quarterly'::character varying, 'yearly'::character varying])::"text"[]))),
-    CONSTRAINT "check_plan_type" CHECK ((("plan_type")::"text" = ANY ((ARRAY['one_time'::character varying, 'recurring'::character varying, 'usage_based'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."subscription_plans" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."subscription_plans" IS 'Subscription plan definitions with pricing and feature configurations';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."subscriptions" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "account_id" "uuid" NOT NULL,
-    "plan_id" "uuid" NOT NULL,
-    "status" character varying(20) DEFAULT 'active'::character varying,
-    "current_period_start" timestamp with time zone DEFAULT "now"() NOT NULL,
-    "current_period_end" timestamp with time zone NOT NULL,
-    "trial_start" timestamp with time zone,
-    "trial_end" timestamp with time zone,
-    "cancel_at_period_end" boolean DEFAULT false,
-    "canceled_at" timestamp with time zone,
-    "ended_at" timestamp with time zone,
-    "stripe_subscription_id" character varying(100),
-    "square_subscription_id" character varying(100),
-    "payment_method_id" "uuid",
-    "billing_contact_profile_id" "uuid",
-    "quantity" integer DEFAULT 1,
-    "discount_percent" numeric(5,2) DEFAULT 0,
-    "metadata" "jsonb" DEFAULT '{}'::"jsonb",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    CONSTRAINT "check_subscription_status" CHECK ((("status")::"text" = ANY ((ARRAY['trialing'::character varying, 'active'::character varying, 'past_due'::character varying, 'canceled'::character varying, 'unpaid'::character varying, 'paused'::character varying])::"text"[])))
-);
-
-
-ALTER TABLE "public"."subscriptions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."subscriptions" IS 'Active subscription records with billing cycle and status tracking';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."supply_expenses" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "business_id" "uuid",
-    "item_name" "text",
-    "amount" numeric,
-    "description" "text",
-    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
-);
-
-
-ALTER TABLE "public"."supply_expenses" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."tax_calculations" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "tax_info" "jsonb" NOT NULL,
-    "breakdown" "jsonb" NOT NULL,
-    "strategies" "jsonb" NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."tax_calculations" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."tax_estimates" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid",
-    "data" "jsonb" NOT NULL,
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "created_at" timestamp with time zone DEFAULT "now"()
-);
-
-
-ALTER TABLE "public"."tax_estimates" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."tax_profiles" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "standard_deduction" boolean DEFAULT false,
-    "business_owner" boolean DEFAULT false,
-    "full_name" "text",
-    "email" "text",
-    "filing_status" "text",
-    "dependents" integer DEFAULT 0,
-    "home_address" "text",
-    "state" "text",
-    "wages_income" numeric DEFAULT 0,
-    "passive_income" numeric DEFAULT 0,
-    "unearned_income" numeric DEFAULT 0,
-    "capital_gains" numeric DEFAULT 0,
-    "custom_deduction" numeric DEFAULT 0,
-    "charitable_deduction" numeric DEFAULT 0,
-    "business_name" "text",
-    "entity_type" "text",
-    "ordinary_k1_income" numeric DEFAULT 0,
-    "guaranteed_k1_income" numeric DEFAULT 0,
-    "business_address" "text",
-    "deduction_limit_reached" boolean DEFAULT false,
-    "household_income" numeric DEFAULT 0,
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "phone" "text"
-);
-
-
-ALTER TABLE "public"."tax_profiles" OWNER TO "postgres";
-
-
-CREATE TABLE IF NOT EXISTS "public"."tax_proposals" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "user_id" "uuid" NOT NULL,
-    "year" integer NOT NULL,
-    "tax_info" "jsonb" NOT NULL,
-    "proposed_strategies" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
-    "total_savings" numeric(12,2) DEFAULT 0 NOT NULL,
-    "status" "text" DEFAULT 'draft'::"text" NOT NULL,
-    "notes" "text",
-    "created_at" timestamp with time zone DEFAULT "now"(),
-    "updated_at" timestamp with time zone DEFAULT "now"(),
-    "client_id" "uuid",
-    "created_by" "uuid",
-    CONSTRAINT "tax_proposals_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'proposed'::"text", 'accepted'::"text", 'rejected'::"text", 'implemented'::"text"])))
-);
-
-
-ALTER TABLE "public"."tax_proposals" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."tax_proposals" IS 'Tax proposals are now associated with clients. Affiliate information is accessed through the client relationship.';
-
-
-
-COMMENT ON COLUMN "public"."tax_proposals"."client_id" IS 'References clients.id - get affiliate via clients.affiliate_id';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."tool_enrollments" (
-    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
-    "client_file_id" "uuid" NOT NULL,
-    "business_id" "uuid" NOT NULL,
-    "tool_slug" "text" NOT NULL,
-    "enrolled_by" "uuid",
-    "enrolled_at" timestamp with time zone DEFAULT "now"(),
-    "status" "text" DEFAULT 'active'::"text",
-    "notes" "text",
-    CONSTRAINT "tool_enrollments_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text", 'completed'::"text", 'cancelled'::"text"]))),
-    CONSTRAINT "tool_enrollments_tool_slug_check" CHECK (("tool_slug" = ANY (ARRAY['rd'::"text", 'augusta'::"text", 'hire_children'::"text", 'cost_segregation'::"text", 'convertible_bonds'::"text", 'tax_planning'::"text"])))
-);
-
-
-ALTER TABLE "public"."tool_enrollments" OWNER TO "postgres";
-
-
-CREATE OR REPLACE VIEW "public"."tool_usage_summary" AS
- SELECT "tul"."tool_id",
-    "t"."name" AS "tool_name",
-    "t"."slug" AS "tool_slug",
-    "count"(*) AS "total_usage_events",
-    "count"(DISTINCT "tul"."account_id") AS "unique_accounts",
-    "count"(DISTINCT "tul"."profile_id") AS "unique_users",
-    "count"(*) FILTER (WHERE ("tul"."success" = false)) AS "failed_events",
-    "avg"("tul"."duration_seconds") AS "avg_duration_seconds",
-    "sum"("tul"."data_volume_mb") AS "total_data_volume_mb",
-    "max"("tul"."created_at") AS "last_usage",
-    "count"(*) FILTER (WHERE ("tul"."created_at" >= ("now"() - '24:00:00'::interval))) AS "usage_last_24h",
-    "count"(*) FILTER (WHERE ("tul"."created_at" >= ("now"() - '7 days'::interval))) AS "usage_last_7d",
-    "count"(*) FILTER (WHERE ("tul"."created_at" >= ("now"() - '30 days'::interval))) AS "usage_last_30d"
-   FROM ("public"."tool_usage_logs" "tul"
-     JOIN "public"."tools" "t" ON (("tul"."tool_id" = "t"."id")))
-  WHERE ("tul"."created_at" >= ("now"() - '90 days'::interval))
-  GROUP BY "tul"."tool_id", "t"."name", "t"."slug"
-  ORDER BY ("count"(*)) DESC;
-
-
-ALTER VIEW "public"."tool_usage_summary" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."tool_usage_summary" IS 'Analytics summary of tool usage over the last 90 days';
-
-
-
-CREATE TABLE IF NOT EXISTS "public"."transactions" (
-    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
-    "partner_id" "uuid" NOT NULL,
-    "client_id" "uuid" NOT NULL,
-    "tool_id" "uuid" NOT NULL,
-    "invoice_id" "uuid",
-    "status" "text" DEFAULT 'draft'::"text" NOT NULL,
-    "amount" numeric(10,2) NOT NULL,
-    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
-    CONSTRAINT "transactions_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'invoiced'::"text", 'paid'::"text", 'cancelled'::"text"])))
-);
-
-
-ALTER TABLE "public"."transactions" OWNER TO "postgres";
-
-
-COMMENT ON TABLE "public"."transactions" IS 'Logs each billable event when a partner uses a tool for a client.';
-
-
-
-CREATE OR REPLACE VIEW "public"."user_access_summary" AS
- SELECT "p"."id" AS "user_id",
-    "p"."email",
-    "p"."full_name" AS "name",
-    "p"."role" AS "role_type",
-    "count"("cu"."id") AS "client_count",
-    "array_agg"(DISTINCT "cu"."role") AS "client_roles",
-    "array_agg"(DISTINCT "c"."full_name") AS "client_names",
-    "max"("cu"."created_at") AS "last_client_added"
-   FROM (("public"."profiles" "p"
-     LEFT JOIN "public"."client_users" "cu" ON ((("p"."id" = "cu"."user_id") AND ("cu"."is_active" = true))))
-     LEFT JOIN "public"."clients" "c" ON (("cu"."client_id" = "c"."id")))
-  WHERE ("p"."role" = ANY (ARRAY['client'::"text", 'staff'::"text", 'affiliate'::"text"]))
-  GROUP BY "p"."id", "p"."email", "p"."full_name", "p"."role"
-  ORDER BY "p"."full_name";
-
-
-ALTER VIEW "public"."user_access_summary" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."user_access_summary" IS 'Summary view showing client access patterns for each user';
-
-
-
-CREATE OR REPLACE VIEW "public"."users_with_auth" AS
- SELECT "p"."id",
-    "p"."email",
-    "p"."full_name",
-    "p"."role",
-    "p"."created_at",
-    "p"."updated_at",
-    "au"."email" AS "auth_email",
-    "au"."created_at" AS "auth_created_at",
-    "au"."email_confirmed_at",
-    "au"."last_sign_in_at"
-   FROM ("public"."profiles" "p"
-     JOIN "auth"."users" "au" ON (("p"."id" = "au"."id")));
-
-
-ALTER VIEW "public"."users_with_auth" OWNER TO "postgres";
-
-
-COMMENT ON VIEW "public"."users_with_auth" IS 'View combining profile and auth data without deprecated columns';
-
-
-
-ALTER TABLE ONLY "public"."account_activities"
-    ADD CONSTRAINT "account_activities_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_pkey" PRIMARY KEY ("account_id", "tool_id");
-
-
-
-ALTER TABLE ONLY "public"."accounts"
-    ADD CONSTRAINT "accounts_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."accounts"
-    ADD CONSTRAINT "accounts_stripe_customer_id_key" UNIQUE ("stripe_customer_id");
-
-
-
-ALTER TABLE ONLY "public"."admin_client_files"
-    ADD CONSTRAINT "admin_client_files_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."admin_sessions"
-    ADD CONSTRAINT "admin_sessions_pkey" PRIMARY KEY ("session_id");
-
-
-
-ALTER TABLE ONLY "public"."affiliate_tool_permissions"
-    ADD CONSTRAINT "affiliate_tool_permissions_pkey" PRIMARY KEY ("affiliate_profile_id", "tool_id");
-
-
-
-ALTER TABLE ONLY "public"."affiliates"
-    ADD CONSTRAINT "affiliates_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."augusta_rule_details"
-    ADD CONSTRAINT "augusta_rule_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."billing_events"
-    ADD CONSTRAINT "billing_events_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."billing_invoices"
-    ADD CONSTRAINT "billing_invoices_invoice_number_key" UNIQUE ("invoice_number");
-
-
-
-ALTER TABLE ONLY "public"."billing_invoices"
-    ADD CONSTRAINT "billing_invoices_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."bulk_operation_results"
-    ADD CONSTRAINT "bulk_operation_results_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."bulk_operations"
-    ADD CONSTRAINT "bulk_operations_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."business_years"
-    ADD CONSTRAINT "business_years_business_id_year_key" UNIQUE ("business_id", "year");
-
-
-
-ALTER TABLE ONLY "public"."business_years"
-    ADD CONSTRAINT "business_years_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."businesses"
-    ADD CONSTRAINT "businesses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."calculations"
-    ADD CONSTRAINT "calculations_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."centralized_businesses"
-    ADD CONSTRAINT "centralized_businesses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."charitable_donation_details"
-    ADD CONSTRAINT "charitable_donation_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."client_activities"
-    ADD CONSTRAINT "client_activities_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."client_dashboard_metrics"
-    ADD CONSTRAINT "client_dashboard_metrics_client_id_metric_type_key" UNIQUE ("client_id", "metric_type");
-
-
-
-ALTER TABLE ONLY "public"."client_dashboard_metrics"
-    ADD CONSTRAINT "client_dashboard_metrics_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."client_engagement_status"
-    ADD CONSTRAINT "client_engagement_status_client_id_key" UNIQUE ("client_id");
-
-
-
-ALTER TABLE ONLY "public"."client_engagement_status"
-    ADD CONSTRAINT "client_engagement_status_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."client_users"
-    ADD CONSTRAINT "client_users_client_id_user_id_key" UNIQUE ("client_id", "user_id");
-
-
-
-ALTER TABLE ONLY "public"."client_users"
-    ADD CONSTRAINT "client_users_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."clients"
-    ADD CONSTRAINT "clients_email_key" UNIQUE ("email");
-
-
-
-ALTER TABLE ONLY "public"."clients"
-    ADD CONSTRAINT "clients_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."commission_transactions"
-    ADD CONSTRAINT "commission_transactions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."contractor_expenses"
-    ADD CONSTRAINT "contractor_expenses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."convertible_tax_bonds_details"
-    ADD CONSTRAINT "convertible_tax_bonds_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."cost_segregation_details"
-    ADD CONSTRAINT "cost_segregation_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_access_logs"
-    ADD CONSTRAINT "document_access_logs_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_comments"
-    ADD CONSTRAINT "document_comments_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_files"
-    ADD CONSTRAINT "document_files_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_folders"
-    ADD CONSTRAINT "document_folders_pkey" PRIMARY KEY ("id");
+  new_token VARCHAR(64);
+  new_expires_at TIMESTAMP;
+BEGIN
+  -- Generate a secure random token
+  new_token := encode(gen_random_bytes(32), 'hex');
+  
+  -- Set expiration to 30 days from now
+  new_expires_at := NOW() + INTERVAL '30 days';
+  
+  -- Deactivate any existing tokens for this business
+  UPDATE rd_client_portal_tokens 
+  SET is_active = FALSE, updated_at = NOW()
+  WHERE business_id = p_business_id AND is_active = TRUE;
+  
+  -- Insert new token
+  INSERT INTO rd_client_portal_tokens (
+    business_id, 
+    token, 
+    expires_at, 
+    created_at, 
+    updated_at,
+    is_active,
+    access_count
+  ) VALUES (
+    p_business_id, 
+    new_token, 
+    new_expires_at, 
+    NOW(), 
+    NOW(),
+    TRUE,
+    0
+  );
+  
+  -- Return the new token
+  RETURN QUERY SELECT new_token, new_expires_at;
+END $$;
+
+
+ALTER FUNCTION "public"."generate_portal_token"("p_business_id" "uuid") OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) RETURNS integer[]
+    LANGUAGE "plpgsql"
+    AS $$
+DECLARE
+  start_from_year INTEGER;
+  years INTEGER[] := ARRAY[]::INTEGER[];
+  year INTEGER;
+BEGIN
+  -- Start from 8 years ago or business start year, whichever is later
+  start_from_year := GREATEST(business_start_year, tax_year - 8);
+  
+  -- Generate array of years from start_from_year to tax_year - 1
+  FOR year IN start_from_year..(tax_year - 1) LOOP
+    years := array_append(years, year);
+  END LOOP;
+  
+  RETURN years;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("tool_slug" "text", "tool_name" "text", "status" "text", "enrolled_at" timestamp with time zone)
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+BEGIN
+    RETURN QUERY
+    SELECT 
+        te.tool_slug,
+        CASE te.tool_slug
+            WHEN 'rd' THEN 'R&D Tax Calculator'
+            WHEN 'augusta' THEN 'Augusta Rule Estimator'
+            WHEN 'hire_children' THEN 'Hire Children Calculator'
+            WHEN 'cost_segregation' THEN 'Cost Segregation Calculator'
+            WHEN 'convertible_bonds' THEN 'Convertible Tax Bonds Calculator'
+            WHEN 'tax_planning' THEN 'Tax Planning'
+            ELSE te.tool_slug
+        END AS tool_name,
+        te.status,
+        te.enrolled_at
+    FROM public.tool_enrollments te
+    WHERE te.client_file_id = p_client_file_id
+    AND (p_business_id IS NULL OR te.business_id = p_business_id)
+    ORDER BY te.enrolled_at DESC;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") OWNER TO "postgres";
+
+
+COMMENT ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") IS 'Returns all tools a client is enrolled in';
+
+
+
+CREATE OR REPLACE FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") RETURNS "json"
+    LANGUAGE "plpgsql"
+    AS $$
+DECLARE
+    result JSON;
+BEGIN
+    SELECT json_build_object(
+        'client', c,
+        'personal_years', COALESCE(py_data, '[]'::json),
+        'businesses', COALESCE(b_data, '[]'::json)
+    ) INTO result
+    FROM clients c
+    LEFT JOIN (
+        SELECT 
+            client_id,
+            json_agg(py.*) as py_data
+        FROM personal_years py
+        WHERE py.client_id = client_uuid
+        GROUP BY client_id
+    ) py ON c.id = py.client_id
+    LEFT JOIN (
+        SELECT 
+            b.client_id,
+            json_agg(
+                json_build_object(
+                    'business', b,
+                    'business_years', COALESCE(by_data, '[]'::json)
+                )
+            ) as b_data
+        FROM businesses b
+        LEFT JOIN (
+            SELECT 
+                business_id,
+                json_agg(by.*) as by_data
+            FROM business_years by
+            WHERE by.business_id IN (SELECT id FROM businesses WHERE client_id = client_uuid)
+            GROUP BY business_id
+        ) by ON b.id = by.business_id
+        WHERE b.client_id = client_uuid
+        GROUP BY b.client_id
+    ) b ON c.id = b.client_id
+    WHERE c.id = client_uuid;
+    
+    RETURN result;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text" DEFAULT NULL::"text", "p_admin_id" "uuid" DEFAULT NULL::"uuid", "p_affiliate_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("client_file_id" "uuid", "business_id" "uuid", "admin_id" "uuid", "affiliate_id" "uuid", "archived" boolean, "created_at" timestamp with time zone, "full_name" "text", "email" "text", "business_name" "text", "entity_type" "text", "tool_slug" "text", "tool_status" "text", "total_income" numeric, "filing_status" "text")
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+BEGIN
+    RETURN QUERY
+    SELECT DISTINCT
+        acf.id AS client_file_id,
+        acf.business_id,
+        acf.admin_id,
+        acf.affiliate_id,
+        acf.archived,
+        acf.created_at,
+        acf.full_name,
+        acf.email,
+        cb.business_name,
+        cb.entity_type,
+        te.tool_slug,
+        te.status AS tool_status,
+        COALESCE(
+            (SELECT (wages_income + passive_income + unearned_income + capital_gains) 
+             FROM personal_years py 
+             WHERE py.client_id = acf.id 
+             ORDER BY py.year DESC 
+             LIMIT 1),
+            (acf.wages_income + acf.passive_income + acf.unearned_income + acf.capital_gains)
+        ) AS total_income,
+        acf.filing_status
+    FROM public.admin_client_files acf
+    LEFT JOIN public.centralized_businesses cb ON acf.business_id = cb.id
+    LEFT JOIN public.tool_enrollments te ON te.business_id = cb.id
+    WHERE acf.archived IS NOT TRUE
+    AND (p_tool_filter IS NULL OR te.tool_slug = p_tool_filter)
+    AND (p_admin_id IS NULL OR acf.admin_id = p_admin_id)
+    AND (p_affiliate_id IS NULL OR acf.affiliate_id = p_affiliate_id)
+    ORDER BY acf.created_at DESC;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") OWNER TO "postgres";
+
+
+COMMENT ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") IS 'Returns unified client list with filtering options';
+
+
+
+CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+BEGIN
+    INSERT INTO profiles (id, email, full_name)
+    VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
+    RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."handle_updated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  NEW.updated_at = now();
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."handle_updated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."is_admin"() RETURNS boolean
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+BEGIN
+    RETURN EXISTS (
+        SELECT 1 FROM profiles
+        WHERE id = auth.uid() AND is_admin = true
+    );
+END;
+$$;
+
+
+ALTER FUNCTION "public"."is_admin"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  -- Only set practice_percent if it's NULL or 0 (preserve manually set values)
+  IF NEW.practice_percent IS NULL OR NEW.practice_percent = 0 THEN
+    UPDATE rd_selected_subcomponents 
+    SET practice_percent = (
+      SELECT rsa.practice_percent 
+      FROM rd_selected_activities rsa
+      WHERE rsa.activity_id = NEW.research_activity_id
+      AND rsa.business_year_id = NEW.business_year_id
+      LIMIT 1
+    )
+    WHERE id = NEW.id;
+  END IF;
+  
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."set_updated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  NEW.updated_at = NOW();
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."set_updated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean DEFAULT NULL::boolean, "p_ordinary_k1_income" numeric DEFAULT NULL::numeric, "p_guaranteed_k1_income" numeric DEFAULT NULL::numeric, "p_annual_revenue" numeric DEFAULT NULL::numeric, "p_employee_count" integer DEFAULT NULL::integer) RETURNS boolean
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+BEGIN
+  UPDATE business_years SET
+    is_active = COALESCE(p_is_active, is_active),
+    ordinary_k1_income = COALESCE(p_ordinary_k1_income, ordinary_k1_income),
+    guaranteed_k1_income = COALESCE(p_guaranteed_k1_income, guaranteed_k1_income),
+    annual_revenue = COALESCE(p_annual_revenue, annual_revenue),
+    employee_count = COALESCE(p_employee_count, employee_count),
+    updated_at = NOW()
+  WHERE id = p_year_id;
+  
+  RETURN FOUND;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_business_years_updated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  NEW.updated_at = NOW();
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_business_years_updated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_credits_calculated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+    -- Only update timestamp if credit values actually changed and not during lock operation
+    IF (OLD.federal_credit IS DISTINCT FROM NEW.federal_credit OR 
+        OLD.state_credit IS DISTINCT FROM NEW.state_credit) AND
+       (OLD.credits_locked_at IS NOT DISTINCT FROM NEW.credits_locked_at) THEN
+        NEW.credits_calculated_at = NOW();
+    END IF;
+    RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_credits_calculated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_rd_federal_credit_updated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+    NEW.updated_at = NOW();
+    RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_rd_federal_credit_updated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_rd_state_proforma_data_updated_at"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  NEW.updated_at = NOW();
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_rd_state_proforma_data_updated_at"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_selected_subcomponent_step_name"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  -- Set step_name from rd_research_steps when a new subcomponent is selected
+  UPDATE rd_selected_subcomponents 
+  SET step_name = (
+    SELECT rs.name 
+    FROM rd_research_steps rs
+    JOIN rd_research_subcomponents rsc ON rsc.step_id = rs.id
+    WHERE rsc.id = NEW.subcomponent_id
+    LIMIT 1
+  )
+  WHERE id = NEW.id;
+  
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_selected_subcomponent_step_name"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_total_qre"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+  NEW.total_qre = COALESCE(NEW.employee_qre, 0) + COALESCE(NEW.contractor_qre, 0) + COALESCE(NEW.supply_qre, 0);
+  RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_total_qre"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+    NEW.updated_at = NOW();
+    RETURN NEW;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."validate_historical_data"("data" "jsonb") RETURNS boolean
+    LANGUAGE "plpgsql"
+    AS $$
+BEGIN
+    -- Check if data is an array
+    IF jsonb_typeof(data) != 'array' THEN
+        RETURN FALSE;
+    END IF;
+    
+    -- Check each element in the array
+    FOR i IN 0..jsonb_array_length(data) - 1 LOOP
+        -- Each element should be an object with year, gross_receipts, and qre
+        IF NOT (
+            (data->i) ? 'year' AND
+            (data->i) ? 'gross_receipts' AND
+            (data->i) ? 'qre' AND
+            jsonb_typeof(data->i->'year') = 'number' AND
+            jsonb_typeof(data->i->'gross_receipts') = 'number' AND
+            jsonb_typeof(data->i->'qre') = 'number'
+        ) THEN
+            RETURN FALSE;
+        END IF;
+    END LOOP;
+    
+    RETURN TRUE;
+END;
+$$;
+
+
+ALTER FUNCTION "public"."validate_historical_data"("data" "jsonb") OWNER TO "postgres";
+
+
+CREATE OR REPLACE FUNCTION "public"."validate_portal_token"("p_token" character varying, "p_ip_address" "inet" DEFAULT NULL::"inet") RETURNS TABLE("is_valid" boolean, "business_id" "uuid", "business_name" "text", "expires_at" timestamp without time zone, "message" "text")
+    LANGUAGE "plpgsql" SECURITY DEFINER
+    AS $$
+DECLARE
+  token_record RECORD;
+BEGIN
+  -- Look up the token
+  SELECT t.id, t.business_id, t.expires_at, t.is_active, b.name as business_name
+  INTO token_record
+  FROM rd_client_portal_tokens t
+  JOIN rd_businesses b ON t.business_id = b.id
+  WHERE t.token = p_token;
+  
+  -- Check if token exists
+  IF NOT FOUND THEN
+    RETURN QUERY SELECT FALSE, NULL::UUID, NULL::TEXT, NULL::TIMESTAMP, 'Invalid token'::TEXT;
+    RETURN;
+  END IF;
+  
+  -- Check if token is active
+  IF NOT token_record.is_active THEN
+    RETURN QUERY SELECT FALSE, token_record.business_id, token_record.business_name, token_record.expires_at, 'Token has been deactivated'::TEXT;
+    RETURN;
+  END IF;
+  
+  -- Check if token has expired
+  IF token_record.expires_at < NOW() THEN
+    RETURN QUERY SELECT FALSE, token_record.business_id, token_record.business_name, token_record.expires_at, 'Token has expired'::TEXT;
+    RETURN;
+  END IF;
+  
+  -- Update access tracking
+  UPDATE rd_client_portal_tokens 
+  SET 
+    access_count = access_count + 1,
+    last_accessed_at = NOW(),
+    last_accessed_ip = p_ip_address,
+    updated_at = NOW()
+  WHERE id = token_record.id;
+  
+  -- Return success
+  RETURN QUERY SELECT TRUE, token_record.business_id, token_record.business_name, token_record.expires_at, 'Valid token'::TEXT;
+END $$;
 
 
+ALTER FUNCTION "public"."validate_portal_token"("p_token" character varying, "p_ip_address" "inet") OWNER TO "postgres";
 
-ALTER TABLE ONLY "public"."document_processing_jobs"
-    ADD CONSTRAINT "document_processing_jobs_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_shares"
-    ADD CONSTRAINT "document_shares_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."document_shares"
-    ADD CONSTRAINT "document_shares_share_token_key" UNIQUE ("share_token");
-
-
-
-ALTER TABLE ONLY "public"."document_versions"
-    ADD CONSTRAINT "document_versions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."employees"
-    ADD CONSTRAINT "employees_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."experts"
-    ADD CONSTRAINT "experts_email_key" UNIQUE ("email");
-
-
-
-ALTER TABLE ONLY "public"."experts"
-    ADD CONSTRAINT "experts_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."family_management_company_details"
-    ADD CONSTRAINT "family_management_company_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."feature_usage_tracking"
-    ADD CONSTRAINT "feature_usage_tracking_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."feature_usage_tracking"
-    ADD CONSTRAINT "feature_usage_tracking_profile_id_feature_name_key" UNIQUE ("profile_id", "feature_name");
-
-
-
-ALTER TABLE ONLY "public"."hire_children_details"
-    ADD CONSTRAINT "hire_children_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."invitations"
-    ADD CONSTRAINT "invitations_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."invitations"
-    ADD CONSTRAINT "invitations_token_key" UNIQUE ("token");
-
-
-
-ALTER TABLE ONLY "public"."invoice_line_items"
-    ADD CONSTRAINT "invoice_line_items_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."invoices"
-    ADD CONSTRAINT "invoices_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."leads"
-    ADD CONSTRAINT "leads_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."login_attempts"
-    ADD CONSTRAINT "login_attempts_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."mfa_settings"
-    ADD CONSTRAINT "mfa_settings_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."mfa_settings"
-    ADD CONSTRAINT "mfa_settings_user_id_key" UNIQUE ("user_id");
-
-
-
-ALTER TABLE ONLY "public"."payment_methods"
-    ADD CONSTRAINT "payment_methods_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."payments"
-    ADD CONSTRAINT "payments_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."performance_metrics"
-    ADD CONSTRAINT "performance_metrics_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."personal_years"
-    ADD CONSTRAINT "personal_years_client_id_year_key" UNIQUE ("client_id", "year");
-
-
-
-ALTER TABLE ONLY "public"."personal_years"
-    ADD CONSTRAINT "personal_years_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."platform_usage_metrics"
-    ADD CONSTRAINT "platform_usage_metrics_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."profile_permissions"
-    ADD CONSTRAINT "profile_permissions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."profile_roles"
-    ADD CONSTRAINT "profile_roles_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."profile_sync_conflicts"
-    ADD CONSTRAINT "profile_sync_conflicts_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."profiles"
-    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");
-
-
-
-ALTER TABLE ONLY "public"."profiles"
-    ADD CONSTRAINT "profiles_email_unique" UNIQUE ("email");
-
-
-
-ALTER TABLE ONLY "public"."profiles"
-    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."proposal_assignments"
-    ADD CONSTRAINT "proposal_assignments_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."proposal_timeline"
-    ADD CONSTRAINT "proposal_timeline_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_areas"
-    ADD CONSTRAINT "rd_areas_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_business_years"
-    ADD CONSTRAINT "rd_business_years_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_businesses"
-    ADD CONSTRAINT "rd_businesses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
-    ADD CONSTRAINT "rd_contractor_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
-    ADD CONSTRAINT "rd_contractor_subcomponents_unique" UNIQUE ("contractor_id", "subcomponent_id", "business_year_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_contractor_year_data"
-    ADD CONSTRAINT "rd_contractor_year_data_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_contractors"
-    ADD CONSTRAINT "rd_contractors_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_employee_subcomponents"
-    ADD CONSTRAINT "rd_employee_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_employee_subcomponents"
-    ADD CONSTRAINT "rd_employee_subcomponents_unique" UNIQUE ("employee_id", "subcomponent_id", "business_year_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_employee_year_data"
-    ADD CONSTRAINT "rd_employee_year_data_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_employees"
-    ADD CONSTRAINT "rd_employees_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_federal_credit_results"
-    ADD CONSTRAINT "rd_federal_credit_results_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_federal_credit_results"
-    ADD CONSTRAINT "rd_federal_credit_results_unique" UNIQUE ("business_year_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_focuses"
-    ADD CONSTRAINT "rd_focuses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_reports"
-    ADD CONSTRAINT "rd_reports_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_activities"
-    ADD CONSTRAINT "rd_research_activities_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_categories"
-    ADD CONSTRAINT "rd_research_categories_name_key" UNIQUE ("name");
+SET default_tablespace = '';
 
+SET default_table_access_method = "heap";
 
 
-ALTER TABLE ONLY "public"."rd_research_categories"
-    ADD CONSTRAINT "rd_research_categories_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_raw"
-    ADD CONSTRAINT "rd_research_raw_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_steps"
-    ADD CONSTRAINT "rd_research_steps_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_subcomponents"
-    ADD CONSTRAINT "rd_research_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_roles"
-    ADD CONSTRAINT "rd_roles_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_activities"
-    ADD CONSTRAINT "rd_selected_activities_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_filter"
-    ADD CONSTRAINT "rd_selected_filter_business_year_id_key" UNIQUE ("business_year_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_filter"
-    ADD CONSTRAINT "rd_selected_filter_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_steps"
-    ADD CONSTRAINT "rd_selected_steps_business_year_id_step_id_key" UNIQUE ("business_year_id", "step_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_steps"
-    ADD CONSTRAINT "rd_selected_steps_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_business_year_id_subcomponent_id_key" UNIQUE ("business_year_id", "subcomponent_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_state_calculations"
-    ADD CONSTRAINT "rd_state_calculations_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_subcomponents"
-    ADD CONSTRAINT "rd_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_supplies"
-    ADD CONSTRAINT "rd_supplies_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_supply_subcomponents"
-    ADD CONSTRAINT "rd_supply_subcomponents_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_supply_subcomponents"
-    ADD CONSTRAINT "rd_supply_subcomponents_unique" UNIQUE ("supply_id", "subcomponent_id", "business_year_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_supply_year_data"
-    ADD CONSTRAINT "rd_supply_year_data_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."reinsurance_details"
-    ADD CONSTRAINT "reinsurance_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."research_activities"
-    ADD CONSTRAINT "research_activities_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."role_definitions"
-    ADD CONSTRAINT "role_definitions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."role_definitions"
-    ADD CONSTRAINT "role_definitions_role_name_key" UNIQUE ("role_name");
-
-
-
-ALTER TABLE ONLY "public"."security_alerts"
-    ADD CONSTRAINT "security_alerts_pkey" PRIMARY KEY ("alert_id");
-
-
-
-ALTER TABLE ONLY "public"."security_events"
-    ADD CONSTRAINT "security_events_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."strategy_commission_rates"
-    ADD CONSTRAINT "strategy_commission_rates_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."strategy_details"
-    ADD CONSTRAINT "strategy_details_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."strategy_details"
-    ADD CONSTRAINT "strategy_details_proposal_id_strategy_id_key" UNIQUE ("proposal_id", "strategy_id");
-
-
-
-ALTER TABLE ONLY "public"."subscription_plans"
-    ADD CONSTRAINT "subscription_plans_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."subscription_plans"
-    ADD CONSTRAINT "subscription_plans_plan_code_key" UNIQUE ("plan_code");
-
-
-
-ALTER TABLE ONLY "public"."subscriptions"
-    ADD CONSTRAINT "subscriptions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."supply_expenses"
-    ADD CONSTRAINT "supply_expenses_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tax_calculations"
-    ADD CONSTRAINT "tax_calculations_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tax_estimates"
-    ADD CONSTRAINT "tax_estimates_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tax_profiles"
-    ADD CONSTRAINT "tax_profiles_pkey" PRIMARY KEY ("user_id");
-
-
-
-ALTER TABLE ONLY "public"."tax_proposals"
-    ADD CONSTRAINT "tax_proposals_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tool_enrollments"
-    ADD CONSTRAINT "tool_enrollments_client_file_id_business_id_tool_slug_key" UNIQUE ("client_file_id", "business_id", "tool_slug");
-
-
-
-ALTER TABLE ONLY "public"."tool_enrollments"
-    ADD CONSTRAINT "tool_enrollments_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tool_usage_logs"
-    ADD CONSTRAINT "tool_usage_logs_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tools"
-    ADD CONSTRAINT "tools_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."tools"
-    ADD CONSTRAINT "tools_slug_key" UNIQUE ("slug");
-
-
-
-ALTER TABLE ONLY "public"."transactions"
-    ADD CONSTRAINT "transactions_pkey" PRIMARY KEY ("id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_activities"
-    ADD CONSTRAINT "unique_activity_per_focus" UNIQUE ("title", "focus_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_areas"
-    ADD CONSTRAINT "unique_area_name_per_category" UNIQUE ("name", "category_id");
-
-
-
-ALTER TABLE ONLY "public"."rd_research_categories"
-    ADD CONSTRAINT "unique_category_name" UNIQUE ("name");
-
-
-
-ALTER TABLE ONLY "public"."document_folders"
-    ADD CONSTRAINT "unique_client_folder_path" UNIQUE ("client_id", "path");
-
-
-
-ALTER TABLE ONLY "public"."document_versions"
-    ADD CONSTRAINT "unique_document_version" UNIQUE ("document_id", "version_number");
-
+CREATE TABLE IF NOT EXISTS "public"."admin_client_files" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "client_id" "uuid",
+    "admin_id" "uuid",
+    "affiliate_id" "uuid",
+    "status" "text" DEFAULT 'active'::"text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    "tax_profile_data" "jsonb",
+    "last_calculation_date" timestamp without time zone,
+    "projected_savings" numeric(10,2),
+    "archived" boolean DEFAULT false,
+    "archived_at" timestamp with time zone,
+    "business_id" "uuid",
+    "ordinary_k1_income" numeric(15,2) DEFAULT 0,
+    "guaranteed_k1_income" numeric(15,2) DEFAULT 0,
+    "household_income" numeric(15,2) DEFAULT 0,
+    "business_annual_revenue" numeric(15,2) DEFAULT 0,
+    "email" "text",
+    "full_name" "text",
+    "phone" "text",
+    "filing_status" "text",
+    "dependents" numeric,
+    "home_address" "text",
+    "state" "text",
+    "wages_income" numeric,
+    "passive_income" numeric,
+    "unearned_income" numeric,
+    "capital_gains" numeric,
+    "custom_deduction" numeric,
+    "business_owner" boolean,
+    "business_name" "text",
+    "entity_type" "text",
+    "business_address" "text",
+    "standard_deduction" boolean
+);
 
 
-ALTER TABLE ONLY "public"."rd_focuses"
-    ADD CONSTRAINT "unique_focus_name_per_area" UNIQUE ("name", "area_id");
+ALTER TABLE "public"."admin_client_files" OWNER TO "postgres";
 
 
+COMMENT ON TABLE "public"."admin_client_files" IS 'Stores client files managed by admins';
 
-ALTER TABLE ONLY "public"."tax_profiles"
-    ADD CONSTRAINT "unique_user_id" UNIQUE ("user_id");
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."admin_id" IS 'The admin who created/manages this client file';
 
-CREATE INDEX "idx_account_activities_account_date" ON "public"."account_activities" USING "btree" ("account_id", "created_at" DESC);
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."affiliate_id" IS 'The affiliate associated with this client (if any)';
 
-CREATE INDEX "idx_account_activities_account_id" ON "public"."account_activities" USING "btree" ("account_id");
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."tax_profile_data" IS 'JSON data containing the complete tax profile';
 
-CREATE INDEX "idx_account_activities_actor_date" ON "public"."account_activities" USING "btree" ("actor_id", "created_at" DESC);
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."archived" IS 'Whether this client file has been archived (soft delete)';
 
-CREATE INDEX "idx_account_activities_actor_id" ON "public"."account_activities" USING "btree" ("actor_id");
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."archived_at" IS 'Timestamp when this client file was archived';
 
-CREATE INDEX "idx_account_activities_created_at" ON "public"."account_activities" USING "btree" ("created_at" DESC);
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."business_id" IS 'Reference to the primary business for this client';
 
-CREATE INDEX "idx_account_activities_date_range" ON "public"."account_activities" USING "btree" ("created_at" DESC, "account_id", "activity_type");
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."email" IS 'Email address of the client';
 
-CREATE INDEX "idx_account_activities_recent" ON "public"."account_activities" USING "btree" ("account_id", "activity_type", "created_at" DESC);
 
 
+COMMENT ON COLUMN "public"."admin_client_files"."full_name" IS 'Full name of the client';
 
-CREATE INDEX "idx_account_activities_target" ON "public"."account_activities" USING "btree" ("target_type", "target_id");
 
 
+CREATE TABLE IF NOT EXISTS "public"."augusta_rule_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "days_rented" integer DEFAULT 14 NOT NULL,
+    "daily_rate" numeric(10,2) DEFAULT 1500 NOT NULL,
+    "total_rent" numeric(12,2) DEFAULT 21000 NOT NULL,
+    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "rental_dates" "jsonb",
+    "parties_info" "jsonb",
+    "rental_info" "jsonb",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_account_activities_type" ON "public"."account_activities" USING "btree" ("activity_type");
 
+ALTER TABLE "public"."augusta_rule_details" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_account_activities_type_date" ON "public"."account_activities" USING "btree" ("activity_type", "created_at" DESC);
+CREATE TABLE IF NOT EXISTS "public"."business_years" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "year" integer NOT NULL,
+    "is_active" boolean DEFAULT true,
+    "ordinary_k1_income" numeric(12,2) DEFAULT 0,
+    "guaranteed_k1_income" numeric(12,2) DEFAULT 0,
+    "annual_revenue" numeric(15,2) DEFAULT 0,
+    "employee_count" integer DEFAULT 0,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."business_years" OWNER TO "postgres";
 
-CREATE INDEX "idx_account_tool_access_account_id" ON "public"."account_tool_access" USING "btree" ("account_id");
 
+CREATE TABLE IF NOT EXISTS "public"."businesses" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "client_id" "uuid" NOT NULL,
+    "business_name" character varying(255) NOT NULL,
+    "entity_type" character varying(50) DEFAULT 'LLC'::character varying NOT NULL,
+    "ein" character varying(20),
+    "business_address" "text",
+    "business_city" character varying(100),
+    "business_state" character varying(2),
+    "business_zip" character varying(10),
+    "business_phone" character varying(50),
+    "business_email" character varying(255),
+    "industry" character varying(100),
+    "year_established" integer,
+    "annual_revenue" numeric(15,2) DEFAULT 0,
+    "employee_count" integer DEFAULT 0,
+    "is_active" boolean DEFAULT true,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_account_tool_access_account_status" ON "public"."account_tool_access" USING "btree" ("account_id", "status");
+ALTER TABLE "public"."businesses" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."calculations" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "user_id" "uuid" NOT NULL,
+    "year" integer NOT NULL,
+    "date" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "tax_info" "jsonb" NOT NULL,
+    "breakdown" "jsonb" NOT NULL,
+    "strategies" "jsonb"[],
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
+);
 
-CREATE INDEX "idx_account_tool_access_affiliate_id" ON "public"."account_tool_access" USING "btree" ("affiliate_id");
 
+ALTER TABLE "public"."calculations" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_account_tool_access_created_by" ON "public"."account_tool_access" USING "btree" ("created_by");
+CREATE TABLE IF NOT EXISTS "public"."centralized_businesses" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "business_name" "text" NOT NULL,
+    "entity_type" "text" NOT NULL,
+    "ein" "text",
+    "business_address" "text",
+    "business_city" "text",
+    "business_state" "text",
+    "business_zip" "text",
+    "business_phone" "text",
+    "business_email" "text",
+    "industry" "text",
+    "year_established" integer,
+    "annual_revenue" numeric(15,2),
+    "employee_count" integer,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    CONSTRAINT "centralized_businesses_entity_type_check" CHECK (("entity_type" = ANY (ARRAY['LLC'::"text", 'S-Corp'::"text", 'C-Corp'::"text", 'Partnership'::"text", 'Sole Proprietorship'::"text", 'Other'::"text"])))
+);
 
 
+ALTER TABLE "public"."centralized_businesses" OWNER TO "postgres";
 
-CREATE INDEX "idx_account_tool_access_expires_at" ON "public"."account_tool_access" USING "btree" ("expires_at") WHERE ("expires_at" IS NOT NULL);
 
+CREATE TABLE IF NOT EXISTS "public"."charitable_donation_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "donation_amount" numeric(12,2) DEFAULT 0 NOT NULL,
+    "fmv_multiplier" numeric(5,2) DEFAULT 5.0 NOT NULL,
+    "agi_limit" numeric(3,2) DEFAULT 0.6 NOT NULL,
+    "deduction_value" numeric(12,2) DEFAULT 0 NOT NULL,
+    "federal_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "state_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_account_tool_access_expires_status" ON "public"."account_tool_access" USING "btree" ("expires_at", "status") WHERE ("expires_at" IS NOT NULL);
+ALTER TABLE "public"."charitable_donation_details" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."clients" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "full_name" character varying(255) NOT NULL,
+    "email" character varying(255) NOT NULL,
+    "phone" character varying(50),
+    "filing_status" character varying(50) DEFAULT 'single'::character varying NOT NULL,
+    "home_address" "text",
+    "state" character varying(2),
+    "dependents" integer DEFAULT 0,
+    "standard_deduction" boolean DEFAULT true,
+    "custom_deduction" numeric(12,2) DEFAULT 0,
+    "created_by" "uuid",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "archived" boolean DEFAULT false,
+    "archived_at" timestamp with time zone,
+    "city" "text",
+    "zip_code" "text"
+);
 
-CREATE INDEX "idx_account_tool_access_last_accessed" ON "public"."account_tool_access" USING "btree" ("last_accessed_at" DESC);
 
+ALTER TABLE "public"."clients" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_account_tool_access_status" ON "public"."account_tool_access" USING "btree" ("status");
+COMMENT ON COLUMN "public"."clients"."city" IS 'City of the client''s home address';
 
 
 
-CREATE INDEX "idx_account_tool_access_subscription_level" ON "public"."account_tool_access" USING "btree" ("subscription_level");
+COMMENT ON COLUMN "public"."clients"."zip_code" IS 'ZIP code of the client''s home address';
 
 
 
-CREATE INDEX "idx_account_tool_access_tool_id" ON "public"."account_tool_access" USING "btree" ("tool_id");
+CREATE TABLE IF NOT EXISTS "public"."commission_transactions" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "proposal_id" "uuid" NOT NULL,
+    "affiliate_id" "uuid",
+    "expert_id" "uuid",
+    "transaction_type" "text" NOT NULL,
+    "amount" numeric(12,2) NOT NULL,
+    "currency" "text" DEFAULT 'USD'::"text",
+    "transaction_date" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "payment_method" "text",
+    "reference_number" "text",
+    "status" "text" DEFAULT 'pending'::"text",
+    "notes" "text",
+    "created_by" "uuid",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    CONSTRAINT "commission_transactions_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'processing'::"text", 'completed'::"text", 'failed'::"text", 'cancelled'::"text"]))),
+    CONSTRAINT "commission_transactions_transaction_type_check" CHECK (("transaction_type" = ANY (ARRAY['expert_payment_received'::"text", 'affiliate_payment_due'::"text", 'affiliate_payment_sent'::"text", 'admin_commission'::"text"])))
+);
 
 
+ALTER TABLE "public"."commission_transactions" OWNER TO "postgres";
 
-CREATE INDEX "idx_account_tool_access_tool_status" ON "public"."account_tool_access" USING "btree" ("tool_id", "status");
 
+CREATE TABLE IF NOT EXISTS "public"."contractor_expenses" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "contractor_name" "text",
+    "amount" numeric,
+    "description" "text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
+);
 
 
-CREATE INDEX "idx_accounts_contact_email" ON "public"."accounts" USING "btree" ("contact_email");
+ALTER TABLE "public"."contractor_expenses" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."convertible_tax_bonds_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "ctb_payment" numeric(12,2) DEFAULT 0 NOT NULL,
+    "ctb_tax_offset" numeric(12,2) DEFAULT 0 NOT NULL,
+    "net_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "remaining_tax_after_ctb" numeric(12,2) DEFAULT 0 NOT NULL,
+    "reduction_ratio" numeric(5,4) DEFAULT 0.75 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_accounts_name" ON "public"."accounts" USING "btree" ("name");
 
+ALTER TABLE "public"."convertible_tax_bonds_details" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_accounts_status" ON "public"."accounts" USING "btree" ("status");
+CREATE TABLE IF NOT EXISTS "public"."cost_segregation_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "property_value" numeric(12,2) DEFAULT 0 NOT NULL,
+    "land_value" numeric(12,2) DEFAULT 0 NOT NULL,
+    "improvement_value" numeric(12,2) DEFAULT 0 NOT NULL,
+    "bonus_depreciation_rate" numeric(5,4) DEFAULT 0.8 NOT NULL,
+    "year_acquired" integer DEFAULT 2024 NOT NULL,
+    "current_year_deduction" numeric(12,2) DEFAULT 0 NOT NULL,
+    "years_2_to_5_annual" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."cost_segregation_details" OWNER TO "postgres";
 
-CREATE INDEX "idx_accounts_stripe_customer_id" ON "public"."accounts" USING "btree" ("stripe_customer_id");
 
-
-
-CREATE INDEX "idx_accounts_type" ON "public"."accounts" USING "btree" ("type");
-
-
-
-CREATE INDEX "idx_admin_client_files_admin_id" ON "public"."admin_client_files" USING "btree" ("admin_id");
-
-
-
-CREATE INDEX "idx_admin_client_files_affiliate_id" ON "public"."admin_client_files" USING "btree" ("affiliate_id");
-
-
-
-CREATE INDEX "idx_admin_client_files_archived" ON "public"."admin_client_files" USING "btree" ("archived");
-
-
-
-CREATE INDEX "idx_admin_client_files_business_id" ON "public"."admin_client_files" USING "btree" ("business_id");
-
-
-
-CREATE INDEX "idx_admin_client_files_created_at" ON "public"."admin_client_files" USING "btree" ("created_at");
-
-
-
-CREATE INDEX "idx_admin_client_files_email" ON "public"."admin_client_files" USING "btree" ("email");
-
-
-
-CREATE INDEX "idx_admin_sessions_active" ON "public"."admin_sessions" USING "btree" ("is_active", "expires_at");
+CREATE TABLE IF NOT EXISTS "public"."employees" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "name" "text",
+    "role" "text",
+    "salary" numeric,
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
+);
 
 
+ALTER TABLE "public"."employees" OWNER TO "postgres";
 
-CREATE INDEX "idx_admin_sessions_expires_at" ON "public"."admin_sessions" USING "btree" ("expires_at");
 
+CREATE TABLE IF NOT EXISTS "public"."experts" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "name" "text" NOT NULL,
+    "email" "text" NOT NULL,
+    "phone" "text",
+    "company" "text",
+    "specialties" "text"[] DEFAULT '{}'::"text"[],
+    "current_workload" integer DEFAULT 0,
+    "max_capacity" integer DEFAULT 10,
+    "commission_rate" numeric(5,4) DEFAULT 0.10,
+    "is_active" boolean DEFAULT true,
+    "notes" "text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
+);
 
 
-CREATE INDEX "idx_admin_sessions_last_activity" ON "public"."admin_sessions" USING "btree" ("last_activity" DESC);
+ALTER TABLE "public"."experts" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."family_management_company_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "members" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
+    "total_salaries" numeric(12,2) DEFAULT 0 NOT NULL,
+    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_admin_sessions_user_id" ON "public"."admin_sessions" USING "btree" ("user_id");
 
+ALTER TABLE "public"."family_management_company_details" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_affiliates_account_id" ON "public"."affiliates" USING "btree" ("account_id");
+CREATE TABLE IF NOT EXISTS "public"."form_6765_overrides" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "client_id" "uuid" NOT NULL,
+    "business_year" integer NOT NULL,
+    "section" "text" NOT NULL,
+    "line_number" integer NOT NULL,
+    "value" numeric(15,2) NOT NULL,
+    "last_modified_by" "uuid",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."form_6765_overrides" OWNER TO "postgres";
 
-CREATE INDEX "idx_augusta_rule_details_strategy_detail_id" ON "public"."augusta_rule_details" USING "btree" ("strategy_detail_id");
 
+CREATE TABLE IF NOT EXISTS "public"."hire_children_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "children" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
+    "total_salaries" numeric(12,2) DEFAULT 0 NOT NULL,
+    "state_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "federal_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "fica_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_billing_events_account_id" ON "public"."billing_events" USING "btree" ("account_id");
+ALTER TABLE "public"."hire_children_details" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."leads" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "user_id" "uuid",
+    "name" "text" NOT NULL,
+    "email" "text",
+    "phone" "text",
+    "status" "text" DEFAULT 'new'::"text",
+    "notes" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_billing_events_created_at" ON "public"."billing_events" USING "btree" ("created_at" DESC);
 
+ALTER TABLE "public"."leads" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_billing_events_processed" ON "public"."billing_events" USING "btree" ("processed", "created_at") WHERE ("processed" = false);
+CREATE TABLE IF NOT EXISTS "public"."personal_years" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "client_id" "uuid" NOT NULL,
+    "year" integer NOT NULL,
+    "wages_income" numeric(12,2) DEFAULT 0,
+    "passive_income" numeric(12,2) DEFAULT 0,
+    "unearned_income" numeric(12,2) DEFAULT 0,
+    "capital_gains" numeric(12,2) DEFAULT 0,
+    "long_term_capital_gains" numeric(12,2) DEFAULT 0,
+    "household_income" numeric(12,2) DEFAULT 0,
+    "ordinary_income" numeric(12,2) DEFAULT 0,
+    "is_active" boolean DEFAULT true,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."personal_years" OWNER TO "postgres";
 
-CREATE INDEX "idx_billing_events_type" ON "public"."billing_events" USING "btree" ("event_type");
 
+CREATE TABLE IF NOT EXISTS "public"."profiles" (
+    "id" "uuid" NOT NULL,
+    "email" "text" NOT NULL,
+    "full_name" "text",
+    "role" "text" DEFAULT 'user'::"text",
+    "is_admin" boolean DEFAULT false,
+    "has_completed_tax_profile" boolean DEFAULT false,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_billing_invoices_account_id" ON "public"."billing_invoices" USING "btree" ("account_id");
+ALTER TABLE "public"."profiles" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."proposal_assignments" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "proposal_id" "uuid" NOT NULL,
+    "expert_id" "uuid",
+    "assigned_by" "uuid",
+    "assigned_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "submitted_to_expert_at" timestamp with time zone,
+    "expert_response_at" timestamp with time zone,
+    "expert_status" "text" DEFAULT 'assigned'::"text",
+    "notes" "text",
+    "priority" "text" DEFAULT 'medium'::"text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    CONSTRAINT "proposal_assignments_expert_status_check" CHECK (("expert_status" = ANY (ARRAY['assigned'::"text", 'contacted'::"text", 'in_progress'::"text", 'completed'::"text", 'declined'::"text"]))),
+    CONSTRAINT "proposal_assignments_priority_check" CHECK (("priority" = ANY (ARRAY['low'::"text", 'medium'::"text", 'high'::"text", 'urgent'::"text"])))
+);
 
-CREATE INDEX "idx_billing_invoices_due_date" ON "public"."billing_invoices" USING "btree" ("due_date");
 
+ALTER TABLE "public"."proposal_assignments" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_billing_invoices_number" ON "public"."billing_invoices" USING "btree" ("invoice_number");
+CREATE TABLE IF NOT EXISTS "public"."proposal_timeline" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "proposal_id" "uuid" NOT NULL,
+    "status_from" "text",
+    "status_to" "text" NOT NULL,
+    "changed_by" "uuid",
+    "changed_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "notes" "text",
+    "metadata" "jsonb" DEFAULT '{}'::"jsonb"
+);
 
 
+ALTER TABLE "public"."proposal_timeline" OWNER TO "postgres";
 
-CREATE INDEX "idx_billing_invoices_status" ON "public"."billing_invoices" USING "btree" ("status");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_areas" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "name" "text" NOT NULL,
+    "category_id" "uuid" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "description" "text"
+);
 
 
-CREATE INDEX "idx_billing_invoices_subscription_id" ON "public"."billing_invoices" USING "btree" ("subscription_id");
+ALTER TABLE "public"."rd_areas" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_focuses" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "name" "text" NOT NULL,
+    "area_id" "uuid" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "description" "text"
+);
 
-CREATE INDEX "idx_bulk_operation_results_bulk_id" ON "public"."bulk_operation_results" USING "btree" ("bulk_operation_id");
 
+ALTER TABLE "public"."rd_focuses" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_bulk_operation_results_profile_id" ON "public"."bulk_operation_results" USING "btree" ("target_profile_id");
+CREATE TABLE IF NOT EXISTS "public"."rd_research_activities" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "title" "text" NOT NULL,
+    "focus_id" "uuid" NOT NULL,
+    "is_active" boolean DEFAULT true,
+    "default_roles" "jsonb" NOT NULL,
+    "default_steps" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "focus" "text",
+    "category" "text",
+    "area" "text",
+    "research_activity" "text",
+    "subcomponent" "text",
+    "phase" "text",
+    "step" "text",
+    "deactivated_at" timestamp without time zone,
+    "deactivation_reason" "text",
+    "business_id" "uuid"
+);
 
 
+ALTER TABLE "public"."rd_research_activities" OWNER TO "postgres";
 
-CREATE INDEX "idx_bulk_operation_results_sequence" ON "public"."bulk_operation_results" USING "btree" ("bulk_operation_id", "sequence_number");
 
+COMMENT ON COLUMN "public"."rd_research_activities"."business_id" IS 'Foreign key to rd_businesses. NULL = global activity available to all businesses. 
+        Non-NULL = business-specific activity for IP protection.';
 
 
-CREATE INDEX "idx_bulk_operation_results_status" ON "public"."bulk_operation_results" USING "btree" ("status");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_research_categories" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "name" "text" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "description" "text"
+);
 
 
-CREATE INDEX "idx_bulk_operations_can_rollback" ON "public"."bulk_operations" USING "btree" ("can_rollback", "completed_at" DESC) WHERE ("can_rollback" = true);
+ALTER TABLE "public"."rd_research_categories" OWNER TO "postgres";
 
 
-
-CREATE INDEX "idx_bulk_operations_completed_at" ON "public"."bulk_operations" USING "btree" ("completed_at" DESC) WHERE ("completed_at" IS NOT NULL);
-
-
-
-CREATE INDEX "idx_bulk_operations_initiated_by" ON "public"."bulk_operations" USING "btree" ("initiated_by");
-
-
-
-CREATE INDEX "idx_bulk_operations_status" ON "public"."bulk_operations" USING "btree" ("status", "created_at" DESC);
-
-
-
-CREATE INDEX "idx_bulk_operations_type" ON "public"."bulk_operations" USING "btree" ("operation_type");
-
-
-
-CREATE INDEX "idx_business_years_business_id" ON "public"."business_years" USING "btree" ("business_id");
-
-
-
-CREATE INDEX "idx_business_years_year" ON "public"."business_years" USING "btree" ("year");
-
-
-
-CREATE INDEX "idx_businesses_client_id" ON "public"."businesses" USING "btree" ("client_id");
-
-
-
-CREATE INDEX "idx_businesses_entity_type" ON "public"."businesses" USING "btree" ("entity_type");
-
-
-
-CREATE INDEX "idx_businesses_is_active" ON "public"."businesses" USING "btree" ("is_active");
-
-
+CREATE TABLE IF NOT EXISTS "public"."rd_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "activity_id" "uuid" NOT NULL,
+    "title" "text" NOT NULL,
+    "phase" "text" NOT NULL,
+    "step" "text",
+    "hint" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "general_description" "text",
+    "goal" "text",
+    "hypothesis" "text",
+    "alternatives" "text",
+    "uncertainties" "text",
+    "developmental_process" "text",
+    "primary_goal" "text",
+    "expected_outcome_type" "text",
+    "cpt_codes" "text",
+    "cdt_codes" "text",
+    "alternative_paths" "text"
+);
 
-CREATE INDEX "idx_calculations_user_id_profiles" ON "public"."calculations" USING "btree" ("user_id");
 
+ALTER TABLE "public"."rd_subcomponents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_centralized_businesses_created_at" ON "public"."centralized_businesses" USING "btree" ("created_at");
+CREATE OR REPLACE VIEW "public"."rd_activity_hierarchy" AS
+ SELECT "cat"."name" AS "category",
+    "area"."name" AS "area",
+    "focus"."name" AS "focus",
+    "act"."title" AS "activity_title",
+    "sub"."title" AS "subcomponent_title",
+    "sub"."phase",
+    "sub"."step",
+    "sub"."hint",
+    "sub"."general_description",
+    "sub"."goal",
+    "sub"."hypothesis",
+    "sub"."alternatives",
+    "sub"."uncertainties",
+    "sub"."developmental_process",
+    "sub"."primary_goal",
+    "sub"."expected_outcome_type",
+    "sub"."cpt_codes",
+    "sub"."cdt_codes",
+    "sub"."alternative_paths"
+   FROM (((("public"."rd_research_categories" "cat"
+     JOIN "public"."rd_areas" "area" ON (("area"."category_id" = "cat"."id")))
+     JOIN "public"."rd_focuses" "focus" ON (("focus"."area_id" = "area"."id")))
+     JOIN "public"."rd_research_activities" "act" ON (("act"."focus_id" = "focus"."id")))
+     JOIN "public"."rd_subcomponents" "sub" ON (("sub"."activity_id" = "act"."id")))
+  ORDER BY "cat"."name", "area"."name", "focus"."name", "act"."title", "sub"."step";
 
 
+ALTER TABLE "public"."rd_activity_hierarchy" OWNER TO "postgres";
 
-CREATE INDEX "idx_charitable_donation_details_strategy_detail_id" ON "public"."charitable_donation_details" USING "btree" ("strategy_detail_id");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_billable_time_summary" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid",
+    "total_procedures_count" integer DEFAULT 0,
+    "total_billed_units" integer DEFAULT 0,
+    "total_billed_amount" numeric(15,2) DEFAULT 0,
+    "estimated_total_time_hours" numeric(10,2) DEFAULT 0,
+    "current_practice_percentage" numeric(5,2),
+    "calculated_billable_percentage" numeric(5,2),
+    "recommended_percentage" numeric(5,2),
+    "percentage_variance" numeric(5,2),
+    "last_calculated" timestamp without time zone DEFAULT "now"(),
+    "calculation_source" "text" DEFAULT 'ai_analysis'::"text",
+    "notes" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_client_activities_client_id" ON "public"."client_activities" USING "btree" ("client_id");
+ALTER TABLE "public"."rd_billable_time_summary" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_business_years" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "year" integer NOT NULL,
+    "gross_receipts" numeric(15,2) NOT NULL,
+    "total_qre" numeric(15,2) DEFAULT 0,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "qc_status" character varying(50) DEFAULT 'pending'::character varying,
+    "qc_approved_by" "uuid",
+    "qc_approved_at" timestamp without time zone,
+    "payment_received" boolean DEFAULT false,
+    "payment_received_at" timestamp without time zone,
+    "qc_notes" "text",
+    "payment_amount" numeric(15,2),
+    "documents_released" boolean DEFAULT false,
+    "documents_released_at" timestamp without time zone,
+    "documents_released_by" "uuid",
+    "employee_qre" numeric(15,2) DEFAULT 0,
+    "contractor_qre" numeric(15,2) DEFAULT 0,
+    "supply_qre" numeric(15,2) DEFAULT 0,
+    "qre_locked" boolean DEFAULT false,
+    "federal_credit" numeric(15,2) DEFAULT 0,
+    "state_credit" numeric(15,2) DEFAULT 0,
+    "credits_locked" boolean DEFAULT false,
+    "credits_calculated_at" timestamp with time zone,
+    "credits_locked_by" "uuid",
+    "credits_locked_at" timestamp with time zone
+);
 
-CREATE INDEX "idx_client_activities_created" ON "public"."client_activities" USING "btree" ("created_at" DESC);
 
+ALTER TABLE "public"."rd_business_years" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_client_activities_priority" ON "public"."client_activities" USING "btree" ("priority");
+COMMENT ON COLUMN "public"."rd_business_years"."employee_qre" IS 'Locked employee QRE value for this business year';
 
 
 
-CREATE INDEX "idx_client_activities_type" ON "public"."client_activities" USING "btree" ("activity_type");
+COMMENT ON COLUMN "public"."rd_business_years"."contractor_qre" IS 'Locked contractor QRE value for this business year';
 
 
 
-CREATE INDEX "idx_client_activities_unread" ON "public"."client_activities" USING "btree" ("is_read") WHERE ("is_read" = false);
+COMMENT ON COLUMN "public"."rd_business_years"."supply_qre" IS 'Locked supply QRE value for this business year';
 
 
 
-CREATE INDEX "idx_client_activities_user_id" ON "public"."client_activities" USING "btree" ("user_id");
+COMMENT ON COLUMN "public"."rd_business_years"."qre_locked" IS 'Whether the QRE values are locked (not automatically calculated)';
 
 
 
-CREATE INDEX "idx_client_dashboard_metrics_client" ON "public"."client_dashboard_metrics" USING "btree" ("client_id");
+COMMENT ON COLUMN "public"."rd_business_years"."federal_credit" IS 'Federal R&D tax credit amount (editable and lockable)';
 
 
 
-CREATE INDEX "idx_client_dashboard_metrics_expires" ON "public"."client_dashboard_metrics" USING "btree" ("expires_at");
+COMMENT ON COLUMN "public"."rd_business_years"."state_credit" IS 'State R&D tax credit amount (editable and lockable)';
 
 
 
-CREATE INDEX "idx_client_dashboard_metrics_type" ON "public"."client_dashboard_metrics" USING "btree" ("metric_type");
+COMMENT ON COLUMN "public"."rd_business_years"."credits_locked" IS 'Whether the credit values are locked from further calculation updates';
 
 
 
-CREATE INDEX "idx_client_engagement_last_activity" ON "public"."client_engagement_status" USING "btree" ("last_activity_at" DESC);
+COMMENT ON COLUMN "public"."rd_business_years"."credits_calculated_at" IS 'When the credits were last calculated or manually updated';
 
 
 
-CREATE INDEX "idx_client_engagement_pending" ON "public"."client_engagement_status" USING "btree" ("pending_actions") WHERE ("pending_actions" > 0);
+COMMENT ON COLUMN "public"."rd_business_years"."credits_locked_by" IS 'Who locked the credit values';
 
 
 
-CREATE INDEX "idx_client_engagement_status" ON "public"."client_engagement_status" USING "btree" ("status");
+COMMENT ON COLUMN "public"."rd_business_years"."credits_locked_at" IS 'When the credit values were locked';
 
 
 
-CREATE INDEX "idx_client_users_active" ON "public"."client_users" USING "btree" ("is_active") WHERE ("is_active" = true);
+CREATE TABLE IF NOT EXISTS "public"."rd_businesses" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "client_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "ein" "text",
+    "start_year" integer NOT NULL,
+    "domicile_state" "text" NOT NULL,
+    "contact_info" "jsonb" NOT NULL,
+    "is_controlled_grp" boolean DEFAULT false,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "historical_data" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
+    "website" "text",
+    "image_path" "text",
+    "entity_type" "public"."entity_type" DEFAULT 'OTHER'::"public"."entity_type" NOT NULL,
+    "naics" character varying(10),
+    "category_id" "uuid",
+    "github_token" "text",
+    "portal_email" "text",
+    CONSTRAINT "check_historical_data_structure" CHECK ("public"."validate_historical_data"("historical_data"))
+);
 
 
+ALTER TABLE "public"."rd_businesses" OWNER TO "postgres";
 
-CREATE INDEX "idx_client_users_client_id" ON "public"."client_users" USING "btree" ("client_id");
 
+COMMENT ON COLUMN "public"."rd_businesses"."ein" IS 'Employer Identification Number (EIN) - nullable because businesses may not have EIN during initial enrollment';
 
 
-CREATE INDEX "idx_client_users_role" ON "public"."client_users" USING "btree" ("role");
 
+COMMENT ON COLUMN "public"."rd_businesses"."historical_data" IS 'JSON array of historical data objects with structure: [{"year": 2020, "gross_receipts": 1000000, "qre": 50000}, ...] Used for R&D tax credit base period calculations.';
 
 
-CREATE INDEX "idx_client_users_user_id" ON "public"."client_users" USING "btree" ("user_id");
 
+COMMENT ON COLUMN "public"."rd_businesses"."website" IS 'Business website URL';
 
 
-CREATE INDEX "idx_clients_account_id" ON "public"."clients" USING "btree" ("account_id");
 
+COMMENT ON COLUMN "public"."rd_businesses"."image_path" IS 'Path to company logo image in storage - publicly accessible URL';
 
 
-CREATE INDEX "idx_clients_archived" ON "public"."clients" USING "btree" ("archived");
 
+COMMENT ON COLUMN "public"."rd_businesses"."category_id" IS 'Business research category - determines report type (Healthcare vs Software)';
 
 
-CREATE INDEX "idx_clients_city" ON "public"."clients" USING "btree" ("city");
 
+COMMENT ON COLUMN "public"."rd_businesses"."github_token" IS 'Client-specific GitHub access token for Software R&D repository analysis';
 
 
-CREATE INDEX "idx_clients_created_at" ON "public"."clients" USING "btree" ("created_at");
 
+COMMENT ON COLUMN "public"."rd_businesses"."portal_email" IS 'Override email address for client portal access and magic link generation. If set, this email will be used instead of the client email.';
 
 
-CREATE INDEX "idx_clients_created_by" ON "public"."clients" USING "btree" ("created_by");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_client_portal_tokens" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "token" character varying(255),
+    "expires_at" timestamp without time zone,
+    "created_by" "uuid",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "is_active" boolean DEFAULT true,
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    "access_count" integer DEFAULT 0,
+    "last_accessed_at" timestamp without time zone,
+    "last_accessed_ip" "inet"
+);
 
 
-CREATE INDEX "idx_clients_email" ON "public"."clients" USING "btree" ("email");
+ALTER TABLE "public"."rd_client_portal_tokens" OWNER TO "postgres";
 
 
+COMMENT ON TABLE "public"."rd_client_portal_tokens" IS 'Secure tokens for client portal access';
 
-CREATE INDEX "idx_clients_has_completed_tax_profile" ON "public"."clients" USING "btree" ("has_completed_tax_profile");
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_contractor_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "contractor_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid" NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "is_included" boolean DEFAULT true NOT NULL,
+    "baseline_applied_percent" numeric(5,2) DEFAULT 0 NOT NULL,
+    "practice_percentage" numeric(5,2),
+    "year_percentage" numeric(5,2),
+    "frequency_percentage" numeric(5,2),
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "user_id" "uuid",
+    "baseline_practice_percentage" numeric,
+    "baseline_time_percentage" numeric
+);
 
-CREATE INDEX "idx_clients_primary_affiliate_id" ON "public"."clients" USING "btree" ("primary_affiliate_id");
 
+ALTER TABLE "public"."rd_contractor_subcomponents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_clients_zip_code" ON "public"."clients" USING "btree" ("zip_code");
+CREATE TABLE IF NOT EXISTS "public"."rd_contractor_year_data" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "cost_amount" numeric(15,2) NOT NULL,
+    "applied_percent" numeric(5,2) NOT NULL,
+    "activity_link" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "contractor_id" "uuid",
+    "user_id" "uuid",
+    "activity_roles" "jsonb",
+    "calculated_qre" numeric
+);
 
 
+ALTER TABLE "public"."rd_contractor_year_data" OWNER TO "postgres";
 
-CREATE INDEX "idx_commission_transactions_proposal_id" ON "public"."commission_transactions" USING "btree" ("proposal_id");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_contractors" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "role" "text",
+    "annual_cost" numeric(10,2) NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "user_id" "uuid",
+    "first_name" "text",
+    "last_name" "text",
+    "role_id" "uuid",
+    "is_owner" boolean DEFAULT false,
+    "amount" numeric(15,2),
+    "calculated_qre" numeric(15,2)
+);
 
 
-CREATE INDEX "idx_convertible_tax_bonds_details_strategy_detail_id" ON "public"."convertible_tax_bonds_details" USING "btree" ("strategy_detail_id");
+ALTER TABLE "public"."rd_contractors" OWNER TO "postgres";
 
 
-
-CREATE INDEX "idx_cost_segregation_details_strategy_detail_id" ON "public"."cost_segregation_details" USING "btree" ("strategy_detail_id");
-
-
-
-CREATE INDEX "idx_daily_usage_summary_date" ON "public"."daily_usage_summary" USING "btree" ("usage_date" DESC);
-
-
-
-CREATE INDEX "idx_daily_usage_summary_tool" ON "public"."daily_usage_summary" USING "btree" ("tool_id", "usage_date" DESC);
-
-
-
-CREATE UNIQUE INDEX "idx_daily_usage_summary_unique" ON "public"."daily_usage_summary" USING "btree" ("usage_date", "tool_id");
-
-
-
-CREATE INDEX "idx_document_access_logs_client_id" ON "public"."document_access_logs" USING "btree" ("client_id");
-
-
-
-CREATE INDEX "idx_document_access_logs_created_at" ON "public"."document_access_logs" USING "btree" ("created_at");
-
-
-
-CREATE INDEX "idx_document_access_logs_document_id" ON "public"."document_access_logs" USING "btree" ("document_id");
-
-
-
-CREATE INDEX "idx_document_access_logs_user_id" ON "public"."document_access_logs" USING "btree" ("user_id");
-
-
-
-CREATE INDEX "idx_document_comments_document_id" ON "public"."document_comments" USING "btree" ("document_id");
-
-
-
-CREATE INDEX "idx_document_comments_parent_comment_id" ON "public"."document_comments" USING "btree" ("parent_comment_id");
-
+CREATE TABLE IF NOT EXISTS "public"."rd_document_links" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "document_id" "uuid" NOT NULL,
+    "link_type" "text" NOT NULL,
+    "supply_id" "uuid",
+    "contractor_id" "uuid",
+    "amount_allocated" numeric(15,2),
+    "allocation_percentage" numeric(5,2),
+    "notes" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    CONSTRAINT "rd_document_links_link_type_check" CHECK (("link_type" = ANY (ARRAY['supply'::"text", 'contractor'::"text"]))),
+    CONSTRAINT "valid_link" CHECK (((("link_type" = 'supply'::"text") AND ("supply_id" IS NOT NULL) AND ("contractor_id" IS NULL)) OR (("link_type" = 'contractor'::"text") AND ("contractor_id" IS NOT NULL) AND ("supply_id" IS NULL))))
+);
 
 
-CREATE INDEX "idx_document_files_client_id" ON "public"."document_files" USING "btree" ("client_id");
+ALTER TABLE "public"."rd_document_links" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_employee_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "employee_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid" NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "is_included" boolean DEFAULT true NOT NULL,
+    "baseline_applied_percent" numeric(5,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "practice_percentage" numeric,
+    "year_percentage" numeric,
+    "frequency_percentage" numeric,
+    "baseline_practice_percentage" numeric,
+    "baseline_time_percentage" numeric,
+    "user_id" "uuid"
+);
 
-CREATE INDEX "idx_document_files_created_at" ON "public"."document_files" USING "btree" ("created_at");
 
+ALTER TABLE "public"."rd_employee_subcomponents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_document_files_document_type" ON "public"."document_files" USING "btree" ("document_type");
+CREATE TABLE IF NOT EXISTS "public"."rd_employee_year_data" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "employee_id" "uuid" NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "applied_percent" numeric(5,2) NOT NULL,
+    "calculated_qre" numeric(15,2) NOT NULL,
+    "activity_roles" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "user_id" "uuid",
+    "type" "text"
+);
 
 
+ALTER TABLE "public"."rd_employee_year_data" OWNER TO "postgres";
 
-CREATE INDEX "idx_document_files_folder_id" ON "public"."document_files" USING "btree" ("folder_id");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_employees" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "first_name" "text" NOT NULL,
+    "role_id" "uuid",
+    "is_owner" boolean DEFAULT false,
+    "annual_wage" numeric(15,2) NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "last_name" "text",
+    "user_id" "uuid"
+);
 
 
-CREATE INDEX "idx_document_files_is_current_version" ON "public"."document_files" USING "btree" ("is_current_version");
+ALTER TABLE "public"."rd_employees" OWNER TO "postgres";
 
 
+COMMENT ON COLUMN "public"."rd_employees"."role_id" IS 'Role assignment for employee - nullable to allow employees without assigned roles';
 
-CREATE INDEX "idx_document_files_processing_status" ON "public"."document_files" USING "btree" ("processing_status");
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_expenses" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "step_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid" NOT NULL,
+    "employee_id" "uuid",
+    "contractor_id" "uuid",
+    "supply_id" "uuid",
+    "category" "text" NOT NULL,
+    "first_name" "text",
+    "last_name" "text",
+    "role_name" "text",
+    "supply_name" "text",
+    "research_activity_title" "text" NOT NULL,
+    "research_activity_practice_percent" numeric(5,2) NOT NULL,
+    "step_name" "text" NOT NULL,
+    "subcomponent_title" "text" NOT NULL,
+    "subcomponent_year_percent" numeric(5,2) NOT NULL,
+    "subcomponent_frequency_percent" numeric(5,2) NOT NULL,
+    "subcomponent_time_percent" numeric(5,2) NOT NULL,
+    "total_cost" numeric(10,2) NOT NULL,
+    "applied_percent" numeric(5,2) NOT NULL,
+    "baseline_applied_percent" numeric(5,2) NOT NULL,
+    "employee_practice_percent" numeric(5,2),
+    "employee_time_percent" numeric(5,2),
+    "notes" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    CONSTRAINT "rd_expenses_category_check" CHECK (("category" = ANY (ARRAY['Employee'::"text", 'Contractor'::"text", 'Supply'::"text"])))
+);
 
-CREATE INDEX "idx_document_files_tags" ON "public"."document_files" USING "gin" ("tags");
 
+ALTER TABLE "public"."rd_expenses" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_document_files_tax_year" ON "public"."document_files" USING "btree" ("tax_year");
+CREATE TABLE IF NOT EXISTS "public"."rd_federal_credit" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "client_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid",
+    "research_activity_name" "text",
+    "direct_research_wages" numeric(15,2) DEFAULT 0,
+    "supplies_expenses" numeric(15,2) DEFAULT 0,
+    "contractor_expenses" numeric(15,2) DEFAULT 0,
+    "total_qre" numeric(15,2) DEFAULT 0,
+    "subcomponent_count" integer DEFAULT 0,
+    "subcomponent_groups" "text",
+    "applied_percent" numeric(5,2) DEFAULT 0,
+    "line_49f_description" "text",
+    "ai_generation_timestamp" timestamp without time zone,
+    "ai_prompt_used" "text",
+    "ai_response_raw" "text",
+    "federal_credit_amount" numeric(15,2) DEFAULT 0,
+    "federal_credit_percentage" numeric(5,2) DEFAULT 0,
+    "calculation_method" "text",
+    "industry_type" "text",
+    "focus_area" "text",
+    "general_description" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    "created_by" "uuid",
+    "updated_by" "uuid",
+    "version" integer DEFAULT 1,
+    "is_latest" boolean DEFAULT true,
+    "previous_version_id" "uuid",
+    "calculation_timestamp" timestamp without time zone DEFAULT "now"(),
+    "data_snapshot" "jsonb",
+    "notes" "text",
+    CONSTRAINT "valid_amounts" CHECK ((("direct_research_wages" >= (0)::numeric) AND ("supplies_expenses" >= (0)::numeric) AND ("contractor_expenses" >= (0)::numeric))),
+    CONSTRAINT "valid_percentages" CHECK ((("applied_percent" >= (0)::numeric) AND ("applied_percent" <= (100)::numeric))),
+    CONSTRAINT "valid_subcomponent_count" CHECK (("subcomponent_count" >= 0))
+);
 
 
+ALTER TABLE "public"."rd_federal_credit" OWNER TO "postgres";
 
-CREATE INDEX "idx_document_files_uploaded_by" ON "public"."document_files" USING "btree" ("uploaded_by");
 
+COMMENT ON TABLE "public"."rd_federal_credit" IS 'Audit log and snapshot table for R&D federal credit calculations';
 
 
-CREATE INDEX "idx_document_folders_client_id" ON "public"."document_folders" USING "btree" ("client_id");
 
+COMMENT ON COLUMN "public"."rd_federal_credit"."line_49f_description" IS 'AI-generated description for Form 6765 Line 49(f)';
 
 
-CREATE INDEX "idx_document_folders_parent_folder_id" ON "public"."document_folders" USING "btree" ("parent_folder_id");
 
+COMMENT ON COLUMN "public"."rd_federal_credit"."version" IS 'Version number for tracking changes';
 
 
-CREATE INDEX "idx_document_folders_path" ON "public"."document_folders" USING "gin" ("path" "public"."gin_trgm_ops");
 
+COMMENT ON COLUMN "public"."rd_federal_credit"."is_latest" IS 'Flag indicating if this is the most recent version';
 
 
-CREATE INDEX "idx_document_processing_jobs_document_id" ON "public"."document_processing_jobs" USING "btree" ("document_id");
 
+COMMENT ON COLUMN "public"."rd_federal_credit"."data_snapshot" IS 'JSON snapshot of all calculation inputs and intermediate values';
 
 
-CREATE INDEX "idx_document_processing_jobs_status" ON "public"."document_processing_jobs" USING "btree" ("status");
 
+CREATE OR REPLACE VIEW "public"."rd_federal_credit_latest" AS
+ SELECT "rd_federal_credit"."id",
+    "rd_federal_credit"."business_year_id",
+    "rd_federal_credit"."client_id",
+    "rd_federal_credit"."research_activity_id",
+    "rd_federal_credit"."research_activity_name",
+    "rd_federal_credit"."direct_research_wages",
+    "rd_federal_credit"."supplies_expenses",
+    "rd_federal_credit"."contractor_expenses",
+    "rd_federal_credit"."total_qre",
+    "rd_federal_credit"."subcomponent_count",
+    "rd_federal_credit"."subcomponent_groups",
+    "rd_federal_credit"."applied_percent",
+    "rd_federal_credit"."line_49f_description",
+    "rd_federal_credit"."ai_generation_timestamp",
+    "rd_federal_credit"."ai_prompt_used",
+    "rd_federal_credit"."ai_response_raw",
+    "rd_federal_credit"."federal_credit_amount",
+    "rd_federal_credit"."federal_credit_percentage",
+    "rd_federal_credit"."calculation_method",
+    "rd_federal_credit"."industry_type",
+    "rd_federal_credit"."focus_area",
+    "rd_federal_credit"."general_description",
+    "rd_federal_credit"."created_at",
+    "rd_federal_credit"."updated_at",
+    "rd_federal_credit"."created_by",
+    "rd_federal_credit"."updated_by",
+    "rd_federal_credit"."version",
+    "rd_federal_credit"."is_latest",
+    "rd_federal_credit"."previous_version_id",
+    "rd_federal_credit"."calculation_timestamp",
+    "rd_federal_credit"."data_snapshot",
+    "rd_federal_credit"."notes"
+   FROM "public"."rd_federal_credit"
+  WHERE ("rd_federal_credit"."is_latest" = true);
 
 
-CREATE INDEX "idx_document_shares_client_id" ON "public"."document_shares" USING "btree" ("client_id");
+ALTER TABLE "public"."rd_federal_credit_latest" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_federal_credit_results" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "standard_credit" numeric(15,2),
+    "standard_adjusted_credit" numeric(15,2),
+    "standard_base_percentage" numeric(5,4),
+    "standard_fixed_base_amount" numeric(15,2),
+    "standard_incremental_qre" numeric(15,2),
+    "standard_is_eligible" boolean DEFAULT false,
+    "standard_missing_data" "jsonb",
+    "asc_credit" numeric(15,2),
+    "asc_adjusted_credit" numeric(15,2),
+    "asc_avg_prior_qre" numeric(15,2),
+    "asc_incremental_qre" numeric(15,2),
+    "asc_is_startup" boolean DEFAULT false,
+    "asc_missing_data" "jsonb",
+    "selected_method" "text",
+    "use_280c" boolean DEFAULT false,
+    "corporate_tax_rate" numeric(5,4) DEFAULT 0.21,
+    "total_federal_credit" numeric(15,2),
+    "total_state_credits" numeric(15,2),
+    "total_credits" numeric(15,2),
+    "calculation_date" timestamp with time zone DEFAULT "now"(),
+    "qre_breakdown" "jsonb",
+    "historical_data" "jsonb",
+    "state_credits" "jsonb",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    CONSTRAINT "rd_federal_credit_results_selected_method_check" CHECK (("selected_method" = ANY (ARRAY['standard'::"text", 'asc'::"text"])))
+);
 
-CREATE INDEX "idx_document_shares_document_id" ON "public"."document_shares" USING "btree" ("document_id");
 
+ALTER TABLE "public"."rd_federal_credit_results" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_document_shares_expires_at" ON "public"."document_shares" USING "btree" ("expires_at");
+CREATE TABLE IF NOT EXISTS "public"."rd_procedure_analysis" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "document_id" "uuid" NOT NULL,
+    "procedure_code" "text" NOT NULL,
+    "procedure_description" "text",
+    "procedure_category" "text",
+    "billed_units" integer DEFAULT 0,
+    "billed_amount" numeric(15,2) DEFAULT 0,
+    "frequency_annual" integer,
+    "ai_confidence_score" numeric(3,2),
+    "extraction_method" "text" DEFAULT 'ai'::"text",
+    "raw_data" "jsonb",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    CONSTRAINT "rd_procedure_analysis_ai_confidence_score_check" CHECK ((("ai_confidence_score" >= (0)::numeric) AND ("ai_confidence_score" <= (1)::numeric))),
+    CONSTRAINT "rd_procedure_analysis_extraction_method_check" CHECK (("extraction_method" = ANY (ARRAY['ai'::"text", 'manual'::"text"])))
+);
 
 
+ALTER TABLE "public"."rd_procedure_analysis" OWNER TO "postgres";
 
-CREATE INDEX "idx_document_shares_share_token" ON "public"."document_shares" USING "btree" ("share_token");
 
-
-
-CREATE INDEX "idx_document_shares_shared_with_user_id" ON "public"."document_shares" USING "btree" ("shared_with_user_id");
-
-
-
-CREATE INDEX "idx_document_versions_document_id" ON "public"."document_versions" USING "btree" ("document_id");
-
-
-
-CREATE INDEX "idx_experts_account_id" ON "public"."experts" USING "btree" ("account_id");
-
-
-
-CREATE INDEX "idx_family_management_company_details_strategy_detail_id" ON "public"."family_management_company_details" USING "btree" ("strategy_detail_id");
-
-
-
-CREATE INDEX "idx_feature_usage_category" ON "public"."feature_usage_tracking" USING "btree" ("feature_category");
-
-
-
-CREATE INDEX "idx_feature_usage_last_used" ON "public"."feature_usage_tracking" USING "btree" ("last_used_at" DESC);
+CREATE TABLE IF NOT EXISTS "public"."rd_procedure_research_links" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "procedure_analysis_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid",
+    "allocation_percentage" numeric(5,2) NOT NULL,
+    "estimated_research_time_hours" numeric(10,2),
+    "ai_reasoning" "text",
+    "ai_confidence_score" numeric(3,2),
+    "status" "text" DEFAULT 'pending'::"text",
+    "manual_override" boolean DEFAULT false,
+    "approved_by" "uuid",
+    "approval_notes" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    CONSTRAINT "rd_procedure_research_links_ai_confidence_score_check" CHECK ((("ai_confidence_score" >= (0)::numeric) AND ("ai_confidence_score" <= (1)::numeric))),
+    CONSTRAINT "rd_procedure_research_links_allocation_percentage_check" CHECK ((("allocation_percentage" > (0)::numeric) AND ("allocation_percentage" <= (100)::numeric))),
+    CONSTRAINT "rd_procedure_research_links_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'approved'::"text", 'rejected'::"text", 'modified'::"text"])))
+);
 
 
+ALTER TABLE "public"."rd_procedure_research_links" OWNER TO "postgres";
 
-CREATE INDEX "idx_feature_usage_profile" ON "public"."feature_usage_tracking" USING "btree" ("profile_id");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_qc_document_controls" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "document_type" character varying(50) NOT NULL,
+    "is_released" boolean DEFAULT false,
+    "released_at" timestamp without time zone,
+    "released_by" "uuid",
+    "release_notes" "text",
+    "requires_jurat" boolean DEFAULT false,
+    "requires_payment" boolean DEFAULT false,
+    "qc_reviewer" "uuid",
+    "qc_reviewed_at" timestamp without time zone,
+    "qc_review_notes" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    "qc_approver_name" "text",
+    "qc_approver_credentials" "text",
+    "qc_approved_date" timestamp with time zone,
+    "qc_approver_ip_address" "text"
+);
 
 
-CREATE INDEX "idx_hire_children_details_strategy_detail_id" ON "public"."hire_children_details" USING "btree" ("strategy_detail_id");
+ALTER TABLE "public"."rd_qc_document_controls" OWNER TO "postgres";
 
 
+COMMENT ON TABLE "public"."rd_qc_document_controls" IS 'Quality control and document release management';
 
-CREATE INDEX "idx_invitations_client_id" ON "public"."invitations" USING "btree" ("client_id");
 
 
+COMMENT ON COLUMN "public"."rd_qc_document_controls"."qc_approver_name" IS 'Name of the QC approver';
 
-CREATE INDEX "idx_invitations_email" ON "public"."invitations" USING "btree" ("email");
 
 
+COMMENT ON COLUMN "public"."rd_qc_document_controls"."qc_approver_credentials" IS 'Credentials/title of the QC approver';
 
-CREATE INDEX "idx_invitations_expires_at" ON "public"."invitations" USING "btree" ("expires_at");
 
 
+COMMENT ON COLUMN "public"."rd_qc_document_controls"."qc_approved_date" IS 'Date when QC was approved';
 
-CREATE INDEX "idx_invitations_invited_by" ON "public"."invitations" USING "btree" ("invited_by");
 
 
+COMMENT ON COLUMN "public"."rd_qc_document_controls"."qc_approver_ip_address" IS 'IP address of the QC approver for audit trail';
 
-CREATE INDEX "idx_invitations_status" ON "public"."invitations" USING "btree" ("status");
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_reports" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "business_year_id" "uuid",
+    "type" "public"."rd_report_type" NOT NULL,
+    "generated_text" "text" NOT NULL,
+    "editable_text" "text",
+    "ai_version" "text" NOT NULL,
+    "locked" boolean DEFAULT false,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "generated_html" "text",
+    "filing_guide" "text",
+    "state_gross_receipts" "jsonb" DEFAULT '{}'::"jsonb",
+    "qc_approved_by" "text",
+    "qc_approved_at" timestamp with time zone,
+    "qc_approver_ip" "text"
+);
 
-CREATE INDEX "idx_invitations_token" ON "public"."invitations" USING "btree" ("token");
 
+ALTER TABLE "public"."rd_reports" OWNER TO "postgres";
 
 
-CREATE UNIQUE INDEX "idx_invitations_unique_pending" ON "public"."invitations" USING "btree" ("client_id", "email") WHERE (("status")::"text" = 'pending'::"text");
+COMMENT ON TABLE "public"."rd_reports" IS 'R&D research reports with basic RLS policies for authenticated users';
 
 
 
-CREATE INDEX "idx_invoices_partner_id" ON "public"."invoices" USING "btree" ("partner_id");
+COMMENT ON COLUMN "public"."rd_reports"."generated_html" IS 'Complete HTML of the generated research report for client access and archival';
 
 
 
-CREATE INDEX "idx_login_attempts_attempted_at" ON "public"."login_attempts" USING "btree" ("attempted_at" DESC);
+COMMENT ON COLUMN "public"."rd_reports"."state_gross_receipts" IS 'Stores state-specific gross receipts data by year for state credit calculations. Format: {"2024": 1000000, "2023": 950000, "2022": 900000, "2021": 850000}';
 
 
 
-CREATE INDEX "idx_login_attempts_email" ON "public"."login_attempts" USING "btree" ("email", "attempted_at" DESC);
+COMMENT ON COLUMN "public"."rd_reports"."qc_approved_by" IS 'Name of the person who approved the QC';
 
 
 
-CREATE INDEX "idx_login_attempts_ip" ON "public"."login_attempts" USING "btree" ("ip_address", "attempted_at" DESC);
+COMMENT ON COLUMN "public"."rd_reports"."qc_approved_at" IS 'Timestamp when QC was approved';
 
 
 
-CREATE INDEX "idx_payment_methods_account_id" ON "public"."payment_methods" USING "btree" ("account_id");
+COMMENT ON COLUMN "public"."rd_reports"."qc_approver_ip" IS 'IP address of the QC approver for audit trail';
 
 
 
-CREATE INDEX "idx_payment_methods_is_default" ON "public"."payment_methods" USING "btree" ("account_id", "is_default") WHERE ("is_default" = true);
+CREATE TABLE IF NOT EXISTS "public"."rd_research_raw" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "category" "text",
+    "area" "text",
+    "focus" "text",
+    "research_activity" "text",
+    "subcomponent" "text",
+    "phase" "text",
+    "step" "text",
+    "hint" "text",
+    "general_description" "text",
+    "goal" "text",
+    "hypothesis" "text",
+    "alternatives" "text",
+    "uncertainties" "text",
+    "developmental_process" "text",
+    "primary_goal" "text",
+    "expected_outcome_type" "text",
+    "cpt_codes" "text",
+    "cdt_codes" "text",
+    "alternative_paths" "text",
+    "uploaded_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."rd_research_raw" OWNER TO "postgres";
 
-CREATE INDEX "idx_payments_account_id" ON "public"."payments" USING "btree" ("account_id");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_research_steps" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "name" character varying(255) NOT NULL,
+    "description" "text",
+    "step_order" integer NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "is_active" boolean DEFAULT true,
+    "deactivated_at" timestamp without time zone,
+    "deactivation_reason" "text",
+    "business_id" "uuid"
+);
 
 
-CREATE INDEX "idx_payments_amount" ON "public"."payments" USING "btree" ("amount_cents" DESC);
+ALTER TABLE "public"."rd_research_steps" OWNER TO "postgres";
 
 
+COMMENT ON COLUMN "public"."rd_research_steps"."step_order" IS 'Numeric order for displaying steps in UI and reports. Lower numbers appear first.';
 
-CREATE INDEX "idx_payments_created_at" ON "public"."payments" USING "btree" ("created_at" DESC);
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_research_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "step_id" "uuid" NOT NULL,
+    "name" character varying(255) NOT NULL,
+    "description" "text",
+    "subcomponent_order" integer NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "hint" "text",
+    "general_description" "text",
+    "goal" "text",
+    "hypothesis" "text",
+    "alternatives" "text",
+    "uncertainties" "text",
+    "developmental_process" "text",
+    "primary_goal" "text",
+    "expected_outcome_type" "text",
+    "cpt_codes" "text",
+    "cdt_codes" "text",
+    "alternative_paths" "text",
+    "is_active" boolean DEFAULT true,
+    "deactivated_at" timestamp without time zone,
+    "deactivation_reason" "text",
+    "business_id" "uuid"
+);
 
-CREATE INDEX "idx_payments_status" ON "public"."payments" USING "btree" ("status");
 
+ALTER TABLE "public"."rd_research_subcomponents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_payments_subscription_id" ON "public"."payments" USING "btree" ("subscription_id");
+CREATE TABLE IF NOT EXISTS "public"."rd_roles" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "parent_id" "uuid",
+    "is_default" boolean DEFAULT false,
+    "business_year_id" "uuid",
+    "baseline_applied_percent" numeric,
+    "type" "text",
+    "description" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."rd_roles" OWNER TO "postgres";
 
-CREATE INDEX "idx_performance_metrics_endpoint" ON "public"."performance_metrics" USING "btree" ("endpoint", "operation_type");
 
+COMMENT ON COLUMN "public"."rd_roles"."type" IS 'Role type: NULL for Direct Participant, "supervisor" for Supervisor, "admin" for Admin';
 
 
-CREATE INDEX "idx_performance_metrics_status" ON "public"."performance_metrics" USING "btree" ("status_code");
 
+COMMENT ON COLUMN "public"."rd_roles"."description" IS 'Role description explaining responsibilities and duties';
 
 
-CREATE INDEX "idx_performance_metrics_timestamp" ON "public"."performance_metrics" USING "btree" ("metric_timestamp" DESC);
 
+CREATE TABLE IF NOT EXISTS "public"."rd_selected_activities" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "activity_id" "uuid" NOT NULL,
+    "practice_percent" numeric(5,2) NOT NULL,
+    "selected_roles" "jsonb" NOT NULL,
+    "config" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "research_guidelines" "jsonb",
+    "is_enabled" boolean DEFAULT true NOT NULL,
+    "activity_title_snapshot" "text",
+    "activity_category_snapshot" "text"
+);
 
 
-CREATE INDEX "idx_personal_years_client_id" ON "public"."personal_years" USING "btree" ("client_id");
+ALTER TABLE "public"."rd_selected_activities" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_selected_filter" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "selected_categories" "text"[] DEFAULT '{}'::"text"[],
+    "selected_areas" "text"[] DEFAULT '{}'::"text"[],
+    "selected_focuses" "text"[] DEFAULT '{}'::"text"[],
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_personal_years_year" ON "public"."personal_years" USING "btree" ("year");
 
+ALTER TABLE "public"."rd_selected_filter" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_platform_usage_metrics_account" ON "public"."platform_usage_metrics" USING "btree" ("account_id") WHERE ("account_id" IS NOT NULL);
+CREATE TABLE IF NOT EXISTS "public"."rd_selected_steps" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "step_id" "uuid" NOT NULL,
+    "time_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "non_rd_percentage" numeric(5,2) DEFAULT 0,
+    CONSTRAINT "rd_selected_steps_non_rd_percentage_check" CHECK ((("non_rd_percentage" >= (0)::numeric) AND ("non_rd_percentage" <= (100)::numeric)))
+);
 
 
+ALTER TABLE "public"."rd_selected_steps" OWNER TO "postgres";
 
-CREATE INDEX "idx_platform_usage_metrics_date" ON "public"."platform_usage_metrics" USING "btree" ("metric_date" DESC);
 
+COMMENT ON COLUMN "public"."rd_selected_steps"."non_rd_percentage" IS 'Percentage of step time allocated to non-R&D activities (0-100)';
 
 
-CREATE INDEX "idx_platform_usage_metrics_type" ON "public"."platform_usage_metrics" USING "btree" ("metric_type", "metric_name");
 
-
-
-CREATE INDEX "idx_profile_permissions_action" ON "public"."profile_permissions" USING "btree" ("action");
-
-
-
-CREATE INDEX "idx_profile_permissions_active" ON "public"."profile_permissions" USING "btree" ("is_active", "created_at" DESC);
-
-
-
-CREATE INDEX "idx_profile_permissions_check" ON "public"."profile_permissions" USING "btree" ("profile_id", "resource_type", "action", "is_active");
-
-
-
-CREATE INDEX "idx_profile_permissions_expires_at" ON "public"."profile_permissions" USING "btree" ("expires_at") WHERE ("expires_at" IS NOT NULL);
-
-
-
-CREATE INDEX "idx_profile_permissions_granted_by" ON "public"."profile_permissions" USING "btree" ("granted_by");
-
-
-
-CREATE INDEX "idx_profile_permissions_permission_name" ON "public"."profile_permissions" USING "btree" ("permission_name");
-
-
-
-CREATE INDEX "idx_profile_permissions_profile_id" ON "public"."profile_permissions" USING "btree" ("profile_id");
-
+CREATE TABLE IF NOT EXISTS "public"."rd_selected_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "research_activity_id" "uuid" NOT NULL,
+    "step_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid" NOT NULL,
+    "frequency_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "year_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "start_month" integer DEFAULT 1 NOT NULL,
+    "start_year" integer NOT NULL,
+    "selected_roles" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
+    "non_rd_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "approval_data" "jsonb",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "hint" "text",
+    "general_description" "text",
+    "goal" "text",
+    "hypothesis" "text",
+    "alternatives" "text",
+    "uncertainties" "text",
+    "developmental_process" "text",
+    "primary_goal" "text",
+    "expected_outcome_type" "text",
+    "cpt_codes" "text",
+    "cdt_codes" "text",
+    "alternative_paths" "text",
+    "applied_percentage" numeric,
+    "time_percentage" numeric,
+    "user_notes" "text",
+    "step_name" "text",
+    "practice_percent" numeric(5,2) DEFAULT 0,
+    "subcomponent_name_snapshot" "text",
+    "step_name_snapshot" "text"
+);
 
 
-CREATE INDEX "idx_profile_permissions_resource" ON "public"."profile_permissions" USING "btree" ("resource_type", "resource_id");
+ALTER TABLE "public"."rd_selected_subcomponents" OWNER TO "postgres";
 
 
+COMMENT ON COLUMN "public"."rd_selected_subcomponents"."time_percentage" IS 'Step percentage calculated based on number of steps in the Research Activity';
 
-CREATE INDEX "idx_profile_permissions_resource_active" ON "public"."profile_permissions" USING "btree" ("resource_type", "resource_id", "is_active");
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_signature_records" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "signer_name" "text" NOT NULL,
+    "signature_image" "text" NOT NULL,
+    "ip_address" "text" NOT NULL,
+    "signed_at" timestamp with time zone NOT NULL,
+    "jurat_text" "text" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
+    "signer_title" "text",
+    "signer_email" "text"
+);
 
-CREATE INDEX "idx_profile_roles_active" ON "public"."profile_roles" USING "btree" ("is_active", "created_at" DESC);
 
+ALTER TABLE "public"."rd_signature_records" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_profile_roles_expires_at" ON "public"."profile_roles" USING "btree" ("expires_at") WHERE ("expires_at" IS NOT NULL);
+COMMENT ON TABLE "public"."rd_signature_records" IS 'Records of digital signatures for jurat statements with audit trail';
 
 
 
-CREATE INDEX "idx_profile_roles_granted_by" ON "public"."profile_roles" USING "btree" ("granted_by");
+COMMENT ON COLUMN "public"."rd_signature_records"."business_year_id" IS 'Reference to the business year this signature applies to';
 
 
 
-CREATE INDEX "idx_profile_roles_profile_active" ON "public"."profile_roles" USING "btree" ("profile_id", "is_active", "expires_at");
+COMMENT ON COLUMN "public"."rd_signature_records"."signer_name" IS 'Full name of the person who signed';
 
 
 
-CREATE INDEX "idx_profile_roles_profile_id" ON "public"."profile_roles" USING "btree" ("profile_id");
+COMMENT ON COLUMN "public"."rd_signature_records"."signature_image" IS 'Base64 encoded signature image from canvas';
 
 
 
-CREATE INDEX "idx_profile_roles_role_name" ON "public"."profile_roles" USING "btree" ("role_name");
+COMMENT ON COLUMN "public"."rd_signature_records"."ip_address" IS 'IP address of the signer for audit purposes';
 
 
 
-CREATE INDEX "idx_profile_roles_role_scope_active" ON "public"."profile_roles" USING "btree" ("role_name", "scope", "is_active");
+COMMENT ON COLUMN "public"."rd_signature_records"."signed_at" IS 'Timestamp when the signature was created';
 
 
 
-CREATE INDEX "idx_profile_roles_scope" ON "public"."profile_roles" USING "btree" ("scope", "scope_id");
+COMMENT ON COLUMN "public"."rd_signature_records"."jurat_text" IS 'The full text of the jurat statement that was signed';
 
 
 
-CREATE INDEX "idx_profile_sync_conflicts_auth_user" ON "public"."profile_sync_conflicts" USING "btree" ("auth_user_id");
+COMMENT ON COLUMN "public"."rd_signature_records"."signer_title" IS 'Job title of the person who signed';
 
 
 
-CREATE INDEX "idx_profile_sync_conflicts_created_at" ON "public"."profile_sync_conflicts" USING "btree" ("created_at" DESC);
+COMMENT ON COLUMN "public"."rd_signature_records"."signer_email" IS 'Email address of the person who signed';
 
 
 
-CREATE INDEX "idx_profile_sync_conflicts_profile" ON "public"."profile_sync_conflicts" USING "btree" ("profile_id");
+CREATE TABLE IF NOT EXISTS "public"."rd_signatures" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid",
+    "signature_type" character varying(50),
+    "signed_by" character varying(255),
+    "signed_at" timestamp without time zone,
+    "signature_data" "jsonb",
+    "ip_address" "inet",
+    "created_at" timestamp without time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."rd_signatures" OWNER TO "postgres";
 
-CREATE INDEX "idx_profile_sync_conflicts_resolved" ON "public"."profile_sync_conflicts" USING "btree" ("resolved_at");
 
+COMMENT ON TABLE "public"."rd_signatures" IS 'Digital signatures for jurat and other documents';
 
 
-CREATE INDEX "idx_profile_sync_conflicts_type" ON "public"."profile_sync_conflicts" USING "btree" ("conflict_type");
 
+CREATE TABLE IF NOT EXISTS "public"."rd_state_calculations" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "state" character varying(2) NOT NULL,
+    "calculation_method" "text" NOT NULL,
+    "refundable" "text",
+    "carryforward" "text",
+    "eligible_entities" "text"[],
+    "calculation_formula" "text" NOT NULL,
+    "special_notes" "text",
+    "start_year" numeric NOT NULL,
+    "end_year" numeric,
+    "is_active" boolean DEFAULT true,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "formula_correct" "text"
+);
 
 
-CREATE INDEX "idx_profiles_account_id" ON "public"."profiles" USING "btree" ("account_id");
+ALTER TABLE "public"."rd_state_calculations" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_state_calculations_full" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "state" character varying(2) NOT NULL,
+    "calculation_method" "text",
+    "refundable" "text",
+    "carryforward" "text",
+    "eligible_entities" "text",
+    "special_notes" "text",
+    "start_year" "text",
+    "formula_correct" "text",
+    "standard_credit_formula" "text",
+    "alternate_credit_formula" "text",
+    "additional_credit_formula" "text",
+    "end_year" "text",
+    "standard_info" "text",
+    "alternative_info" "text",
+    "other_info" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_profiles_account_status" ON "public"."profiles" USING "btree" ("account_id", "status");
 
+ALTER TABLE "public"."rd_state_calculations_full" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_profiles_auth_sync" ON "public"."profiles" USING "btree" ("auth_sync_status");
+CREATE TABLE IF NOT EXISTS "public"."rd_state_credit_configs" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "state_code" character varying(2) NOT NULL,
+    "config" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."rd_state_credit_configs" OWNER TO "postgres";
 
-CREATE INDEX "idx_profiles_email_lower" ON "public"."profiles" USING "btree" ("lower"("email"));
 
+CREATE TABLE IF NOT EXISTS "public"."rd_state_proforma_data" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "state_code" character varying(2) NOT NULL,
+    "method" character varying(20) NOT NULL,
+    "data" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    CONSTRAINT "rd_state_proforma_data_method_check" CHECK ((("method")::"text" = ANY ((ARRAY['standard'::character varying, 'alternative'::character varying])::"text"[])))
+);
 
 
-CREATE INDEX "idx_profiles_full_name" ON "public"."profiles" USING "btree" ("full_name");
+ALTER TABLE "public"."rd_state_proforma_data" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_state_proforma_lines" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "state_proforma_id" "uuid" NOT NULL,
+    "line_number" character varying(10) NOT NULL,
+    "description" "text" NOT NULL,
+    "amount" numeric(15,2) DEFAULT 0,
+    "is_editable" boolean DEFAULT true,
+    "is_calculated" boolean DEFAULT false,
+    "calculation_formula" "text",
+    "line_type" character varying(50),
+    "sort_order" integer NOT NULL,
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_profiles_is_verified" ON "public"."profiles" USING "btree" ("is_verified");
 
+ALTER TABLE "public"."rd_state_proforma_lines" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_profiles_last_login" ON "public"."profiles" USING "btree" ("last_login_at" DESC);
+CREATE TABLE IF NOT EXISTS "public"."rd_state_proformas" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "state_code" character varying(2) NOT NULL,
+    "config" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
+    "total_credit" numeric(15,2) DEFAULT 0,
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."rd_state_proformas" OWNER TO "postgres";
 
-CREATE INDEX "idx_profiles_last_seen" ON "public"."profiles" USING "btree" ("last_seen_at" DESC);
 
+CREATE TABLE IF NOT EXISTS "public"."rd_supplies" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "description" "text",
+    "annual_cost" numeric(10,2) NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_profiles_notifications_enabled" ON "public"."profiles" USING "btree" ("notifications_enabled");
+ALTER TABLE "public"."rd_supplies" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."rd_supply_subcomponents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "supply_id" "uuid" NOT NULL,
+    "subcomponent_id" "uuid" NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "applied_percentage" numeric(5,2) DEFAULT 0 NOT NULL,
+    "is_included" boolean DEFAULT true NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "amount_applied" numeric
+);
 
-CREATE INDEX "idx_profiles_phone" ON "public"."profiles" USING "btree" ("phone");
 
+ALTER TABLE "public"."rd_supply_subcomponents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_profiles_status" ON "public"."profiles" USING "btree" ("status");
+CREATE TABLE IF NOT EXISTS "public"."rd_supply_year_data" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "name" "text" NOT NULL,
+    "cost_amount" numeric(15,2) NOT NULL,
+    "applied_percent" numeric(5,2) NOT NULL,
+    "activity_link" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "supply_id" "uuid",
+    "calculated_qre" numeric(15,2)
+);
 
 
+ALTER TABLE "public"."rd_supply_year_data" OWNER TO "postgres";
 
-CREATE INDEX "idx_profiles_status_last_login" ON "public"."profiles" USING "btree" ("status", "last_login_at" DESC);
 
-
-
-CREATE INDEX "idx_profiles_sync_status_date" ON "public"."profiles" USING "btree" ("auth_sync_status", "auth_sync_last_attempted" DESC);
-
-
-
-CREATE INDEX "idx_profiles_theme" ON "public"."profiles" USING "btree" ("theme");
-
-
-
-CREATE INDEX "idx_profiles_updated_at" ON "public"."profiles" USING "btree" ("updated_at" DESC);
-
-
-
-CREATE INDEX "idx_proposal_assignments_proposal_id" ON "public"."proposal_assignments" USING "btree" ("proposal_id");
-
-
-
-CREATE INDEX "idx_proposal_timeline_proposal_id" ON "public"."proposal_timeline" USING "btree" ("proposal_id");
-
-
-
-CREATE INDEX "idx_rd_business_years_business_year" ON "public"."rd_business_years" USING "btree" ("business_id", "year");
-
-
-
-CREATE INDEX "idx_rd_businesses_historical_data" ON "public"."rd_businesses" USING "gin" ("historical_data");
-
-
+CREATE TABLE IF NOT EXISTS "public"."rd_support_documents" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_year_id" "uuid" NOT NULL,
+    "document_type" "text" NOT NULL,
+    "file_name" "text" NOT NULL,
+    "file_path" "text" NOT NULL,
+    "file_size" bigint,
+    "mime_type" "text",
+    "upload_date" timestamp without time zone DEFAULT "now"(),
+    "uploaded_by" "uuid",
+    "processing_status" "text" DEFAULT 'pending'::"text",
+    "ai_analysis" "jsonb",
+    "metadata" "jsonb",
+    "notes" "text",
+    "created_at" timestamp without time zone DEFAULT "now"(),
+    "updated_at" timestamp without time zone DEFAULT "now"(),
+    CONSTRAINT "rd_support_documents_document_type_check" CHECK (("document_type" = ANY (ARRAY['invoice'::"text", '1099'::"text", 'procedure_report'::"text"]))),
+    CONSTRAINT "rd_support_documents_processing_status_check" CHECK (("processing_status" = ANY (ARRAY['pending'::"text", 'processing'::"text", 'completed'::"text", 'failed'::"text", 'manual_review'::"text"])))
+);
 
-CREATE INDEX "idx_rd_contractor_subcomponents_business_year_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("business_year_id");
 
+ALTER TABLE "public"."rd_support_documents" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_rd_contractor_subcomponents_contractor_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("contractor_id");
+CREATE TABLE IF NOT EXISTS "public"."reinsurance_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "strategy_detail_id" "uuid" NOT NULL,
+    "user_contribution" numeric(12,2) DEFAULT 0 NOT NULL,
+    "agi_reduction" numeric(12,2) DEFAULT 0 NOT NULL,
+    "federal_tax_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "state_tax_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_tax_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "net_year1_cost" numeric(12,2) DEFAULT 0 NOT NULL,
+    "breakeven_years" numeric(5,2) DEFAULT 0 NOT NULL,
+    "future_value" numeric(12,2) DEFAULT 0 NOT NULL,
+    "capital_gains_tax" numeric(12,2) DEFAULT 0 NOT NULL,
+    "setup_admin_cost" numeric(12,2) DEFAULT 0 NOT NULL,
+    "total_benefit" numeric(12,2) DEFAULT 0 NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."reinsurance_details" OWNER TO "postgres";
 
-CREATE INDEX "idx_rd_contractor_subcomponents_subcomponent_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("subcomponent_id");
 
+CREATE TABLE IF NOT EXISTS "public"."research_activities" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "name" "text",
+    "description" "text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
+);
 
 
-CREATE INDEX "idx_rd_contractor_subcomponents_user_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("user_id");
+ALTER TABLE "public"."research_activities" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."strategy_commission_rates" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "affiliate_id" "uuid",
+    "strategy_name" "text" NOT NULL,
+    "affiliate_rate" numeric(5,4) NOT NULL,
+    "admin_rate" numeric(5,4) NOT NULL,
+    "expert_fee_percentage" numeric(5,4),
+    "notes" "text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
+    CONSTRAINT "rates_sum_check" CHECK ((("affiliate_rate" + "admin_rate") <= 1.0))
+);
 
-CREATE INDEX "idx_rd_contractor_year_data_business_year_id" ON "public"."rd_contractor_year_data" USING "btree" ("business_year_id");
 
+ALTER TABLE "public"."strategy_commission_rates" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_rd_contractor_year_data_contractor_id" ON "public"."rd_contractor_year_data" USING "btree" ("contractor_id");
+CREATE TABLE IF NOT EXISTS "public"."strategy_details" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "proposal_id" "uuid" NOT NULL,
+    "strategy_id" "text" NOT NULL,
+    "strategy_name" "text" NOT NULL,
+    "strategy_category" "text" NOT NULL,
+    "details" "jsonb" DEFAULT '{}'::"jsonb" NOT NULL,
+    "estimated_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "enabled" boolean DEFAULT false NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."strategy_details" OWNER TO "postgres";
 
-CREATE INDEX "idx_rd_contractor_year_data_user_id" ON "public"."rd_contractor_year_data" USING "btree" ("user_id");
 
+CREATE TABLE IF NOT EXISTS "public"."supply_expenses" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "business_id" "uuid",
+    "item_name" "text",
+    "amount" numeric,
+    "description" "text",
+    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"())
+);
 
 
-CREATE INDEX "idx_rd_contractors_business_id" ON "public"."rd_contractors" USING "btree" ("business_id");
+ALTER TABLE "public"."supply_expenses" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."tax_calculations" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "user_id" "uuid" NOT NULL,
+    "year" integer NOT NULL,
+    "tax_info" "jsonb" NOT NULL,
+    "breakdown" "jsonb" NOT NULL,
+    "strategies" "jsonb" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_rd_contractors_role_id" ON "public"."rd_contractors" USING "btree" ("role_id");
 
+ALTER TABLE "public"."tax_calculations" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_rd_contractors_user_id" ON "public"."rd_contractors" USING "btree" ("user_id");
+COMMENT ON TABLE "public"."tax_calculations" IS 'Stores tax calculations with strategies for each user';
 
 
 
-CREATE INDEX "idx_rd_employee_subcomponents_employee_id" ON "public"."rd_employee_subcomponents" USING "btree" ("employee_id");
+COMMENT ON COLUMN "public"."tax_calculations"."user_id" IS 'References auth.users(id)';
 
 
 
-CREATE INDEX "idx_rd_employee_subcomponents_subcomponent_id" ON "public"."rd_employee_subcomponents" USING "btree" ("subcomponent_id");
+COMMENT ON COLUMN "public"."tax_calculations"."year" IS 'Tax year for the calculation';
 
 
 
-CREATE INDEX "idx_rd_employee_subcomponents_user_id" ON "public"."rd_employee_subcomponents" USING "btree" ("user_id");
+COMMENT ON COLUMN "public"."tax_calculations"."tax_info" IS 'JSON object containing tax information';
 
 
 
-CREATE INDEX "idx_rd_employee_year_data_employee_year" ON "public"."rd_employee_year_data" USING "btree" ("employee_id", "business_year_id");
+COMMENT ON COLUMN "public"."tax_calculations"."breakdown" IS 'JSON object containing tax breakdown';
 
 
 
-CREATE INDEX "idx_rd_employee_year_data_user_id" ON "public"."rd_employee_year_data" USING "btree" ("user_id");
+COMMENT ON COLUMN "public"."tax_calculations"."strategies" IS 'JSON array containing enabled tax strategies';
 
 
 
-CREATE INDEX "idx_rd_employees_user_id" ON "public"."rd_employees" USING "btree" ("user_id");
+CREATE TABLE IF NOT EXISTS "public"."tax_estimates" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "user_id" "uuid",
+    "data" "jsonb" NOT NULL,
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "created_at" timestamp with time zone DEFAULT "now"()
+);
 
 
+ALTER TABLE "public"."tax_estimates" OWNER TO "postgres";
 
-CREATE INDEX "idx_rd_expenses_business_year_id" ON "public"."rd_expenses" USING "btree" ("business_year_id");
 
+CREATE TABLE IF NOT EXISTS "public"."tax_profiles" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "user_id" "uuid" NOT NULL,
+    "standard_deduction" boolean DEFAULT false,
+    "business_owner" boolean DEFAULT false,
+    "full_name" "text",
+    "email" "text",
+    "filing_status" "text",
+    "dependents" integer DEFAULT 0,
+    "home_address" "text",
+    "state" "text",
+    "wages_income" numeric DEFAULT 0,
+    "passive_income" numeric DEFAULT 0,
+    "unearned_income" numeric DEFAULT 0,
+    "capital_gains" numeric DEFAULT 0,
+    "custom_deduction" numeric DEFAULT 0,
+    "charitable_deduction" numeric DEFAULT 0,
+    "business_name" "text",
+    "entity_type" "text",
+    "ordinary_k1_income" numeric DEFAULT 0,
+    "guaranteed_k1_income" numeric DEFAULT 0,
+    "business_address" "text",
+    "deduction_limit_reached" boolean DEFAULT false,
+    "household_income" numeric DEFAULT 0,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    "phone" "text"
+);
 
 
-CREATE INDEX "idx_rd_expenses_category" ON "public"."rd_expenses" USING "btree" ("category");
+ALTER TABLE "public"."tax_profiles" OWNER TO "postgres";
 
 
+COMMENT ON COLUMN "public"."tax_profiles"."phone" IS 'Phone number for the tax profile';
 
-CREATE INDEX "idx_rd_expenses_employee_id" ON "public"."rd_expenses" USING "btree" ("employee_id");
 
 
+CREATE TABLE IF NOT EXISTS "public"."tax_proposals" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "user_id" "uuid" NOT NULL,
+    "affiliate_id" "text",
+    "client_id" "text",
+    "client_name" "text",
+    "year" integer NOT NULL,
+    "tax_info" "jsonb" NOT NULL,
+    "proposed_strategies" "jsonb" DEFAULT '[]'::"jsonb" NOT NULL,
+    "total_savings" numeric(12,2) DEFAULT 0 NOT NULL,
+    "status" "text" DEFAULT 'draft'::"text" NOT NULL,
+    "notes" "text",
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"(),
+    CONSTRAINT "tax_proposals_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'proposed'::"text", 'accepted'::"text", 'rejected'::"text", 'implemented'::"text"])))
+);
 
-CREATE INDEX "idx_rd_federal_credit_results_business_year_id" ON "public"."rd_federal_credit_results" USING "btree" ("business_year_id");
 
+ALTER TABLE "public"."tax_proposals" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_rd_federal_credit_results_calculation_date" ON "public"."rd_federal_credit_results" USING "btree" ("calculation_date");
+CREATE TABLE IF NOT EXISTS "public"."tool_enrollments" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "client_file_id" "uuid" NOT NULL,
+    "business_id" "uuid" NOT NULL,
+    "tool_slug" "text" NOT NULL,
+    "enrolled_by" "uuid",
+    "enrolled_at" timestamp with time zone DEFAULT "now"(),
+    "status" "text" DEFAULT 'active'::"text",
+    "notes" "text",
+    CONSTRAINT "tool_enrollments_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text", 'completed'::"text", 'cancelled'::"text"]))),
+    CONSTRAINT "tool_enrollments_tool_slug_check" CHECK (("tool_slug" = ANY (ARRAY['rd'::"text", 'augusta'::"text", 'hire_children'::"text", 'cost_segregation'::"text", 'convertible_bonds'::"text", 'tax_planning'::"text"])))
+);
 
 
+ALTER TABLE "public"."tool_enrollments" OWNER TO "postgres";
 
-CREATE INDEX "idx_rd_reports_business_year_type" ON "public"."rd_reports" USING "btree" ("business_year_id", "type");
 
+COMMENT ON TABLE "public"."tool_enrollments" IS 'Tracks which clients/businesses are enrolled in which tax tools';
 
 
-CREATE INDEX "idx_rd_research_steps_activity_id" ON "public"."rd_research_steps" USING "btree" ("research_activity_id");
 
+CREATE TABLE IF NOT EXISTS "public"."user_preferences" (
+    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
+    "user_id" "uuid",
+    "theme" "text" DEFAULT 'light'::"text",
+    "notifications_enabled" boolean DEFAULT true,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
 
-CREATE INDEX "idx_rd_research_subcomponents_step_id" ON "public"."rd_research_subcomponents" USING "btree" ("step_id");
+ALTER TABLE "public"."user_preferences" OWNER TO "postgres";
 
 
+CREATE TABLE IF NOT EXISTS "public"."users" (
+    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
+    "email" "text" NOT NULL,
+    "name" "text" NOT NULL,
+    "role_type" "public"."role_type" NOT NULL,
+    "created_at" timestamp with time zone DEFAULT "now"(),
+    "updated_at" timestamp with time zone DEFAULT "now"()
+);
 
-CREATE INDEX "idx_rd_roles_business_year_id" ON "public"."rd_roles" USING "btree" ("business_year_id");
 
+ALTER TABLE "public"."users" OWNER TO "postgres";
 
 
-CREATE INDEX "idx_rd_roles_is_default" ON "public"."rd_roles" USING "btree" ("is_default");
+ALTER TABLE ONLY "public"."admin_client_files"
+    ADD CONSTRAINT "admin_client_files_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE UNIQUE INDEX "idx_rd_roles_unique_default_per_year" ON "public"."rd_roles" USING "btree" ("business_year_id", "is_default") WHERE ("is_default" = true);
+ALTER TABLE ONLY "public"."augusta_rule_details"
+    ADD CONSTRAINT "augusta_rule_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_selected_activities_business_year_activity" ON "public"."rd_selected_activities" USING "btree" ("business_year_id", "activity_id");
+ALTER TABLE ONLY "public"."business_years"
+    ADD CONSTRAINT "business_years_business_id_year_key" UNIQUE ("business_id", "year");
 
 
 
-CREATE INDEX "idx_rd_selected_steps_activity" ON "public"."rd_selected_steps" USING "btree" ("research_activity_id");
+ALTER TABLE ONLY "public"."business_years"
+    ADD CONSTRAINT "business_years_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_selected_steps_business_year" ON "public"."rd_selected_steps" USING "btree" ("business_year_id");
+ALTER TABLE ONLY "public"."businesses"
+    ADD CONSTRAINT "businesses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_selected_subcomponents_activity" ON "public"."rd_selected_subcomponents" USING "btree" ("research_activity_id");
+ALTER TABLE ONLY "public"."calculations"
+    ADD CONSTRAINT "calculations_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_selected_subcomponents_business_year" ON "public"."rd_selected_subcomponents" USING "btree" ("business_year_id");
+ALTER TABLE ONLY "public"."centralized_businesses"
+    ADD CONSTRAINT "centralized_businesses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_selected_subcomponents_step" ON "public"."rd_selected_subcomponents" USING "btree" ("step_id");
+ALTER TABLE ONLY "public"."charitable_donation_details"
+    ADD CONSTRAINT "charitable_donation_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_rd_supplies_business_id" ON "public"."rd_supplies" USING "btree" ("business_id");
-
-
-
-CREATE INDEX "idx_rd_supply_subcomponents_business_year_id" ON "public"."rd_supply_subcomponents" USING "btree" ("business_year_id");
-
-
-
-CREATE INDEX "idx_rd_supply_subcomponents_subcomponent_id" ON "public"."rd_supply_subcomponents" USING "btree" ("subcomponent_id");
-
-
-
-CREATE INDEX "idx_rd_supply_subcomponents_supply_id" ON "public"."rd_supply_subcomponents" USING "btree" ("supply_id");
-
-
-
-CREATE INDEX "idx_reinsurance_details_strategy_detail_id" ON "public"."reinsurance_details" USING "btree" ("strategy_detail_id");
-
-
-
-CREATE INDEX "idx_role_definitions_active" ON "public"."role_definitions" USING "btree" ("is_active");
-
-
-
-CREATE INDEX "idx_role_definitions_hierarchy" ON "public"."role_definitions" USING "btree" ("role_hierarchy_level" DESC);
-
-
-
-CREATE INDEX "idx_role_definitions_role_name" ON "public"."role_definitions" USING "btree" ("role_name");
-
-
-
-CREATE INDEX "idx_security_alerts_resolved" ON "public"."security_alerts" USING "btree" ("resolved", "created_at" DESC);
-
-
-
-CREATE INDEX "idx_security_alerts_severity" ON "public"."security_alerts" USING "btree" ("severity", "created_at" DESC);
-
-
-
-CREATE INDEX "idx_security_alerts_type" ON "public"."security_alerts" USING "btree" ("alert_type");
+ALTER TABLE ONLY "public"."clients"
+    ADD CONSTRAINT "clients_email_key" UNIQUE ("email");
 
 
 
-CREATE INDEX "idx_security_alerts_user_id" ON "public"."security_alerts" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."clients"
+    ADD CONSTRAINT "clients_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_client_id" ON "public"."security_events" USING "btree" ("client_id");
+ALTER TABLE ONLY "public"."commission_transactions"
+    ADD CONSTRAINT "commission_transactions_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_created_at" ON "public"."security_events" USING "btree" ("created_at");
+ALTER TABLE ONLY "public"."contractor_expenses"
+    ADD CONSTRAINT "contractor_expenses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_resolved" ON "public"."security_events" USING "btree" ("resolved", "created_at" DESC);
+ALTER TABLE ONLY "public"."convertible_tax_bonds_details"
+    ADD CONSTRAINT "convertible_tax_bonds_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_severity" ON "public"."security_events" USING "btree" ("severity");
+ALTER TABLE ONLY "public"."cost_segregation_details"
+    ADD CONSTRAINT "cost_segregation_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_type" ON "public"."security_events" USING "btree" ("event_type");
+ALTER TABLE ONLY "public"."employees"
+    ADD CONSTRAINT "employees_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_security_events_user_id" ON "public"."security_events" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."experts"
+    ADD CONSTRAINT "experts_email_key" UNIQUE ("email");
 
 
 
-CREATE INDEX "idx_state_calculations_active" ON "public"."rd_state_calculations" USING "btree" ("is_active");
+ALTER TABLE ONLY "public"."experts"
+    ADD CONSTRAINT "experts_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_state_calculations_state" ON "public"."rd_state_calculations" USING "btree" ("state");
+ALTER TABLE ONLY "public"."family_management_company_details"
+    ADD CONSTRAINT "family_management_company_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE UNIQUE INDEX "idx_state_calculations_unique" ON "public"."rd_state_calculations" USING "btree" ("state", "start_year") WHERE ("is_active" = true);
+ALTER TABLE ONLY "public"."form_6765_overrides"
+    ADD CONSTRAINT "form_6765_overrides_client_id_business_year_section_line_nu_key" UNIQUE ("client_id", "business_year", "section", "line_number");
 
 
 
-CREATE INDEX "idx_state_calculations_year" ON "public"."rd_state_calculations" USING "btree" ("start_year", "end_year");
+ALTER TABLE ONLY "public"."form_6765_overrides"
+    ADD CONSTRAINT "form_6765_overrides_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_strategy_details_proposal_id" ON "public"."strategy_details" USING "btree" ("proposal_id");
+ALTER TABLE ONLY "public"."hire_children_details"
+    ADD CONSTRAINT "hire_children_details_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_strategy_details_strategy_id" ON "public"."strategy_details" USING "btree" ("strategy_id");
+ALTER TABLE ONLY "public"."leads"
+    ADD CONSTRAINT "leads_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_subscriptions_account_id" ON "public"."subscriptions" USING "btree" ("account_id");
+ALTER TABLE ONLY "public"."personal_years"
+    ADD CONSTRAINT "personal_years_client_id_year_key" UNIQUE ("client_id", "year");
 
 
 
-CREATE INDEX "idx_subscriptions_current_period" ON "public"."subscriptions" USING "btree" ("current_period_end");
+ALTER TABLE ONLY "public"."personal_years"
+    ADD CONSTRAINT "personal_years_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_subscriptions_plan_id" ON "public"."subscriptions" USING "btree" ("plan_id");
+ALTER TABLE ONLY "public"."profiles"
+    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");
 
 
 
-CREATE INDEX "idx_subscriptions_status" ON "public"."subscriptions" USING "btree" ("status");
+ALTER TABLE ONLY "public"."profiles"
+    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_subscriptions_stripe_id" ON "public"."subscriptions" USING "btree" ("stripe_subscription_id");
+ALTER TABLE ONLY "public"."proposal_assignments"
+    ADD CONSTRAINT "proposal_assignments_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_calculations_user_id_profiles" ON "public"."tax_calculations" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."proposal_timeline"
+    ADD CONSTRAINT "proposal_timeline_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_estimates_user_id_profiles" ON "public"."tax_estimates" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_areas"
+    ADD CONSTRAINT "rd_areas_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_proposals_client_id" ON "public"."tax_proposals" USING "btree" ("client_id");
+ALTER TABLE ONLY "public"."rd_billable_time_summary"
+    ADD CONSTRAINT "rd_billable_time_summary_business_year_id_research_activity_key" UNIQUE ("business_year_id", "research_activity_id", "subcomponent_id");
 
 
 
-CREATE INDEX "idx_tax_proposals_created_by" ON "public"."tax_proposals" USING "btree" ("created_by");
+ALTER TABLE ONLY "public"."rd_billable_time_summary"
+    ADD CONSTRAINT "rd_billable_time_summary_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_proposals_status" ON "public"."tax_proposals" USING "btree" ("status");
+ALTER TABLE ONLY "public"."rd_business_years"
+    ADD CONSTRAINT "rd_business_years_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_proposals_user_id" ON "public"."tax_proposals" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_businesses"
+    ADD CONSTRAINT "rd_businesses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tax_proposals_user_id_profiles" ON "public"."tax_proposals" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_client_portal_tokens"
+    ADD CONSTRAINT "rd_client_portal_tokens_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_enrollments_business_id" ON "public"."tool_enrollments" USING "btree" ("business_id");
+ALTER TABLE ONLY "public"."rd_client_portal_tokens"
+    ADD CONSTRAINT "rd_client_portal_tokens_token_key" UNIQUE ("token");
 
 
 
-CREATE INDEX "idx_tool_enrollments_client_file_id" ON "public"."tool_enrollments" USING "btree" ("client_file_id");
+ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
+    ADD CONSTRAINT "rd_contractor_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_enrollments_status" ON "public"."tool_enrollments" USING "btree" ("status");
+ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
+    ADD CONSTRAINT "rd_contractor_subcomponents_unique" UNIQUE ("contractor_id", "subcomponent_id", "business_year_id");
 
 
 
-CREATE INDEX "idx_tool_enrollments_tool_slug" ON "public"."tool_enrollments" USING "btree" ("tool_slug");
+ALTER TABLE ONLY "public"."rd_contractor_year_data"
+    ADD CONSTRAINT "rd_contractor_year_data_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_account_date" ON "public"."tool_usage_logs" USING "btree" ("account_id", "created_at" DESC);
+ALTER TABLE ONLY "public"."rd_contractors"
+    ADD CONSTRAINT "rd_contractors_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_account_id" ON "public"."tool_usage_logs" USING "btree" ("account_id");
+ALTER TABLE ONLY "public"."rd_document_links"
+    ADD CONSTRAINT "rd_document_links_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_account_tool_date" ON "public"."tool_usage_logs" USING "btree" ("account_id", "tool_id", "created_at" DESC);
+ALTER TABLE ONLY "public"."rd_employee_subcomponents"
+    ADD CONSTRAINT "rd_employee_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_action" ON "public"."tool_usage_logs" USING "btree" ("action");
+ALTER TABLE ONLY "public"."rd_employee_subcomponents"
+    ADD CONSTRAINT "rd_employee_subcomponents_unique" UNIQUE ("employee_id", "subcomponent_id", "business_year_id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_action_date" ON "public"."tool_usage_logs" USING "btree" ("action", "created_at" DESC);
+ALTER TABLE ONLY "public"."rd_employee_year_data"
+    ADD CONSTRAINT "rd_employee_year_data_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_analytics" ON "public"."tool_usage_logs" USING "btree" ("created_at" DESC, "tool_id", "account_id", "action", "success");
+ALTER TABLE ONLY "public"."rd_employees"
+    ADD CONSTRAINT "rd_employees_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_created_at" ON "public"."tool_usage_logs" USING "btree" ("created_at" DESC);
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_failures" ON "public"."tool_usage_logs" USING "btree" ("account_id", "tool_id", "created_at" DESC, "error_code") WHERE ("success" = false);
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_profile_id" ON "public"."tool_usage_logs" USING "btree" ("profile_id");
+ALTER TABLE ONLY "public"."rd_federal_credit_results"
+    ADD CONSTRAINT "rd_federal_credit_results_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_session_id" ON "public"."tool_usage_logs" USING "btree" ("session_id");
+ALTER TABLE ONLY "public"."rd_federal_credit_results"
+    ADD CONSTRAINT "rd_federal_credit_results_unique" UNIQUE ("business_year_id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_tool_date" ON "public"."tool_usage_logs" USING "btree" ("tool_id", "created_at" DESC);
+ALTER TABLE ONLY "public"."rd_focuses"
+    ADD CONSTRAINT "rd_focuses_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_tool_usage_logs_tool_id" ON "public"."tool_usage_logs" USING "btree" ("tool_id");
+ALTER TABLE ONLY "public"."rd_procedure_analysis"
+    ADD CONSTRAINT "rd_procedure_analysis_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "idx_transactions_partner_id" ON "public"."transactions" USING "btree" ("partner_id");
+ALTER TABLE ONLY "public"."rd_procedure_research_links"
+    ADD CONSTRAINT "rd_procedure_research_links_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "leads_user_id_idx" ON "public"."leads" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_qc_document_controls"
+    ADD CONSTRAINT "rd_qc_document_controls_business_year_id_document_type_key" UNIQUE ("business_year_id", "document_type");
 
 
 
-CREATE INDEX "profiles_created_at_idx" ON "public"."profiles" USING "btree" ("created_at");
+ALTER TABLE ONLY "public"."rd_qc_document_controls"
+    ADD CONSTRAINT "rd_qc_document_controls_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "profiles_email_idx" ON "public"."profiles" USING "btree" ("email");
+ALTER TABLE ONLY "public"."rd_reports"
+    ADD CONSTRAINT "rd_reports_business_year_type_unique" UNIQUE ("business_year_id", "type");
 
 
 
-CREATE INDEX "profiles_updated_at_idx" ON "public"."profiles" USING "btree" ("updated_at");
+COMMENT ON CONSTRAINT "rd_reports_business_year_type_unique" ON "public"."rd_reports" IS 'Ensures only one report per business year and type combination - supports ON CONFLICT for upsert operations';
 
 
 
-CREATE INDEX "tax_calculations_user_id_idx" ON "public"."tax_calculations" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_reports"
+    ADD CONSTRAINT "rd_reports_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "tax_calculations_year_idx" ON "public"."tax_calculations" USING "btree" ("year");
+ALTER TABLE ONLY "public"."rd_research_activities"
+    ADD CONSTRAINT "rd_research_activities_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE INDEX "tax_profiles_user_id_idx" ON "public"."tax_profiles" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_research_categories"
+    ADD CONSTRAINT "rd_research_categories_name_key" UNIQUE ("name");
 
 
 
-CREATE UNIQUE INDEX "unique_tax_estimate_per_user" ON "public"."tax_estimates" USING "btree" ("user_id");
+ALTER TABLE ONLY "public"."rd_research_categories"
+    ADD CONSTRAINT "rd_research_categories_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "handle_rd_contractor_subcomponents_updated_at" BEFORE UPDATE ON "public"."rd_contractor_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
+ALTER TABLE ONLY "public"."rd_research_raw"
+    ADD CONSTRAINT "rd_research_raw_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "handle_rd_contractor_year_data_updated_at" BEFORE UPDATE ON "public"."rd_contractor_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
+ALTER TABLE ONLY "public"."rd_research_steps"
+    ADD CONSTRAINT "rd_research_steps_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "handle_rd_federal_credit_results_updated_at" BEFORE UPDATE ON "public"."rd_federal_credit_results" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
+ALTER TABLE ONLY "public"."rd_research_subcomponents"
+    ADD CONSTRAINT "rd_research_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "handle_rd_supply_subcomponents_updated_at" BEFORE UPDATE ON "public"."rd_supply_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
+ALTER TABLE ONLY "public"."rd_roles"
+    ADD CONSTRAINT "rd_roles_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "handle_rd_supply_year_data_updated_at" BEFORE UPDATE ON "public"."rd_supply_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
+ALTER TABLE ONLY "public"."rd_selected_activities"
+    ADD CONSTRAINT "rd_selected_activities_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "log_document_file_access" AFTER UPDATE ON "public"."document_files" FOR EACH ROW EXECUTE FUNCTION "public"."log_document_access"();
+ALTER TABLE ONLY "public"."rd_selected_filter"
+    ADD CONSTRAINT "rd_selected_filter_business_year_id_key" UNIQUE ("business_year_id");
 
 
 
-CREATE OR REPLACE TRIGGER "set_updated_at_rd_supplies" BEFORE UPDATE ON "public"."rd_supplies" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
+ALTER TABLE ONLY "public"."rd_selected_filter"
+    ADD CONSTRAINT "rd_selected_filter_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "set_updated_at_rd_supply_subcomponents" BEFORE UPDATE ON "public"."rd_supply_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
+ALTER TABLE ONLY "public"."rd_selected_steps"
+    ADD CONSTRAINT "rd_selected_steps_business_year_id_step_id_key" UNIQUE ("business_year_id", "step_id");
 
 
 
-CREATE OR REPLACE TRIGGER "set_updated_at_rd_supply_year_data" BEFORE UPDATE ON "public"."rd_supply_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
+ALTER TABLE ONLY "public"."rd_selected_steps"
+    ADD CONSTRAINT "rd_selected_steps_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_auto_log_account_changes" AFTER INSERT OR DELETE OR UPDATE ON "public"."accounts" FOR EACH ROW EXECUTE FUNCTION "public"."auto_log_account_changes"();
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_business_year_id_subcomponent_id_key" UNIQUE ("business_year_id", "subcomponent_id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_auto_log_profile_changes" AFTER INSERT OR DELETE OR UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."auto_log_profile_changes"();
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_auto_log_significant_tool_usage" AFTER INSERT ON "public"."tool_usage_logs" FOR EACH ROW EXECUTE FUNCTION "public"."auto_log_significant_tool_usage"();
+ALTER TABLE ONLY "public"."rd_signature_records"
+    ADD CONSTRAINT "rd_signature_records_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_auto_log_tool_assignment_changes" AFTER INSERT OR DELETE OR UPDATE ON "public"."account_tool_access" FOR EACH ROW EXECUTE FUNCTION "public"."auto_log_tool_assignment_changes"();
+ALTER TABLE ONLY "public"."rd_signatures"
+    ADD CONSTRAINT "rd_signatures_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_client_users_updated_at" BEFORE UPDATE ON "public"."client_users" FOR EACH ROW EXECUTE FUNCTION "public"."update_client_users_updated_at"();
+ALTER TABLE ONLY "public"."rd_state_calculations_full"
+    ADD CONSTRAINT "rd_state_calculations_full_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_create_strategy_details" AFTER INSERT ON "public"."tax_proposals" FOR EACH ROW EXECUTE FUNCTION "public"."create_strategy_details_for_proposal"();
+ALTER TABLE ONLY "public"."rd_state_calculations"
+    ADD CONSTRAINT "rd_state_calculations_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_ensure_client_has_owner_delete" BEFORE DELETE ON "public"."client_users" FOR EACH ROW EXECUTE FUNCTION "public"."ensure_client_has_owner"();
+ALTER TABLE ONLY "public"."rd_state_credit_configs"
+    ADD CONSTRAINT "rd_state_credit_configs_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_ensure_client_has_owner_update" BEFORE UPDATE ON "public"."client_users" FOR EACH ROW EXECUTE FUNCTION "public"."ensure_client_has_owner"();
+ALTER TABLE ONLY "public"."rd_state_credit_configs"
+    ADD CONSTRAINT "rd_state_credit_configs_state_code_key" UNIQUE ("state_code");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_invitations_updated_at" BEFORE UPDATE ON "public"."invitations" FOR EACH ROW EXECUTE FUNCTION "public"."update_invitations_updated_at"();
+ALTER TABLE ONLY "public"."rd_state_proforma_data"
+    ADD CONSTRAINT "rd_state_proforma_data_business_year_id_state_code_method_key" UNIQUE ("business_year_id", "state_code", "method");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_set_invitation_token" BEFORE INSERT ON "public"."invitations" FOR EACH ROW EXECUTE FUNCTION "public"."set_invitation_token"();
+ALTER TABLE ONLY "public"."rd_state_proforma_data"
+    ADD CONSTRAINT "rd_state_proforma_data_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_update_account_tool_access_updated_at" BEFORE UPDATE ON "public"."account_tool_access" FOR EACH ROW EXECUTE FUNCTION "public"."update_account_tool_access_updated_at"();
+ALTER TABLE ONLY "public"."rd_state_proforma_lines"
+    ADD CONSTRAINT "rd_state_proforma_lines_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "trigger_update_profile_updated_at" BEFORE UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."update_profile_updated_at"();
+ALTER TABLE ONLY "public"."rd_state_proformas"
+    ADD CONSTRAINT "rd_state_proformas_business_year_id_state_code_key" UNIQUE ("business_year_id", "state_code");
 
 
 
-CREATE OR REPLACE TRIGGER "update_client_activities_updated_at" BEFORE UPDATE ON "public"."client_activities" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
+ALTER TABLE ONLY "public"."rd_state_proformas"
+    ADD CONSTRAINT "rd_state_proformas_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "update_client_dashboard_metrics_updated_at" BEFORE UPDATE ON "public"."client_dashboard_metrics" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
+ALTER TABLE ONLY "public"."rd_subcomponents"
+    ADD CONSTRAINT "rd_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "update_client_engagement_status_updated_at" BEFORE UPDATE ON "public"."client_engagement_status" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
+ALTER TABLE ONLY "public"."rd_supplies"
+    ADD CONSTRAINT "rd_supplies_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "update_document_files_updated_at" BEFORE UPDATE ON "public"."document_files" FOR EACH ROW EXECUTE FUNCTION "public"."update_document_updated_at"();
+ALTER TABLE ONLY "public"."rd_supply_subcomponents"
+    ADD CONSTRAINT "rd_supply_subcomponents_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "update_document_folders_updated_at" BEFORE UPDATE ON "public"."document_folders" FOR EACH ROW EXECUTE FUNCTION "public"."update_document_updated_at"();
+ALTER TABLE ONLY "public"."rd_supply_subcomponents"
+    ADD CONSTRAINT "rd_supply_subcomponents_unique" UNIQUE ("supply_id", "subcomponent_id", "business_year_id");
 
 
 
-CREATE OR REPLACE TRIGGER "update_rd_state_calculations_updated_at" BEFORE UPDATE ON "public"."rd_state_calculations" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
+ALTER TABLE ONLY "public"."rd_supply_year_data"
+    ADD CONSTRAINT "rd_supply_year_data_pkey" PRIMARY KEY ("id");
 
 
 
-CREATE OR REPLACE TRIGGER "validate_document_share_access" BEFORE INSERT OR UPDATE ON "public"."document_shares" FOR EACH ROW EXECUTE FUNCTION "public"."validate_document_share"();
+ALTER TABLE ONLY "public"."rd_support_documents"
+    ADD CONSTRAINT "rd_support_documents_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_activities"
-    ADD CONSTRAINT "account_activities_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."reinsurance_details"
+    ADD CONSTRAINT "reinsurance_details_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_activities"
-    ADD CONSTRAINT "account_activities_actor_id_fkey" FOREIGN KEY ("actor_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."research_activities"
+    ADD CONSTRAINT "research_activities_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."strategy_commission_rates"
+    ADD CONSTRAINT "strategy_commission_rates_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."accounts"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."strategy_details"
+    ADD CONSTRAINT "strategy_details_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."strategy_details"
+    ADD CONSTRAINT "strategy_details_proposal_id_strategy_id_key" UNIQUE ("proposal_id", "strategy_id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_granted_by_fkey" FOREIGN KEY ("granted_by") REFERENCES "public"."profiles"("id");
+ALTER TABLE ONLY "public"."supply_expenses"
+    ADD CONSTRAINT "supply_expenses_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_tool_id_fkey" FOREIGN KEY ("tool_id") REFERENCES "public"."tools"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."tax_calculations"
+    ADD CONSTRAINT "tax_calculations_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."account_tool_access"
-    ADD CONSTRAINT "account_tool_access_updated_by_fkey" FOREIGN KEY ("updated_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."tax_estimates"
+    ADD CONSTRAINT "tax_estimates_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."admin_client_files"
-    ADD CONSTRAINT "admin_client_files_admin_id_fkey" FOREIGN KEY ("admin_id") REFERENCES "public"."profiles"("id");
+ALTER TABLE ONLY "public"."tax_profiles"
+    ADD CONSTRAINT "tax_profiles_pkey" PRIMARY KEY ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."admin_client_files"
-    ADD CONSTRAINT "admin_client_files_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id");
+ALTER TABLE ONLY "public"."tax_proposals"
+    ADD CONSTRAINT "tax_proposals_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."admin_client_files"
-    ADD CONSTRAINT "admin_client_files_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."profiles"("id");
+ALTER TABLE ONLY "public"."tool_enrollments"
+    ADD CONSTRAINT "tool_enrollments_client_file_id_business_id_tool_slug_key" UNIQUE ("client_file_id", "business_id", "tool_slug");
 
 
 
-ALTER TABLE ONLY "public"."admin_sessions"
-    ADD CONSTRAINT "admin_sessions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."tool_enrollments"
+    ADD CONSTRAINT "tool_enrollments_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."affiliate_tool_permissions"
-    ADD CONSTRAINT "affiliate_tool_permissions_affiliate_profile_id_fkey" FOREIGN KEY ("affiliate_profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."rd_research_activities"
+    ADD CONSTRAINT "unique_activity_per_focus" UNIQUE ("title", "focus_id");
 
 
 
-ALTER TABLE ONLY "public"."affiliate_tool_permissions"
-    ADD CONSTRAINT "affiliate_tool_permissions_tool_id_fkey" FOREIGN KEY ("tool_id") REFERENCES "public"."tools"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."rd_areas"
+    ADD CONSTRAINT "unique_area_name_per_category" UNIQUE ("name", "category_id");
 
 
 
-ALTER TABLE ONLY "public"."affiliates"
-    ADD CONSTRAINT "affiliates_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."rd_research_categories"
+    ADD CONSTRAINT "unique_category_name" UNIQUE ("name");
 
 
 
-ALTER TABLE ONLY "public"."augusta_rule_details"
-    ADD CONSTRAINT "augusta_rule_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."rd_focuses"
+    ADD CONSTRAINT "unique_focus_name_per_area" UNIQUE ("name", "area_id");
 
 
 
-ALTER TABLE ONLY "public"."billing_events"
-    ADD CONSTRAINT "billing_events_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+ALTER TABLE ONLY "public"."tax_profiles"
+    ADD CONSTRAINT "unique_user_id" UNIQUE ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."billing_events"
-    ADD CONSTRAINT "billing_events_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."user_preferences"
+    ADD CONSTRAINT "user_preferences_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."billing_events"
-    ADD CONSTRAINT "billing_events_payment_id_fkey" FOREIGN KEY ("payment_id") REFERENCES "public"."payments"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."users"
+    ADD CONSTRAINT "users_email_key" UNIQUE ("email");
 
 
 
-ALTER TABLE ONLY "public"."billing_events"
-    ADD CONSTRAINT "billing_events_subscription_id_fkey" FOREIGN KEY ("subscription_id") REFERENCES "public"."subscriptions"("id") ON DELETE SET NULL;
+ALTER TABLE ONLY "public"."users"
+    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");
 
 
 
-ALTER TABLE ONLY "public"."billing_invoices"
-    ADD CONSTRAINT "billing_invoices_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_admin_client_files_admin_id" ON "public"."admin_client_files" USING "btree" ("admin_id");
 
 
 
-ALTER TABLE ONLY "public"."billing_invoices"
-    ADD CONSTRAINT "billing_invoices_subscription_id_fkey" FOREIGN KEY ("subscription_id") REFERENCES "public"."subscriptions"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_admin_client_files_affiliate_id" ON "public"."admin_client_files" USING "btree" ("affiliate_id");
 
 
 
-ALTER TABLE ONLY "public"."bulk_operation_results"
-    ADD CONSTRAINT "bulk_operation_results_bulk_operation_id_fkey" FOREIGN KEY ("bulk_operation_id") REFERENCES "public"."bulk_operations"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_admin_client_files_archived" ON "public"."admin_client_files" USING "btree" ("archived");
 
 
 
-ALTER TABLE ONLY "public"."bulk_operation_results"
-    ADD CONSTRAINT "bulk_operation_results_target_profile_id_fkey" FOREIGN KEY ("target_profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_admin_client_files_business_id" ON "public"."admin_client_files" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."bulk_operations"
-    ADD CONSTRAINT "bulk_operations_initiated_by_fkey" FOREIGN KEY ("initiated_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_admin_client_files_created_at" ON "public"."admin_client_files" USING "btree" ("created_at");
 
 
 
-ALTER TABLE ONLY "public"."business_years"
-    ADD CONSTRAINT "business_years_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_admin_client_files_email" ON "public"."admin_client_files" USING "btree" ("email");
 
 
 
-ALTER TABLE ONLY "public"."businesses"
-    ADD CONSTRAINT "businesses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_augusta_rule_details_strategy_detail_id" ON "public"."augusta_rule_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."calculations"
-    ADD CONSTRAINT "calculations_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_billable_summary_activity" ON "public"."rd_billable_time_summary" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."charitable_donation_details"
-    ADD CONSTRAINT "charitable_donation_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_billable_summary_business_year" ON "public"."rd_billable_time_summary" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."client_activities"
-    ADD CONSTRAINT "client_activities_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_business_years_business_id" ON "public"."business_years" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."client_dashboard_metrics"
-    ADD CONSTRAINT "client_dashboard_metrics_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_business_years_year" ON "public"."business_years" USING "btree" ("year");
 
 
 
-ALTER TABLE ONLY "public"."client_engagement_status"
-    ADD CONSTRAINT "client_engagement_status_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_businesses_client_id" ON "public"."businesses" USING "btree" ("client_id");
 
 
 
-ALTER TABLE ONLY "public"."client_users"
-    ADD CONSTRAINT "client_users_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_businesses_entity_type" ON "public"."businesses" USING "btree" ("entity_type");
 
 
 
-ALTER TABLE ONLY "public"."client_users"
-    ADD CONSTRAINT "client_users_invited_by_fkey" FOREIGN KEY ("invited_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_businesses_is_active" ON "public"."businesses" USING "btree" ("is_active");
 
 
 
-ALTER TABLE ONLY "public"."client_users"
-    ADD CONSTRAINT "client_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_centralized_businesses_created_at" ON "public"."centralized_businesses" USING "btree" ("created_at");
 
 
 
-ALTER TABLE ONLY "public"."clients"
-    ADD CONSTRAINT "clients_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_charitable_donation_details_strategy_detail_id" ON "public"."charitable_donation_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."clients"
-    ADD CONSTRAINT "clients_primary_affiliate_id_fkey" FOREIGN KEY ("primary_affiliate_id") REFERENCES "public"."accounts"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_clients_archived" ON "public"."clients" USING "btree" ("archived");
 
 
 
-ALTER TABLE ONLY "public"."commission_transactions"
-    ADD CONSTRAINT "commission_transactions_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_clients_city" ON "public"."clients" USING "btree" ("city");
 
 
 
-ALTER TABLE ONLY "public"."commission_transactions"
-    ADD CONSTRAINT "commission_transactions_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_clients_created_at" ON "public"."clients" USING "btree" ("created_at");
 
 
 
-ALTER TABLE ONLY "public"."commission_transactions"
-    ADD CONSTRAINT "commission_transactions_expert_id_fkey" FOREIGN KEY ("expert_id") REFERENCES "public"."experts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_clients_created_by" ON "public"."clients" USING "btree" ("created_by");
 
 
 
-ALTER TABLE ONLY "public"."commission_transactions"
-    ADD CONSTRAINT "commission_transactions_proposal_id_fkey" FOREIGN KEY ("proposal_id") REFERENCES "public"."tax_proposals"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_clients_email" ON "public"."clients" USING "btree" ("email");
 
 
 
-ALTER TABLE ONLY "public"."convertible_tax_bonds_details"
-    ADD CONSTRAINT "convertible_tax_bonds_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_clients_zip_code" ON "public"."clients" USING "btree" ("zip_code");
 
 
 
-ALTER TABLE ONLY "public"."cost_segregation_details"
-    ADD CONSTRAINT "cost_segregation_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_convertible_tax_bonds_details_strategy_detail_id" ON "public"."convertible_tax_bonds_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."document_access_logs"
-    ADD CONSTRAINT "document_access_logs_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."document_files"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_cost_segregation_details_strategy_detail_id" ON "public"."cost_segregation_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."document_access_logs"
-    ADD CONSTRAINT "document_access_logs_share_id_fkey" FOREIGN KEY ("share_id") REFERENCES "public"."document_shares"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_document_links_contractor" ON "public"."rd_document_links" USING "btree" ("contractor_id");
 
 
 
-ALTER TABLE ONLY "public"."document_comments"
-    ADD CONSTRAINT "document_comments_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."document_files"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_document_links_doc" ON "public"."rd_document_links" USING "btree" ("document_id");
 
 
 
-ALTER TABLE ONLY "public"."document_comments"
-    ADD CONSTRAINT "document_comments_parent_comment_id_fkey" FOREIGN KEY ("parent_comment_id") REFERENCES "public"."document_comments"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_document_links_supply" ON "public"."rd_document_links" USING "btree" ("supply_id");
 
 
 
-ALTER TABLE ONLY "public"."document_files"
-    ADD CONSTRAINT "document_files_folder_id_fkey" FOREIGN KEY ("folder_id") REFERENCES "public"."document_folders"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_family_management_company_details_strategy_detail_id" ON "public"."family_management_company_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."document_files"
-    ADD CONSTRAINT "document_files_parent_version_id_fkey" FOREIGN KEY ("parent_version_id") REFERENCES "public"."document_files"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_hire_children_details_strategy_detail_id" ON "public"."hire_children_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."document_folders"
-    ADD CONSTRAINT "document_folders_parent_folder_id_fkey" FOREIGN KEY ("parent_folder_id") REFERENCES "public"."document_folders"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_personal_years_client_id" ON "public"."personal_years" USING "btree" ("client_id");
 
 
 
-ALTER TABLE ONLY "public"."document_processing_jobs"
-    ADD CONSTRAINT "document_processing_jobs_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."document_files"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_personal_years_year" ON "public"."personal_years" USING "btree" ("year");
 
 
 
-ALTER TABLE ONLY "public"."document_shares"
-    ADD CONSTRAINT "document_shares_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."document_files"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_procedure_analysis_code" ON "public"."rd_procedure_analysis" USING "btree" ("procedure_code");
 
 
 
-ALTER TABLE ONLY "public"."document_versions"
-    ADD CONSTRAINT "document_versions_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."document_files"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_procedure_analysis_doc" ON "public"."rd_procedure_analysis" USING "btree" ("document_id");
 
 
 
-ALTER TABLE ONLY "public"."experts"
-    ADD CONSTRAINT "experts_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_procedure_links_activity" ON "public"."rd_procedure_research_links" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."family_management_company_details"
-    ADD CONSTRAINT "family_management_company_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_procedure_links_status" ON "public"."rd_procedure_research_links" USING "btree" ("status");
 
 
 
-ALTER TABLE ONLY "public"."feature_usage_tracking"
-    ADD CONSTRAINT "feature_usage_tracking_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_business_years_business_year" ON "public"."rd_business_years" USING "btree" ("business_id", "year");
 
 
 
-ALTER TABLE ONLY "public"."hire_children_details"
-    ADD CONSTRAINT "hire_children_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_business_years_credits_locked" ON "public"."rd_business_years" USING "btree" ("credits_locked") WHERE ("credits_locked" = true);
 
 
 
-ALTER TABLE ONLY "public"."invitations"
-    ADD CONSTRAINT "invitations_accepted_by_fkey" FOREIGN KEY ("accepted_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_businesses_category_id" ON "public"."rd_businesses" USING "btree" ("category_id");
 
 
 
-ALTER TABLE ONLY "public"."invitations"
-    ADD CONSTRAINT "invitations_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_businesses_ein" ON "public"."rd_businesses" USING "btree" ("ein") WHERE ("ein" IS NOT NULL);
 
 
 
-ALTER TABLE ONLY "public"."invitations"
-    ADD CONSTRAINT "invitations_invited_by_fkey" FOREIGN KEY ("invited_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_businesses_github_token_exists" ON "public"."rd_businesses" USING "btree" ("github_token") WHERE ("github_token" IS NOT NULL);
 
 
 
-ALTER TABLE ONLY "public"."invoice_line_items"
-    ADD CONSTRAINT "invoice_line_items_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."billing_invoices"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_businesses_historical_data" ON "public"."rd_businesses" USING "gin" ("historical_data");
 
 
 
-ALTER TABLE ONLY "public"."invoices"
-    ADD CONSTRAINT "invoices_account_id_fkey" FOREIGN KEY ("partner_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_client_portal_tokens_active" ON "public"."rd_client_portal_tokens" USING "btree" ("business_id", "is_active", "expires_at") WHERE ("is_active" = true);
 
 
 
-ALTER TABLE ONLY "public"."leads"
-    ADD CONSTRAINT "leads_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_client_portal_tokens_business" ON "public"."rd_client_portal_tokens" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."mfa_settings"
-    ADD CONSTRAINT "mfa_settings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_client_portal_tokens_business_id" ON "public"."rd_client_portal_tokens" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."payment_methods"
-    ADD CONSTRAINT "payment_methods_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_client_portal_tokens_token" ON "public"."rd_client_portal_tokens" USING "btree" ("token");
 
 
 
-ALTER TABLE ONLY "public"."payments"
-    ADD CONSTRAINT "payments_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_contractor_subcomponents_business_year_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."payments"
-    ADD CONSTRAINT "payments_payment_method_id_fkey" FOREIGN KEY ("payment_method_id") REFERENCES "public"."payment_methods"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractor_subcomponents_contractor_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("contractor_id");
 
 
 
-ALTER TABLE ONLY "public"."payments"
-    ADD CONSTRAINT "payments_subscription_id_fkey" FOREIGN KEY ("subscription_id") REFERENCES "public"."subscriptions"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractor_subcomponents_subcomponent_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("subcomponent_id");
 
 
 
-ALTER TABLE ONLY "public"."performance_metrics"
-    ADD CONSTRAINT "performance_metrics_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractor_subcomponents_user_id" ON "public"."rd_contractor_subcomponents" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."performance_metrics"
-    ADD CONSTRAINT "performance_metrics_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractor_year_data_business_year_id" ON "public"."rd_contractor_year_data" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."personal_years"
-    ADD CONSTRAINT "personal_years_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_contractor_year_data_contractor_id" ON "public"."rd_contractor_year_data" USING "btree" ("contractor_id");
 
 
 
-ALTER TABLE ONLY "public"."platform_usage_metrics"
-    ADD CONSTRAINT "platform_usage_metrics_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractor_year_data_user_id" ON "public"."rd_contractor_year_data" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."platform_usage_metrics"
-    ADD CONSTRAINT "platform_usage_metrics_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractors_business_id" ON "public"."rd_contractors" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."platform_usage_metrics"
-    ADD CONSTRAINT "platform_usage_metrics_tool_id_fkey" FOREIGN KEY ("tool_id") REFERENCES "public"."tools"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractors_role_id" ON "public"."rd_contractors" USING "btree" ("role_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_permissions"
-    ADD CONSTRAINT "profile_permissions_granted_by_fkey" FOREIGN KEY ("granted_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_contractors_user_id" ON "public"."rd_contractors" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_permissions"
-    ADD CONSTRAINT "profile_permissions_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_employee_subcomponents_employee_id" ON "public"."rd_employee_subcomponents" USING "btree" ("employee_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_roles"
-    ADD CONSTRAINT "profile_roles_granted_by_fkey" FOREIGN KEY ("granted_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_employee_subcomponents_subcomponent_id" ON "public"."rd_employee_subcomponents" USING "btree" ("subcomponent_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_roles"
-    ADD CONSTRAINT "profile_roles_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_employee_subcomponents_user_id" ON "public"."rd_employee_subcomponents" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_sync_conflicts"
-    ADD CONSTRAINT "profile_sync_conflicts_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_employee_year_data_employee_year" ON "public"."rd_employee_year_data" USING "btree" ("employee_id", "business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."profile_sync_conflicts"
-    ADD CONSTRAINT "profile_sync_conflicts_resolved_by_fkey" FOREIGN KEY ("resolved_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_employee_year_data_user_id" ON "public"."rd_employee_year_data" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."profiles"
-    ADD CONSTRAINT "profiles_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_employees_user_id" ON "public"."rd_employees" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."proposal_assignments"
-    ADD CONSTRAINT "proposal_assignments_assigned_by_fkey" FOREIGN KEY ("assigned_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_expenses_business_year_id" ON "public"."rd_expenses" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."proposal_assignments"
-    ADD CONSTRAINT "proposal_assignments_expert_id_fkey" FOREIGN KEY ("expert_id") REFERENCES "public"."experts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_expenses_category" ON "public"."rd_expenses" USING "btree" ("category");
 
 
 
-ALTER TABLE ONLY "public"."proposal_assignments"
-    ADD CONSTRAINT "proposal_assignments_proposal_id_fkey" FOREIGN KEY ("proposal_id") REFERENCES "public"."tax_proposals"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_expenses_employee_id" ON "public"."rd_expenses" USING "btree" ("employee_id");
 
 
 
-ALTER TABLE ONLY "public"."proposal_timeline"
-    ADD CONSTRAINT "proposal_timeline_changed_by_fkey" FOREIGN KEY ("changed_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_federal_credit_activity" ON "public"."rd_federal_credit" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."proposal_timeline"
-    ADD CONSTRAINT "proposal_timeline_proposal_id_fkey" FOREIGN KEY ("proposal_id") REFERENCES "public"."tax_proposals"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_business_year" ON "public"."rd_federal_credit" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_areas"
-    ADD CONSTRAINT "rd_areas_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."rd_research_categories"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_client" ON "public"."rd_federal_credit" USING "btree" ("client_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_business_years"
-    ADD CONSTRAINT "rd_business_years_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_created_at" ON "public"."rd_federal_credit" USING "btree" ("created_at");
 
 
 
-ALTER TABLE ONLY "public"."rd_businesses"
-    ADD CONSTRAINT "rd_businesses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_latest" ON "public"."rd_federal_credit" USING "btree" ("is_latest") WHERE ("is_latest" = true);
 
 
 
-ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
-    ADD CONSTRAINT "rd_contractor_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_results_business_year_id" ON "public"."rd_federal_credit_results" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
-    ADD CONSTRAINT "rd_contractor_subcomponents_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."rd_contractors"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_federal_credit_results_calculation_date" ON "public"."rd_federal_credit_results" USING "btree" ("calculation_date");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
-    ADD CONSTRAINT "rd_contractor_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_qc_document_controls_business_year" ON "public"."rd_qc_document_controls" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractor_year_data"
-    ADD CONSTRAINT "rd_contractor_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_qc_document_controls_qc_approved_date" ON "public"."rd_qc_document_controls" USING "btree" ("qc_approved_date") WHERE ("qc_approved_date" IS NOT NULL);
 
 
 
-ALTER TABLE ONLY "public"."rd_contractor_year_data"
-    ADD CONSTRAINT "rd_contractor_year_data_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."rd_contractors"("id");
+CREATE INDEX "idx_rd_qc_document_controls_released" ON "public"."rd_qc_document_controls" USING "btree" ("is_released");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractors"
-    ADD CONSTRAINT "rd_contractors_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_qc_document_controls_type" ON "public"."rd_qc_document_controls" USING "btree" ("document_type");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractors"
-    ADD CONSTRAINT "rd_contractors_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."rd_roles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_reports_business_year_type" ON "public"."rd_reports" USING "btree" ("business_year_id", "type");
 
 
 
-ALTER TABLE ONLY "public"."rd_contractors"
-    ADD CONSTRAINT "rd_contractors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_reports_html_not_null" ON "public"."rd_reports" USING "btree" ("business_year_id", "type") WHERE ("generated_html" IS NOT NULL);
 
 
 
-ALTER TABLE ONLY "public"."rd_employee_subcomponents"
-    ADD CONSTRAINT "rd_employee_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_reports_qc_approved_at" ON "public"."rd_reports" USING "btree" ("qc_approved_at") WHERE ("qc_approved_at" IS NOT NULL);
 
 
 
-ALTER TABLE ONLY "public"."rd_employee_subcomponents"
-    ADD CONSTRAINT "rd_employee_subcomponents_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_reports_state_gross_receipts" ON "public"."rd_reports" USING "gin" ("state_gross_receipts");
 
 
 
-ALTER TABLE ONLY "public"."rd_employee_subcomponents"
-    ADD CONSTRAINT "rd_employee_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_activities_business_id" ON "public"."rd_research_activities" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_employee_year_data"
-    ADD CONSTRAINT "rd_employee_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_activities_global" ON "public"."rd_research_activities" USING "btree" ("id") WHERE ("business_id" IS NULL);
 
 
 
-ALTER TABLE ONLY "public"."rd_employee_year_data"
-    ADD CONSTRAINT "rd_employee_year_data_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_steps_activity_id" ON "public"."rd_research_steps" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_employees"
-    ADD CONSTRAINT "rd_employees_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_steps_activity_step_order" ON "public"."rd_research_steps" USING "btree" ("research_activity_id", "step_order");
 
 
 
-ALTER TABLE ONLY "public"."rd_employees"
-    ADD CONSTRAINT "rd_employees_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."rd_roles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_steps_business_id" ON "public"."rd_research_steps" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_employees"
-    ADD CONSTRAINT "rd_employees_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");
+CREATE INDEX "idx_rd_research_subcomponents_business_id" ON "public"."rd_research_subcomponents" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_research_subcomponents_step_id" ON "public"."rd_research_subcomponents" USING "btree" ("step_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_roles_business_year_id" ON "public"."rd_roles" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_roles_is_default" ON "public"."rd_roles" USING "btree" ("is_default");
 
 
 
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_roles_type" ON "public"."rd_roles" USING "btree" ("type");
 
 
 
-ALTER TABLE ONLY "public"."rd_expenses"
-    ADD CONSTRAINT "rd_expenses_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
+CREATE UNIQUE INDEX "idx_rd_roles_unique_default_per_year" ON "public"."rd_roles" USING "btree" ("business_year_id", "is_default") WHERE ("is_default" = true);
 
 
 
-ALTER TABLE ONLY "public"."rd_federal_credit_results"
-    ADD CONSTRAINT "rd_federal_credit_results_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_selected_activities_business_year_activity" ON "public"."rd_selected_activities" USING "btree" ("business_year_id", "activity_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_focuses"
-    ADD CONSTRAINT "rd_focuses_area_id_fkey" FOREIGN KEY ("area_id") REFERENCES "public"."rd_areas"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_selected_steps_activity" ON "public"."rd_selected_steps" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_reports"
-    ADD CONSTRAINT "rd_reports_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_selected_steps_business_year" ON "public"."rd_selected_steps" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_reports"
-    ADD CONSTRAINT "rd_reports_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_selected_subcomponents_activity" ON "public"."rd_selected_subcomponents" USING "btree" ("research_activity_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_research_activities"
-    ADD CONSTRAINT "rd_research_activities_focus_id_fkey" FOREIGN KEY ("focus_id") REFERENCES "public"."rd_focuses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_selected_subcomponents_business_year" ON "public"."rd_selected_subcomponents" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_research_steps"
-    ADD CONSTRAINT "rd_research_steps_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_selected_subcomponents_step" ON "public"."rd_selected_subcomponents" USING "btree" ("step_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_research_subcomponents"
-    ADD CONSTRAINT "rd_research_subcomponents_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_signature_records_business_year_id" ON "public"."rd_signature_records" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_roles"
-    ADD CONSTRAINT "rd_roles_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_signature_records_signed_at" ON "public"."rd_signature_records" USING "btree" ("signed_at");
 
 
 
-ALTER TABLE ONLY "public"."rd_roles"
-    ADD CONSTRAINT "rd_roles_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_signatures_business_year" ON "public"."rd_signatures" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_roles"
-    ADD CONSTRAINT "rd_roles_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."rd_roles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_rd_signatures_signed_at" ON "public"."rd_signatures" USING "btree" ("signed_at");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_activities"
-    ADD CONSTRAINT "rd_selected_activities_activity_id_fkey" FOREIGN KEY ("activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_signatures_type" ON "public"."rd_signatures" USING "btree" ("signature_type");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_activities"
-    ADD CONSTRAINT "rd_selected_activities_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_state_proforma_data_lookup" ON "public"."rd_state_proforma_data" USING "btree" ("business_year_id", "state_code", "method");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_filter"
-    ADD CONSTRAINT "rd_selected_filter_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_supplies_business_id" ON "public"."rd_supplies" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_steps"
-    ADD CONSTRAINT "rd_selected_steps_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_supply_subcomponents_business_year_id" ON "public"."rd_supply_subcomponents" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_steps"
-    ADD CONSTRAINT "rd_selected_steps_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_supply_subcomponents_subcomponent_id" ON "public"."rd_supply_subcomponents" USING "btree" ("subcomponent_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_steps"
-    ADD CONSTRAINT "rd_selected_steps_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_rd_supply_subcomponents_supply_id" ON "public"."rd_supply_subcomponents" USING "btree" ("supply_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_reinsurance_details_strategy_detail_id" ON "public"."reinsurance_details" USING "btree" ("strategy_detail_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_calculations_active" ON "public"."rd_state_calculations" USING "btree" ("is_active");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_calculations_state" ON "public"."rd_state_calculations" USING "btree" ("state");
 
 
 
-ALTER TABLE ONLY "public"."rd_selected_subcomponents"
-    ADD CONSTRAINT "rd_selected_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
+CREATE UNIQUE INDEX "idx_state_calculations_unique" ON "public"."rd_state_calculations" USING "btree" ("state", "start_year") WHERE ("is_active" = true);
 
 
 
-ALTER TABLE ONLY "public"."rd_subcomponents"
-    ADD CONSTRAINT "rd_subcomponents_activity_id_fkey" FOREIGN KEY ("activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_calculations_year" ON "public"."rd_state_calculations" USING "btree" ("start_year", "end_year");
 
 
 
-ALTER TABLE ONLY "public"."rd_supplies"
-    ADD CONSTRAINT "rd_supplies_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_credit_configs_state_code" ON "public"."rd_state_credit_configs" USING "btree" ("state_code");
 
 
 
-ALTER TABLE ONLY "public"."rd_supply_subcomponents"
-    ADD CONSTRAINT "rd_supply_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_proforma_lines_state_proforma_id" ON "public"."rd_state_proforma_lines" USING "btree" ("state_proforma_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_supply_subcomponents"
-    ADD CONSTRAINT "rd_supply_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_state_proformas_business_year" ON "public"."rd_state_proformas" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_supply_subcomponents"
-    ADD CONSTRAINT "rd_supply_subcomponents_supply_id_fkey" FOREIGN KEY ("supply_id") REFERENCES "public"."rd_supplies"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_strategy_details_proposal_id" ON "public"."strategy_details" USING "btree" ("proposal_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_supply_year_data"
-    ADD CONSTRAINT "rd_supply_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_strategy_details_strategy_id" ON "public"."strategy_details" USING "btree" ("strategy_id");
 
 
 
-ALTER TABLE ONLY "public"."rd_supply_year_data"
-    ADD CONSTRAINT "rd_supply_year_data_supply_id_fkey" FOREIGN KEY ("supply_id") REFERENCES "public"."rd_supplies"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_support_docs_business_year" ON "public"."rd_support_documents" USING "btree" ("business_year_id");
 
 
 
-ALTER TABLE ONLY "public"."reinsurance_details"
-    ADD CONSTRAINT "reinsurance_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_support_docs_status" ON "public"."rd_support_documents" USING "btree" ("processing_status");
 
 
 
-ALTER TABLE ONLY "public"."security_alerts"
-    ADD CONSTRAINT "security_alerts_resolved_by_fkey" FOREIGN KEY ("resolved_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_support_docs_type" ON "public"."rd_support_documents" USING "btree" ("document_type");
 
 
 
-ALTER TABLE ONLY "public"."security_alerts"
-    ADD CONSTRAINT "security_alerts_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_tax_proposals_affiliate_id" ON "public"."tax_proposals" USING "btree" ("affiliate_id");
 
 
 
-ALTER TABLE ONLY "public"."security_events"
-    ADD CONSTRAINT "security_events_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id");
+CREATE INDEX "idx_tax_proposals_status" ON "public"."tax_proposals" USING "btree" ("status");
 
 
 
-ALTER TABLE ONLY "public"."security_events"
-    ADD CONSTRAINT "security_events_resolved_by_fkey" FOREIGN KEY ("resolved_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_tax_proposals_user_id" ON "public"."tax_proposals" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."strategy_commission_rates"
-    ADD CONSTRAINT "strategy_commission_rates_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_tool_enrollments_business_id" ON "public"."tool_enrollments" USING "btree" ("business_id");
 
 
 
-ALTER TABLE ONLY "public"."strategy_details"
-    ADD CONSTRAINT "strategy_details_proposal_id_fkey" FOREIGN KEY ("proposal_id") REFERENCES "public"."tax_proposals"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_tool_enrollments_client_file_id" ON "public"."tool_enrollments" USING "btree" ("client_file_id");
 
 
 
-ALTER TABLE ONLY "public"."subscriptions"
-    ADD CONSTRAINT "subscriptions_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE INDEX "idx_tool_enrollments_status" ON "public"."tool_enrollments" USING "btree" ("status");
 
 
 
-ALTER TABLE ONLY "public"."subscriptions"
-    ADD CONSTRAINT "subscriptions_billing_contact_profile_id_fkey" FOREIGN KEY ("billing_contact_profile_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "idx_tool_enrollments_tool_slug" ON "public"."tool_enrollments" USING "btree" ("tool_slug");
 
 
 
-ALTER TABLE ONLY "public"."subscriptions"
-    ADD CONSTRAINT "subscriptions_plan_id_fkey" FOREIGN KEY ("plan_id") REFERENCES "public"."subscription_plans"("id") ON DELETE RESTRICT;
+CREATE UNIQUE INDEX "idx_unique_procedure_research_link" ON "public"."rd_procedure_research_links" USING "btree" ("procedure_analysis_id", "research_activity_id", "subcomponent_id");
 
 
 
-ALTER TABLE ONLY "public"."tax_calculations"
-    ADD CONSTRAINT "tax_calculations_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "leads_user_id_idx" ON "public"."leads" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."tax_estimates"
-    ADD CONSTRAINT "tax_estimates_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "profiles_created_at_idx" ON "public"."profiles" USING "btree" ("created_at");
 
 
 
-ALTER TABLE ONLY "public"."tax_profiles"
-    ADD CONSTRAINT "tax_profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "profiles_email_idx" ON "public"."profiles" USING "btree" ("email");
 
 
 
-ALTER TABLE ONLY "public"."tax_proposals"
-    ADD CONSTRAINT "tax_proposals_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE INDEX "profiles_updated_at_idx" ON "public"."profiles" USING "btree" ("updated_at");
 
 
 
-ALTER TABLE ONLY "public"."tax_proposals"
-    ADD CONSTRAINT "tax_proposals_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
+CREATE INDEX "tax_calculations_user_id_idx" ON "public"."tax_calculations" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."tool_enrollments"
-    ADD CONSTRAINT "tool_enrollments_client_file_id_fkey" FOREIGN KEY ("client_file_id") REFERENCES "public"."admin_client_files"("id") ON DELETE CASCADE;
+CREATE INDEX "tax_calculations_year_idx" ON "public"."tax_calculations" USING "btree" ("year");
 
 
 
-ALTER TABLE ONLY "public"."tool_enrollments"
-    ADD CONSTRAINT "tool_enrollments_enrolled_by_fkey" FOREIGN KEY ("enrolled_by") REFERENCES "public"."profiles"("id");
+CREATE INDEX "tax_profiles_user_id_idx" ON "public"."tax_profiles" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."tool_usage_logs"
-    ADD CONSTRAINT "tool_usage_logs_account_id_fkey" FOREIGN KEY ("account_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE UNIQUE INDEX "unique_tax_estimate_per_user" ON "public"."tax_estimates" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."tool_usage_logs"
-    ADD CONSTRAINT "tool_usage_logs_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;
+CREATE INDEX "user_preferences_user_id_idx" ON "public"."user_preferences" USING "btree" ("user_id");
 
 
 
-ALTER TABLE ONLY "public"."tool_usage_logs"
-    ADD CONSTRAINT "tool_usage_logs_tool_id_fkey" FOREIGN KEY ("tool_id") REFERENCES "public"."tools"("id") ON DELETE CASCADE;
+CREATE OR REPLACE TRIGGER "handle_rd_contractor_subcomponents_updated_at" BEFORE UPDATE ON "public"."rd_contractor_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
 
 
 
-ALTER TABLE ONLY "public"."transactions"
-    ADD CONSTRAINT "transactions_account_id_fkey" FOREIGN KEY ("partner_id") REFERENCES "public"."accounts"("id") ON DELETE CASCADE;
+CREATE OR REPLACE TRIGGER "handle_rd_contractor_year_data_updated_at" BEFORE UPDATE ON "public"."rd_contractor_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
 
 
 
-ALTER TABLE ONLY "public"."transactions"
-    ADD CONSTRAINT "transactions_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
+CREATE OR REPLACE TRIGGER "handle_rd_federal_credit_results_updated_at" BEFORE UPDATE ON "public"."rd_federal_credit_results" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
 
 
 
-ALTER TABLE ONLY "public"."transactions"
-    ADD CONSTRAINT "transactions_invoice_id_fkey" FOREIGN KEY ("invoice_id") REFERENCES "public"."invoices"("id") ON DELETE SET NULL;
+CREATE OR REPLACE TRIGGER "handle_rd_supply_subcomponents_updated_at" BEFORE UPDATE ON "public"."rd_supply_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
 
 
 
-ALTER TABLE ONLY "public"."transactions"
-    ADD CONSTRAINT "transactions_tool_id_fkey" FOREIGN KEY ("tool_id") REFERENCES "public"."tools"("id") ON DELETE CASCADE;
+CREATE OR REPLACE TRIGGER "handle_rd_supply_year_data_updated_at" BEFORE UPDATE ON "public"."rd_supply_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."handle_updated_at"();
 
 
 
-CREATE POLICY "Admins can access all business data" ON "public"."businesses" USING ("public"."is_admin"());
+CREATE OR REPLACE TRIGGER "set_updated_at_rd_supplies" BEFORE UPDATE ON "public"."rd_supplies" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
 
 
 
-CREATE POLICY "Admins can access all business_years data" ON "public"."business_years" USING ("public"."is_admin"());
+CREATE OR REPLACE TRIGGER "set_updated_at_rd_supply_subcomponents" BEFORE UPDATE ON "public"."rd_supply_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
 
 
 
-CREATE POLICY "Admins can access all clients" ON "public"."clients" USING ("public"."is_admin"());
+CREATE OR REPLACE TRIGGER "set_updated_at_rd_supply_year_data" BEFORE UPDATE ON "public"."rd_supply_year_data" FOR EACH ROW EXECUTE FUNCTION "public"."set_updated_at"();
 
 
 
-CREATE POLICY "Admins can access all personal_years data" ON "public"."personal_years" USING ("public"."is_admin"());
+CREATE OR REPLACE TRIGGER "trigger_archive_rd_federal_credit_version" AFTER INSERT ON "public"."rd_federal_credit" FOR EACH ROW EXECUTE FUNCTION "public"."archive_rd_federal_credit_version"();
 
 
 
-CREATE POLICY "Admins can access all proposals" ON "public"."tax_proposals" USING ("public"."is_admin"());
+CREATE OR REPLACE TRIGGER "trigger_create_strategy_details" AFTER INSERT ON "public"."tax_proposals" FOR EACH ROW EXECUTE FUNCTION "public"."create_strategy_details_for_proposal"();
 
 
 
-CREATE POLICY "Admins can insert strategy details" ON "public"."strategy_details" FOR INSERT WITH CHECK ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+CREATE OR REPLACE TRIGGER "trigger_safe_update_practice_percent" AFTER INSERT ON "public"."rd_selected_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"();
 
 
 
-CREATE POLICY "Admins can insert tax profiles" ON "public"."tax_profiles" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."profiles"
-  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
+CREATE OR REPLACE TRIGGER "trigger_update_rd_federal_credit_updated_at" BEFORE UPDATE ON "public"."rd_federal_credit" FOR EACH ROW EXECUTE FUNCTION "public"."update_rd_federal_credit_updated_at"();
 
 
 
-CREATE POLICY "Admins can insert tax proposals" ON "public"."tax_proposals" FOR INSERT WITH CHECK ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+CREATE OR REPLACE TRIGGER "trigger_update_rd_state_proforma_data_updated_at" BEFORE UPDATE ON "public"."rd_state_proforma_data" FOR EACH ROW EXECUTE FUNCTION "public"."update_rd_state_proforma_data_updated_at"();
 
 
 
-CREATE POLICY "Admins can log activities" ON "public"."account_activities" FOR INSERT WITH CHECK (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_admin_account"("auth"."uid"())));
+CREATE OR REPLACE TRIGGER "trigger_update_step_name" AFTER INSERT ON "public"."rd_selected_subcomponents" FOR EACH ROW EXECUTE FUNCTION "public"."update_selected_subcomponent_step_name"();
 
 
 
-CREATE POLICY "Admins can manage all client files" ON "public"."admin_client_files" USING ((EXISTS ( SELECT 1
-   FROM "public"."profiles"
-  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
+CREATE OR REPLACE TRIGGER "trigger_update_total_qre" BEFORE INSERT OR UPDATE OF "employee_qre", "contractor_qre", "supply_qre" ON "public"."rd_business_years" FOR EACH ROW EXECUTE FUNCTION "public"."update_total_qre"();
 
 
 
-CREATE POLICY "Admins can manage all client users" ON "public"."client_users" USING ((EXISTS ( SELECT 1
-   FROM "public"."profiles" "p"
-  WHERE (("p"."id" = "auth"."uid"()) AND ("p"."role" = 'admin'::"text")))));
+CREATE OR REPLACE TRIGGER "update_rd_business_years_credits_calculated_at" BEFORE UPDATE OF "federal_credit", "state_credit" ON "public"."rd_business_years" FOR EACH ROW EXECUTE FUNCTION "public"."update_credits_calculated_at"();
 
 
 
-CREATE POLICY "Admins can manage all profile permissions" ON "public"."profile_permissions" USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+CREATE OR REPLACE TRIGGER "update_rd_reports_updated_at" BEFORE UPDATE ON "public"."rd_reports" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
 
 
 
-CREATE POLICY "Admins can manage all profile roles" ON "public"."profile_roles" USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+CREATE OR REPLACE TRIGGER "update_rd_roles_updated_at" BEFORE UPDATE ON "public"."rd_roles" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
 
 
 
-CREATE POLICY "Admins can manage all tool access" ON "public"."account_tool_access" USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_admin_account"("auth"."uid"())));
+CREATE OR REPLACE TRIGGER "update_rd_state_calculations_updated_at" BEFORE UPDATE ON "public"."rd_state_calculations" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();
 
 
 
-CREATE POLICY "Admins can manage all tool enrollments" ON "public"."tool_enrollments" USING ((EXISTS ( SELECT 1
-   FROM "public"."profiles"
-  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
+ALTER TABLE ONLY "public"."admin_client_files"
+    ADD CONSTRAINT "admin_client_files_admin_id_fkey" FOREIGN KEY ("admin_id") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Admins can manage role definitions" ON "public"."role_definitions" USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."admin_client_files"
+    ADD CONSTRAINT "admin_client_files_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Admins can manage subscription plans" ON "public"."subscription_plans" USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."admin_client_files"
+    ADD CONSTRAINT "admin_client_files_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Admins can manage sync conflicts" ON "public"."profile_sync_conflicts" USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."augusta_rule_details"
+    ADD CONSTRAINT "augusta_rule_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can update strategy details" ON "public"."strategy_details" FOR UPDATE USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+ALTER TABLE ONLY "public"."business_years"
+    ADD CONSTRAINT "business_years_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can update tax proposals" ON "public"."tax_proposals" FOR UPDATE USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+ALTER TABLE ONLY "public"."businesses"
+    ADD CONSTRAINT "businesses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all account activities" ON "public"."account_activities" FOR SELECT USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_admin_account"("auth"."uid"())));
+ALTER TABLE ONLY "public"."calculations"
+    ADD CONSTRAINT "calculations_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all accounts" ON "public"."accounts" USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_admin_account"("auth"."uid"())));
+ALTER TABLE ONLY "public"."charitable_donation_details"
+    ADD CONSTRAINT "charitable_donation_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all bulk operation results" ON "public"."bulk_operation_results" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."clients"
+    ADD CONSTRAINT "clients_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Admins can view all bulk operations" ON "public"."bulk_operations" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."commission_transactions"
+    ADD CONSTRAINT "commission_transactions_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all client files" ON "public"."admin_client_files" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."profiles"
-  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
+ALTER TABLE ONLY "public"."commission_transactions"
+    ADD CONSTRAINT "commission_transactions_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Admins can view all feature usage" ON "public"."feature_usage_tracking" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."commission_transactions"
+    ADD CONSTRAINT "commission_transactions_expert_id_fkey" FOREIGN KEY ("expert_id") REFERENCES "public"."experts"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all leads" ON "public"."leads" FOR SELECT USING ("public"."is_admin"());
+ALTER TABLE ONLY "public"."convertible_tax_bonds_details"
+    ADD CONSTRAINT "convertible_tax_bonds_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all profiles" ON "public"."profiles" FOR SELECT USING ("public"."is_admin"());
+ALTER TABLE ONLY "public"."cost_segregation_details"
+    ADD CONSTRAINT "cost_segregation_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all strategy details" ON "public"."strategy_details" FOR SELECT USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+ALTER TABLE ONLY "public"."family_management_company_details"
+    ADD CONSTRAINT "family_management_company_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all subscriptions" ON "public"."subscriptions" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."form_6765_overrides"
+    ADD CONSTRAINT "form_6765_overrides_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id");
 
 
 
-CREATE POLICY "Admins can view all tax profiles" ON "public"."tax_profiles" FOR SELECT USING ("public"."is_admin"());
+ALTER TABLE ONLY "public"."form_6765_overrides"
+    ADD CONSTRAINT "form_6765_overrides_last_modified_by_fkey" FOREIGN KEY ("last_modified_by") REFERENCES "public"."users"("id");
 
 
 
-CREATE POLICY "Admins can view all tax proposals" ON "public"."tax_proposals" FOR SELECT USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
+ALTER TABLE ONLY "public"."hire_children_details"
+    ADD CONSTRAINT "hire_children_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all tool enrollments" ON "public"."tool_enrollments" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."profiles"
-  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
+ALTER TABLE ONLY "public"."leads"
+    ADD CONSTRAINT "leads_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view all usage logs" ON "public"."tool_usage_logs" USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_admin_account"("auth"."uid"())));
+ALTER TABLE ONLY "public"."personal_years"
+    ADD CONSTRAINT "personal_years_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view billing events" ON "public"."billing_events" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."profiles"
+    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view performance metrics" ON "public"."performance_metrics" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."proposal_assignments"
+    ADD CONSTRAINT "proposal_assignments_assigned_by_fkey" FOREIGN KEY ("assigned_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Admins can view platform usage metrics" ON "public"."platform_usage_metrics" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."profiles" "p"
-     JOIN "public"."accounts" "a" ON (("p"."account_id" = "a"."id")))
-  WHERE (("p"."id" = "auth"."uid"()) AND ("a"."type" = 'admin'::"public"."account_type")))));
+ALTER TABLE ONLY "public"."proposal_assignments"
+    ADD CONSTRAINT "proposal_assignments_expert_id_fkey" FOREIGN KEY ("expert_id") REFERENCES "public"."experts"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Admins can view security events" ON "public"."security_events" FOR SELECT USING ("public"."user_is_admin"("auth"."uid"()));
+ALTER TABLE ONLY "public"."proposal_timeline"
+    ADD CONSTRAINT "proposal_timeline_changed_by_fkey" FOREIGN KEY ("changed_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Affiliates can access their clients' business data" ON "public"."businesses" USING ("public"."is_affiliated_with_client"("client_id"));
+ALTER TABLE ONLY "public"."rd_areas"
+    ADD CONSTRAINT "rd_areas_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."rd_research_categories"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Affiliates can access their clients' business_years data" ON "public"."business_years" USING ((EXISTS ( SELECT 1
-   FROM "public"."businesses"
-  WHERE (("businesses"."id" = "business_years"."business_id") AND "public"."is_affiliated_with_client"("businesses"."client_id")))));
+ALTER TABLE ONLY "public"."rd_billable_time_summary"
+    ADD CONSTRAINT "rd_billable_time_summary_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Affiliates can access their clients' personal_years data" ON "public"."personal_years" USING ("public"."is_affiliated_with_client"("client_id"));
+ALTER TABLE ONLY "public"."rd_billable_time_summary"
+    ADD CONSTRAINT "rd_billable_time_summary_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Affiliates can access their own clients" ON "public"."clients" USING ("public"."is_affiliated_with_client"("id"));
+ALTER TABLE ONLY "public"."rd_billable_time_summary"
+    ADD CONSTRAINT "rd_billable_time_summary_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Affiliates can access their own proposals" ON "public"."tax_proposals" USING (("created_by" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_business_years"
+    ADD CONSTRAINT "rd_business_years_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Allow all delete for dev" ON "public"."tax_proposals" FOR DELETE USING (true);
+ALTER TABLE ONLY "public"."rd_business_years"
+    ADD CONSTRAINT "rd_business_years_credits_locked_by_fkey" FOREIGN KEY ("credits_locked_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Allow all for authenticated" ON "public"."rd_selected_filter" USING (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_business_years"
+    ADD CONSTRAINT "rd_business_years_documents_released_by_fkey" FOREIGN KEY ("documents_released_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Allow all for dev" ON "public"."rd_contractor_year_data" USING (true) WITH CHECK (true);
+ALTER TABLE ONLY "public"."rd_business_years"
+    ADD CONSTRAINT "rd_business_years_qc_approved_by_fkey" FOREIGN KEY ("qc_approved_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Allow all insert for dev" ON "public"."tax_proposals" FOR INSERT WITH CHECK (true);
+ALTER TABLE ONLY "public"."rd_businesses"
+    ADD CONSTRAINT "rd_businesses_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."rd_research_categories"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Allow all select" ON "public"."profiles" FOR SELECT USING (true);
+ALTER TABLE ONLY "public"."rd_businesses"
+    ADD CONSTRAINT "rd_businesses_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Allow all select for debug" ON "public"."tax_proposals" FOR SELECT USING (true);
+ALTER TABLE ONLY "public"."rd_client_portal_tokens"
+    ADD CONSTRAINT "rd_client_portal_tokens_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id");
 
 
 
-CREATE POLICY "Allow all select for dev" ON "public"."tax_proposals" FOR SELECT USING (true);
+ALTER TABLE ONLY "public"."rd_client_portal_tokens"
+    ADD CONSTRAINT "rd_client_portal_tokens_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Allow all update for dev" ON "public"."tax_proposals" FOR UPDATE USING (true);
+ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
+    ADD CONSTRAINT "rd_contractor_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Allow read access to rd_research_steps" ON "public"."rd_research_steps" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
+    ADD CONSTRAINT "rd_contractor_subcomponents_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."rd_contractors"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Allow read access to rd_research_subcomponents" ON "public"."rd_research_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_contractor_subcomponents"
+    ADD CONSTRAINT "rd_contractor_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Anyone can view active subscription plans" ON "public"."subscription_plans" FOR SELECT USING (("is_active" = true));
+ALTER TABLE ONLY "public"."rd_contractor_year_data"
+    ADD CONSTRAINT "rd_contractor_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Anyone can view invitations by token" ON "public"."invitations" FOR SELECT USING (("token" IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_contractor_year_data"
+    ADD CONSTRAINT "rd_contractor_year_data_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."rd_contractors"("id");
 
 
 
-CREATE POLICY "Client can access own access logs" ON "public"."document_access_logs" USING (("client_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_contractors"
+    ADD CONSTRAINT "rd_contractors_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client can access own comments" ON "public"."document_comments" USING (("client_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_contractors"
+    ADD CONSTRAINT "rd_contractors_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."rd_roles"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Client can access own files" ON "public"."document_files" USING (("client_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_contractors"
+    ADD CONSTRAINT "rd_contractors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Client can access own folders" ON "public"."document_folders" USING (("client_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_document_links"
+    ADD CONSTRAINT "rd_document_links_contractor_id_fkey" FOREIGN KEY ("contractor_id") REFERENCES "public"."rd_contractor_year_data"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Client can access own processing jobs" ON "public"."document_processing_jobs" USING ((EXISTS ( SELECT 1
-   FROM "public"."document_files"
-  WHERE (("document_files"."id" = "document_processing_jobs"."document_id") AND ("document_files"."client_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_document_links"
+    ADD CONSTRAINT "rd_document_links_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."rd_support_documents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client can access own shares" ON "public"."document_shares" USING (("client_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_document_links"
+    ADD CONSTRAINT "rd_document_links_supply_id_fkey" FOREIGN KEY ("supply_id") REFERENCES "public"."rd_supply_subcomponents"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Client can access own versions" ON "public"."document_versions" USING ((EXISTS ( SELECT 1
-   FROM "public"."document_files"
-  WHERE (("document_files"."id" = "document_versions"."document_id") AND ("document_files"."client_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_employee_subcomponents"
+    ADD CONSTRAINT "rd_employee_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can create invitations" ON "public"."invitations" FOR INSERT WITH CHECK (("public"."user_has_direct_client_access"("auth"."uid"(), "client_id") OR "public"."user_is_client_owner"("auth"."uid"(), "client_id")));
+ALTER TABLE ONLY "public"."rd_employee_subcomponents"
+    ADD CONSTRAINT "rd_employee_subcomponents_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can delete invitations" ON "public"."invitations" FOR DELETE USING (("public"."user_has_direct_client_access"("auth"."uid"(), "client_id") OR "public"."user_is_client_owner"("auth"."uid"(), "client_id")));
+ALTER TABLE ONLY "public"."rd_employee_subcomponents"
+    ADD CONSTRAINT "rd_employee_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can manage client users" ON "public"."client_users" USING ("public"."user_has_direct_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_employee_year_data"
+    ADD CONSTRAINT "rd_employee_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can update activities" ON "public"."client_activities" FOR UPDATE USING ("public"."user_has_client_role"("auth"."uid"(), "client_id", 'owner'::"public"."client_role"));
+ALTER TABLE ONLY "public"."rd_employee_year_data"
+    ADD CONSTRAINT "rd_employee_year_data_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can update engagement status" ON "public"."client_engagement_status" FOR UPDATE USING ("public"."user_has_client_role"("auth"."uid"(), "client_id", 'owner'::"public"."client_role"));
+ALTER TABLE ONLY "public"."rd_employees"
+    ADD CONSTRAINT "rd_employees_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client owners can update invitations" ON "public"."invitations" FOR UPDATE USING (("public"."user_has_direct_client_access"("auth"."uid"(), "client_id") OR "public"."user_is_client_owner"("auth"."uid"(), "client_id")));
+ALTER TABLE ONLY "public"."rd_employees"
+    ADD CONSTRAINT "rd_employees_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."rd_roles"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Client users can insert tax proposals" ON "public"."tax_proposals" FOR INSERT WITH CHECK ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_employees"
+    ADD CONSTRAINT "rd_employees_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Client users can insert their activities" ON "public"."client_activities" FOR INSERT WITH CHECK ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can manage research activities" ON "public"."research_activities" USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_client_role"("auth"."uid"(), "business_id", 'member'::"public"."client_role")));
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."rd_employees"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can manage tax calculations" ON "public"."tax_calculations" USING (("public"."user_is_admin"("auth"."uid"()) OR ("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
-   FROM ("public"."client_users" "cu"
-     JOIN "public"."clients" "c" ON (("cu"."client_id" = "c"."id")))
-  WHERE (("cu"."user_id" = "auth"."uid"()) AND ("cu"."is_active" = true) AND ("cu"."role" = ANY (ARRAY['member'::"public"."client_role", 'accountant'::"public"."client_role", 'owner'::"public"."client_role"])) AND ("c"."id" IN ( SELECT "cu2"."client_id"
-           FROM "public"."client_users" "cu2"
-          WHERE (("cu2"."user_id" = "tax_calculations"."user_id") AND ("cu2"."is_active" = true)))))))));
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can manage tax proposals" ON "public"."tax_proposals" USING (("public"."user_is_admin"("auth"."uid"()) OR ("user_id" = "auth"."uid"()) OR ("created_by" = "auth"."uid"()) OR "public"."user_has_client_role"("auth"."uid"(), "client_id", 'member'::"public"."client_role")));
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can update tax proposals" ON "public"."tax_proposals" FOR UPDATE USING ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_expenses"
+    ADD CONSTRAINT "rd_expenses_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can update their clients" ON "public"."clients" FOR UPDATE USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_client_role"("auth"."uid"(), "id", 'owner'::"public"."client_role")));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."business_years"("id");
 
 
 
-CREATE POLICY "Client users can view dashboard metrics" ON "public"."client_dashboard_metrics" FOR SELECT USING ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_client_id_fkey" FOREIGN KEY ("client_id") REFERENCES "public"."clients"("id");
 
 
 
-CREATE POLICY "Client users can view engagement status" ON "public"."client_engagement_status" FOR SELECT USING ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Client users can view research activities" ON "public"."research_activities" FOR SELECT USING (("public"."user_is_admin"("auth"."uid"()) OR "public"."user_has_client_access"("auth"."uid"(), "business_id")));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_previous_version_id_fkey" FOREIGN KEY ("previous_version_id") REFERENCES "public"."rd_federal_credit"("id");
 
 
 
-CREATE POLICY "Client users can view tax calculations" ON "public"."tax_calculations" FOR SELECT USING (("public"."user_is_admin"("auth"."uid"()) OR ("user_id" = "auth"."uid"()) OR (EXISTS ( SELECT 1
-   FROM ("public"."client_users" "cu"
-     JOIN "public"."clients" "c" ON (("cu"."client_id" = "c"."id")))
-  WHERE (("cu"."user_id" = "auth"."uid"()) AND ("cu"."is_active" = true) AND ("c"."id" IN ( SELECT "cu2"."client_id"
-           FROM "public"."client_users" "cu2"
-          WHERE (("cu2"."user_id" = "tax_calculations"."user_id") AND ("cu2"."is_active" = true)))))))));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."research_activities"("id");
 
 
 
-CREATE POLICY "Client users can view tax proposals" ON "public"."tax_proposals" FOR SELECT USING (("public"."user_is_admin"("auth"."uid"()) OR ("user_id" = "auth"."uid"()) OR ("created_by" = "auth"."uid"()) OR "public"."user_has_client_access"("auth"."uid"(), "client_id")));
+ALTER TABLE ONLY "public"."rd_federal_credit_results"
+    ADD CONSTRAINT "rd_federal_credit_results_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Client users can view their activities" ON "public"."client_activities" FOR SELECT USING ("public"."user_has_client_access"("auth"."uid"(), "client_id"));
+ALTER TABLE ONLY "public"."rd_federal_credit"
+    ADD CONSTRAINT "rd_federal_credit_updated_by_fkey" FOREIGN KEY ("updated_by") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Client users can view their clients" ON "public"."clients" FOR SELECT USING (("public"."user_is_admin"("auth"."uid"()) OR ("created_by" = "auth"."uid"()) OR "public"."user_has_client_access"("auth"."uid"(), "id")));
+ALTER TABLE ONLY "public"."rd_focuses"
+    ADD CONSTRAINT "rd_focuses_area_id_fkey" FOREIGN KEY ("area_id") REFERENCES "public"."rd_areas"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_procedure_analysis"
+    ADD CONSTRAINT "rd_procedure_analysis_document_id_fkey" FOREIGN KEY ("document_id") REFERENCES "public"."rd_support_documents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_contractors" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_procedure_research_links"
+    ADD CONSTRAINT "rd_procedure_research_links_approved_by_fkey" FOREIGN KEY ("approved_by") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_employee_subcomponents" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_procedure_research_links"
+    ADD CONSTRAINT "rd_procedure_research_links_procedure_analysis_id_fkey" FOREIGN KEY ("procedure_analysis_id") REFERENCES "public"."rd_procedure_analysis"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_expenses" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_procedure_research_links"
+    ADD CONSTRAINT "rd_procedure_research_links_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_supplies" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_procedure_research_links"
+    ADD CONSTRAINT "rd_procedure_research_links_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable delete for authenticated users only" ON "public"."rd_selected_steps" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_qc_document_controls"
+    ADD CONSTRAINT "rd_qc_document_controls_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_qc_document_controls"
+    ADD CONSTRAINT "rd_qc_document_controls_qc_reviewer_fkey" FOREIGN KEY ("qc_reviewer") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_contractors" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_qc_document_controls"
+    ADD CONSTRAINT "rd_qc_document_controls_released_by_fkey" FOREIGN KEY ("released_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_employee_subcomponents" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_reports"
+    ADD CONSTRAINT "rd_reports_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_expenses" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_reports"
+    ADD CONSTRAINT "rd_reports_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_supplies" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_research_activities"
+    ADD CONSTRAINT "rd_research_activities_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable insert for authenticated users only" ON "public"."rd_selected_steps" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_research_activities"
+    ADD CONSTRAINT "rd_research_activities_focus_id_fkey" FOREIGN KEY ("focus_id") REFERENCES "public"."rd_focuses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable read access for all users" ON "public"."rd_selected_steps" FOR SELECT USING (true);
+ALTER TABLE ONLY "public"."rd_research_steps"
+    ADD CONSTRAINT "rd_research_steps_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_research_steps"
+    ADD CONSTRAINT "rd_research_steps_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_contractors" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_research_subcomponents"
+    ADD CONSTRAINT "rd_research_subcomponents_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_employee_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_research_subcomponents"
+    ADD CONSTRAINT "rd_research_subcomponents_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_expenses" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_roles"
+    ADD CONSTRAINT "rd_roles_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_supplies" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_roles"
+    ADD CONSTRAINT "rd_roles_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_roles"
+    ADD CONSTRAINT "rd_roles_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."rd_roles"("id") ON DELETE SET NULL;
 
 
 
-CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_contractors" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_selected_activities"
+    ADD CONSTRAINT "rd_selected_activities_activity_id_fkey" FOREIGN KEY ("activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_employee_subcomponents" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_selected_activities"
+    ADD CONSTRAINT "rd_selected_activities_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_expenses" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_selected_filter"
+    ADD CONSTRAINT "rd_selected_filter_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_supplies" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
+ALTER TABLE ONLY "public"."rd_selected_steps"
+    ADD CONSTRAINT "rd_selected_steps_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Enable update for authenticated users only" ON "public"."rd_selected_steps" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_selected_steps"
+    ADD CONSTRAINT "rd_selected_steps_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Everyone can view role definitions" ON "public"."role_definitions" FOR SELECT USING (true);
+ALTER TABLE ONLY "public"."rd_selected_steps"
+    ADD CONSTRAINT "rd_selected_steps_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "System can insert usage logs" ON "public"."tool_usage_logs" FOR INSERT WITH CHECK (true);
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "System can log activities" ON "public"."account_activities" FOR INSERT WITH CHECK (true);
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_research_activity_id_fkey" FOREIGN KEY ("research_activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "System can manage dashboard metrics" ON "public"."client_dashboard_metrics" USING (true);
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."rd_research_steps"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can create bulk operations" ON "public"."bulk_operations" FOR INSERT WITH CHECK (("initiated_by" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_selected_subcomponents"
+    ADD CONSTRAINT "rd_selected_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete business years for their businesses" ON "public"."business_years" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM ("public"."businesses"
-     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
-  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_signature_records"
+    ADD CONSTRAINT "rd_signature_records_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete businesses for their clients" ON "public"."businesses" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_signatures"
+    ADD CONSTRAINT "rd_signatures_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id");
 
 
 
-CREATE POLICY "Users can delete personal years for their clients" ON "public"."personal_years" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_state_proforma_data"
+    ADD CONSTRAINT "rd_state_proforma_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own businesses" ON "public"."centralized_businesses" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."rd_state_proforma_lines"
+    ADD CONSTRAINT "rd_state_proforma_lines_state_proforma_id_fkey" FOREIGN KEY ("state_proforma_id") REFERENCES "public"."rd_state_proformas"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own calculations" ON "public"."calculations" FOR DELETE USING (("auth"."uid"() = "user_id"));
+ALTER TABLE ONLY "public"."rd_subcomponents"
+    ADD CONSTRAINT "rd_subcomponents_activity_id_fkey" FOREIGN KEY ("activity_id") REFERENCES "public"."rd_research_activities"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own clients" ON "public"."clients" FOR DELETE USING (("auth"."uid"() = "created_by"));
+ALTER TABLE ONLY "public"."rd_supplies"
+    ADD CONSTRAINT "rd_supplies_business_id_fkey" FOREIGN KEY ("business_id") REFERENCES "public"."rd_businesses"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR DELETE USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
+ALTER TABLE ONLY "public"."rd_supply_subcomponents"
+    ADD CONSTRAINT "rd_supply_subcomponents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own contractor year data" ON "public"."rd_contractor_year_data" FOR DELETE USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
+ALTER TABLE ONLY "public"."rd_supply_subcomponents"
+    ADD CONSTRAINT "rd_supply_subcomponents_subcomponent_id_fkey" FOREIGN KEY ("subcomponent_id") REFERENCES "public"."rd_research_subcomponents"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own federal credit results" ON "public"."rd_federal_credit_results" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
+COMMENT ON CONSTRAINT "rd_supply_subcomponents_subcomponent_id_fkey" ON "public"."rd_supply_subcomponents" IS 'References rd_research_subcomponents.id instead of rd_subcomponents.id to align with contractor allocations';
 
 
 
-CREATE POLICY "Users can delete their own supplies" ON "public"."rd_supplies" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM "public"."businesses"
-  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_supply_subcomponents"
+    ADD CONSTRAINT "rd_supply_subcomponents_supply_id_fkey" FOREIGN KEY ("supply_id") REFERENCES "public"."rd_supplies"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM ("public"."rd_supplies"
-     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
-  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_supply_year_data"
+    ADD CONSTRAINT "rd_supply_year_data_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own supply year data" ON "public"."rd_supply_year_data" FOR DELETE USING ((EXISTS ( SELECT 1
-   FROM "public"."rd_business_years"
-  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
-           FROM "public"."rd_businesses"
-          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
-                   FROM "public"."clients"
-                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
+ALTER TABLE ONLY "public"."rd_supply_year_data"
+    ADD CONSTRAINT "rd_supply_year_data_supply_id_fkey" FOREIGN KEY ("supply_id") REFERENCES "public"."rd_supplies"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can delete their own tax profile" ON "public"."tax_profiles" FOR DELETE USING (("user_id" = "auth"."uid"()));
+ALTER TABLE ONLY "public"."rd_support_documents"
+    ADD CONSTRAINT "rd_support_documents_business_year_id_fkey" FOREIGN KEY ("business_year_id") REFERENCES "public"."rd_business_years"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert business years for their businesses" ON "public"."business_years" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."businesses"
-     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
-  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."rd_support_documents"
+    ADD CONSTRAINT "rd_support_documents_uploaded_by_fkey" FOREIGN KEY ("uploaded_by") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Users can insert businesses for their clients" ON "public"."businesses" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."reinsurance_details"
+    ADD CONSTRAINT "reinsurance_details_strategy_detail_id_fkey" FOREIGN KEY ("strategy_detail_id") REFERENCES "public"."strategy_details"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert own leads" ON "public"."leads" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
+ALTER TABLE ONLY "public"."strategy_commission_rates"
+    ADD CONSTRAINT "strategy_commission_rates_affiliate_id_fkey" FOREIGN KEY ("affiliate_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert own profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));
+ALTER TABLE ONLY "public"."strategy_details"
+    ADD CONSTRAINT "strategy_details_proposal_id_fkey" FOREIGN KEY ("proposal_id") REFERENCES "public"."tax_proposals"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert own tax profiles" ON "public"."tax_profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
+ALTER TABLE ONLY "public"."tax_calculations"
+    ADD CONSTRAINT "tax_calculations_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");
 
 
 
-CREATE POLICY "Users can insert personal years for their clients" ON "public"."personal_years" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."tax_estimates"
+    ADD CONSTRAINT "tax_estimates_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert tax proposals for their clients" ON "public"."tax_proposals" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."clients" "c"
-  WHERE (("c"."id" = "tax_proposals"."client_id") AND ("c"."created_by" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."tax_profiles"
+    ADD CONSTRAINT "tax_profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert their own augusta rule details" ON "public"."augusta_rule_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."tax_proposals"
+    ADD CONSTRAINT "tax_proposals_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert their own businesses" ON "public"."centralized_businesses" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
+ALTER TABLE ONLY "public"."tool_enrollments"
+    ADD CONSTRAINT "tool_enrollments_client_file_id_fkey" FOREIGN KEY ("client_file_id") REFERENCES "public"."admin_client_files"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert their own calculations" ON "public"."calculations" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
+ALTER TABLE ONLY "public"."tool_enrollments"
+    ADD CONSTRAINT "tool_enrollments_enrolled_by_fkey" FOREIGN KEY ("enrolled_by") REFERENCES "public"."profiles"("id");
 
 
 
-CREATE POLICY "Users can insert their own charitable donation details" ON "public"."charitable_donation_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+ALTER TABLE ONLY "public"."user_preferences"
+    ADD CONSTRAINT "user_preferences_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;
 
 
 
-CREATE POLICY "Users can insert their own clients" ON "public"."clients" FOR INSERT WITH CHECK (("auth"."uid"() = "created_by"));
+CREATE POLICY "Admin can manage QC controls" ON "public"."rd_qc_document_controls" USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_admin" = true)))));
 
 
 
-CREATE POLICY "Users can insert their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
+CREATE POLICY "Admin can manage all signature records" ON "public"."rd_signature_records" USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can insert their own contractor year data" ON "public"."rd_contractor_year_data" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
+CREATE POLICY "Admin can manage portal tokens" ON "public"."rd_client_portal_tokens" USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_admin" = true)))));
 
 
 
-CREATE POLICY "Users can insert their own cost segregation details" ON "public"."cost_segregation_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Admin can view all signatures" ON "public"."rd_signatures" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."is_admin" = true)))));
 
 
 
-CREATE POLICY "Users can insert their own ctb details" ON "public"."convertible_tax_bonds_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can insert strategy details" ON "public"."strategy_details" FOR INSERT WITH CHECK ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
 
 
 
-CREATE POLICY "Users can insert their own federal credit results" ON "public"."rd_federal_credit_results" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
+CREATE POLICY "Admins can insert tax profiles" ON "public"."tax_profiles" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can insert their own hire children details" ON "public"."hire_children_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can manage all client files" ON "public"."admin_client_files" USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can insert their own profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));
+CREATE POLICY "Admins can manage all tool enrollments" ON "public"."tool_enrollments" USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can insert their own strategy details" ON "public"."strategy_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."tax_proposals" "tp"
-  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can update strategy details" ON "public"."strategy_details" FOR UPDATE USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
 
 
 
-CREATE POLICY "Users can insert their own supplies" ON "public"."rd_supplies" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."businesses"
-  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can view all client files" ON "public"."admin_client_files" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can insert their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM ("public"."rd_supplies"
-     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
-  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can view all leads" ON "public"."leads" FOR SELECT USING ("public"."is_admin"());
 
 
 
-CREATE POLICY "Users can insert their own supply year data" ON "public"."rd_supply_year_data" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
-   FROM "public"."rd_business_years"
-  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
-           FROM "public"."rd_businesses"
-          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
-                   FROM "public"."clients"
-                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
+CREATE POLICY "Admins can view all profiles" ON "public"."profiles" FOR SELECT USING ("public"."is_admin"());
 
 
 
-CREATE POLICY "Users can insert their own tax profile" ON "public"."tax_profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
+CREATE POLICY "Admins can view all strategy details" ON "public"."strategy_details" FOR SELECT USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
 
 
 
-CREATE POLICY "Users can manage own payment methods" ON "public"."payment_methods" USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Admins can view all tax profiles" ON "public"."tax_profiles" FOR SELECT USING ("public"."is_admin"());
 
 
 
-CREATE POLICY "Users can manage their own client files" ON "public"."admin_client_files" USING (("admin_id" = "auth"."uid"()));
+CREATE POLICY "Admins can view all tax proposals" ON "public"."tax_proposals" FOR SELECT USING ((("auth"."jwt"() ->> 'role'::"text") = 'admin'::"text"));
 
 
 
-CREATE POLICY "Users can manage their own tool enrollments" ON "public"."tool_enrollments" USING ((EXISTS ( SELECT 1
-   FROM "public"."admin_client_files" "acf"
-  WHERE (("acf"."id" = "tool_enrollments"."client_file_id") AND ("acf"."admin_id" = "auth"."uid"())))));
+CREATE POLICY "Admins can view all tool enrollments" ON "public"."tool_enrollments" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."profiles"
+  WHERE (("profiles"."id" = "auth"."uid"()) AND ("profiles"."role" = 'admin'::"text")))));
 
 
 
-CREATE POLICY "Users can select their own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));
+CREATE POLICY "Admins can view all user preferences" ON "public"."user_preferences" FOR SELECT USING ("public"."is_admin"());
 
 
 
-CREATE POLICY "Users can select their own tax profile" ON "public"."tax_profiles" FOR SELECT USING (("user_id" = "auth"."uid"()));
+CREATE POLICY "Allow all delete for dev" ON "public"."tax_proposals" FOR DELETE USING (true);
 
 
 
-CREATE POLICY "Users can update business years for their businesses" ON "public"."business_years" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."businesses"
-     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
-  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Allow all for authenticated" ON "public"."rd_selected_filter" USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can update businesses for their clients" ON "public"."businesses" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Allow all for dev" ON "public"."rd_contractor_year_data" USING (true) WITH CHECK (true);
 
 
 
-CREATE POLICY "Users can update own leads" ON "public"."leads" FOR UPDATE USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Allow all insert for dev" ON "public"."tax_proposals" FOR INSERT WITH CHECK (true);
 
 
 
-CREATE POLICY "Users can update own profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));
+CREATE POLICY "Allow all select" ON "public"."profiles" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can update own tax profiles" ON "public"."tax_profiles" FOR UPDATE USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Allow all select for debug" ON "public"."tax_proposals" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can update personal years for their clients" ON "public"."personal_years" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Allow all select for dev" ON "public"."tax_proposals" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can update tax proposals for their clients" ON "public"."tax_proposals" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."clients" "c"
-  WHERE (("c"."id" = "tax_proposals"."client_id") AND ("c"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Allow all update for dev" ON "public"."tax_proposals" FOR UPDATE USING (true);
 
 
 
-CREATE POLICY "Users can update their own augusta rule details" ON "public"."augusta_rule_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Allow authenticated users to create signatures" ON "public"."rd_signature_records" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own bulk operations" ON "public"."bulk_operations" FOR UPDATE USING (("initiated_by" = "auth"."uid"()));
+CREATE POLICY "Allow authenticated users to view signatures" ON "public"."rd_signature_records" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own businesses" ON "public"."centralized_businesses" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
+CREATE POLICY "Allow read access to rd_research_steps" ON "public"."rd_research_steps" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own calculations" ON "public"."calculations" FOR UPDATE USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Allow read access to rd_research_subcomponents" ON "public"."rd_research_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own charitable donation details" ON "public"."charitable_donation_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Anyone can create signatures via portal" ON "public"."rd_signatures" FOR INSERT WITH CHECK (true);
 
 
 
-CREATE POLICY "Users can update their own clients" ON "public"."clients" FOR UPDATE USING (("auth"."uid"() = "created_by"));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_contractors" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own contractor year data" ON "public"."rd_contractor_year_data" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_employee_subcomponents" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own cost segregation details" ON "public"."cost_segregation_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_expenses" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own ctb details" ON "public"."convertible_tax_bonds_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_reports" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own federal credit results" ON "public"."rd_federal_credit_results" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
+CREATE POLICY "Enable delete access for authenticated users" ON "public"."rd_supplies" FOR DELETE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own hire children details" ON "public"."hire_children_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable delete for authenticated users" ON "public"."rd_research_steps" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can update their own strategy details" ON "public"."strategy_details" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."tax_proposals" "tp"
-  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable delete for authenticated users" ON "public"."rd_research_subcomponents" FOR DELETE USING (true);
 
 
 
-CREATE POLICY "Users can update their own supplies" ON "public"."rd_supplies" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."businesses"
-  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+CREATE POLICY "Enable delete for authenticated users only" ON "public"."rd_selected_steps" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can update their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM ("public"."rd_supplies"
-     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
-  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own supply year data" ON "public"."rd_supply_year_data" FOR UPDATE USING ((EXISTS ( SELECT 1
-   FROM "public"."rd_business_years"
-  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
-           FROM "public"."rd_businesses"
-          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
-                   FROM "public"."clients"
-                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_contractors" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can update their own tax profile" ON "public"."tax_profiles" FOR UPDATE USING (("user_id" = "auth"."uid"()));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_employee_subcomponents" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view business years for their businesses" ON "public"."business_years" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."businesses"
-     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
-  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_expenses" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view businesses for their clients" ON "public"."businesses" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_reports" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view invitations for their clients" ON "public"."invitations" FOR SELECT USING (("public"."user_has_direct_client_access"("auth"."uid"(), "client_id") OR "public"."user_is_client_owner"("auth"."uid"(), "client_id") OR ("invited_by" = "auth"."uid"())));
+CREATE POLICY "Enable insert access for authenticated users" ON "public"."rd_supplies" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view own account activities" ON "public"."account_activities" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable insert for authenticated users" ON "public"."rd_research_steps" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view own account subscriptions" ON "public"."subscriptions" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable insert for authenticated users" ON "public"."rd_research_subcomponents" FOR INSERT WITH CHECK (true);
 
 
 
-CREATE POLICY "Users can view own account usage logs" ON "public"."tool_usage_logs" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable insert for authenticated users only" ON "public"."rd_selected_steps" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view own billing invoices" ON "public"."billing_invoices" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable read access for all users" ON "public"."rd_research_steps" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can view own client relationships" ON "public"."client_users" FOR SELECT USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Enable read access for all users" ON "public"."rd_research_subcomponents" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can view own feature usage" ON "public"."feature_usage_tracking" FOR SELECT USING (("profile_id" = "auth"."uid"()));
+CREATE POLICY "Enable read access for all users" ON "public"."rd_selected_steps" FOR SELECT USING (true);
 
 
 
-CREATE POLICY "Users can view own invoice line items" ON "public"."invoice_line_items" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."billing_invoices" "i"
-  WHERE (("i"."id" = "invoice_line_items"."invoice_id") AND ("i"."account_id" = "public"."get_user_account_id"("auth"."uid"()))))));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view own leads" ON "public"."leads" FOR SELECT USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_contractors" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view own payments" ON "public"."payments" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_employee_subcomponents" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_expenses" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view own tax profiles" ON "public"."tax_profiles" FOR SELECT USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_reports" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view personal years for their clients" ON "public"."personal_years" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."clients"
-  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Enable read access for authenticated users" ON "public"."rd_supplies" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view results of their own bulk operations" ON "public"."bulk_operation_results" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."bulk_operations" "bo"
-  WHERE (("bo"."id" = "bulk_operation_results"."bulk_operation_id") AND ("bo"."initiated_by" = "auth"."uid"())))));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_contractor_subcomponents" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view tax proposals for their clients" ON "public"."tax_proposals" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."clients" "c"
-  WHERE (("c"."id" = "tax_proposals"."client_id") AND ("c"."created_by" = "auth"."uid"())))));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_contractors" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view their account tool access" ON "public"."account_tool_access" FOR SELECT USING (("account_id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_employee_subcomponents" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view their own account" ON "public"."accounts" FOR SELECT USING (("id" = "public"."get_user_account_id"("auth"."uid"())));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_expenses" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view their own augusta rule details" ON "public"."augusta_rule_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_reports" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view their own bulk operations" ON "public"."bulk_operations" FOR SELECT USING (("initiated_by" = "auth"."uid"()));
+CREATE POLICY "Enable update access for authenticated users" ON "public"."rd_supplies" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));
 
 
 
-CREATE POLICY "Users can view their own businesses" ON "public"."centralized_businesses" FOR SELECT USING (("auth"."uid"() IS NOT NULL));
+CREATE POLICY "Enable update for authenticated users" ON "public"."rd_research_steps" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view their own calculations" ON "public"."calculations" FOR SELECT USING (("auth"."uid"() = "user_id"));
+CREATE POLICY "Enable update for authenticated users" ON "public"."rd_research_subcomponents" FOR UPDATE USING (true);
 
 
 
-CREATE POLICY "Users can view their own charitable donation details" ON "public"."charitable_donation_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Enable update for authenticated users only" ON "public"."rd_selected_steps" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view their own client files" ON "public"."admin_client_files" FOR SELECT USING (("admin_id" = "auth"."uid"()));
+CREATE POLICY "Users can delete business years for their businesses" ON "public"."business_years" FOR DELETE USING ((EXISTS ( SELECT 1
+   FROM ("public"."businesses"
+     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
+  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
 
-CREATE POLICY "Users can view their own clients" ON "public"."clients" FOR SELECT USING (("auth"."uid"() = "created_by"));
+CREATE POLICY "Users can delete businesses for their clients" ON "public"."businesses" FOR DELETE USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
 
-CREATE POLICY "Users can view their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR SELECT USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
+CREATE POLICY "Users can delete own calculations" ON "public"."tax_calculations" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));
 
 
 
-CREATE POLICY "Users can view their own contractor year data" ON "public"."rd_contractor_year_data" FOR SELECT USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
-   FROM "public"."rd_business_years"
-  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
+CREATE POLICY "Users can delete personal years for their clients" ON "public"."personal_years" FOR DELETE USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
 
-CREATE POLICY "Users can view their own cost segregation details" ON "public"."cost_segregation_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Users can delete their own businesses" ON "public"."centralized_businesses" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view their own ctb details" ON "public"."convertible_tax_bonds_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Users can delete their own calculations" ON "public"."calculations" FOR DELETE USING (("auth"."uid"() = "user_id"));
 
 
 
-CREATE POLICY "Users can view their own federal credit results" ON "public"."rd_federal_credit_results" FOR SELECT USING (("auth"."uid"() IS NOT NULL));
+CREATE POLICY "Users can delete their own clients" ON "public"."clients" FOR DELETE USING (("auth"."uid"() = "created_by"));
 
 
 
-CREATE POLICY "Users can view their own hire children details" ON "public"."hire_children_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM ("public"."strategy_details" "sd"
-     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
-  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Users can delete their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR DELETE USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
 
 
 
-CREATE POLICY "Users can view their own permissions" ON "public"."profile_permissions" FOR SELECT USING (("profile_id" = "auth"."uid"()));
+CREATE POLICY "Users can delete their own contractor year data" ON "public"."rd_contractor_year_data" FOR DELETE USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
 
 
 
-CREATE POLICY "Users can view their own roles" ON "public"."profile_roles" FOR SELECT USING (("profile_id" = "auth"."uid"()));
+CREATE POLICY "Users can delete their own federal credit results" ON "public"."rd_federal_credit_results" FOR DELETE USING (("auth"."uid"() IS NOT NULL));
 
 
 
-CREATE POLICY "Users can view their own strategy details" ON "public"."strategy_details" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."tax_proposals" "tp"
-  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
+CREATE POLICY "Users can delete their own state pro forma data" ON "public"."rd_state_proforma_data" FOR DELETE USING (("business_year_id" IN ( SELECT "business_years"."id"
+   FROM "public"."business_years"
+  WHERE ("business_years"."business_id" IN ( SELECT "rd_businesses"."id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" = "auth"."uid"()))))));
 
 
 
-CREATE POLICY "Users can view their own supplies" ON "public"."rd_supplies" FOR SELECT USING ((EXISTS ( SELECT 1
+CREATE POLICY "Users can delete their own supplies" ON "public"."rd_supplies" FOR DELETE USING ((EXISTS ( SELECT 1
    FROM "public"."businesses"
   WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
 
-CREATE POLICY "Users can view their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR SELECT USING ((EXISTS ( SELECT 1
+CREATE POLICY "Users can delete their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR DELETE USING ((EXISTS ( SELECT 1
    FROM ("public"."rd_supplies"
      JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
   WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
 
-CREATE POLICY "Users can view their own supply year data" ON "public"."rd_supply_year_data" FOR SELECT USING ((EXISTS ( SELECT 1
+CREATE POLICY "Users can delete their own supply year data" ON "public"."rd_supply_year_data" FOR DELETE USING ((EXISTS ( SELECT 1
    FROM "public"."rd_business_years"
   WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
            FROM "public"."rd_businesses"
           WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
                    FROM "public"."clients"
                   WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
-
-
-
-CREATE POLICY "Users can view their own tool enrollments" ON "public"."tool_enrollments" FOR SELECT USING ((EXISTS ( SELECT 1
-   FROM "public"."admin_client_files" "acf"
-  WHERE (("acf"."id" = "tool_enrollments"."client_file_id") AND ("acf"."admin_id" = "auth"."uid"())))));
-
-
-
-ALTER TABLE "public"."account_activities" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."account_tool_access" ENABLE ROW LEVEL SECURITY;
-
 
-ALTER TABLE "public"."accounts" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."admin_client_files" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can delete their own tax profile" ON "public"."tax_profiles" FOR DELETE USING (("user_id" = "auth"."uid"()));
 
 
-ALTER TABLE "public"."affiliates" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert business years for their businesses" ON "public"."business_years" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."businesses"
+     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
+  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
-ALTER TABLE "public"."augusta_rule_details" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."billing_events" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert businesses for their clients" ON "public"."businesses" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."billing_invoices" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert own calculations" ON "public"."tax_calculations" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
 
-ALTER TABLE "public"."bulk_operation_results" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."bulk_operations" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert own leads" ON "public"."leads" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
 
-ALTER TABLE "public"."business_years" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert own profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));
 
-ALTER TABLE "public"."businesses" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."calculations" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert own rd_federal_credit" ON "public"."rd_federal_credit" FOR INSERT WITH CHECK (("client_id" IN ( SELECT "clients"."id"
+   FROM "public"."clients"
+  WHERE ("clients"."created_by" = "auth"."uid"()))));
 
 
-ALTER TABLE "public"."centralized_businesses" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert own tax profiles" ON "public"."tax_profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
-ALTER TABLE "public"."charitable_donation_details" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."client_activities" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert own user preferences" ON "public"."user_preferences" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
 
-ALTER TABLE "public"."client_dashboard_metrics" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert personal years for their clients" ON "public"."personal_years" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
-ALTER TABLE "public"."client_engagement_status" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."client_users" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own augusta rule details" ON "public"."augusta_rule_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."clients" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own businesses" ON "public"."centralized_businesses" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
 
-ALTER TABLE "public"."contractor_expenses" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."convertible_tax_bonds_details" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own calculations" ON "public"."calculations" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
 
-ALTER TABLE "public"."cost_segregation_details" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own charitable donation details" ON "public"."charitable_donation_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
-ALTER TABLE "public"."document_access_logs" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."document_comments" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own clients" ON "public"."clients" FOR INSERT WITH CHECK (("auth"."uid"() = "created_by"));
 
 
-ALTER TABLE "public"."document_files" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
 
-ALTER TABLE "public"."document_folders" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."document_processing_jobs" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own contractor year data" ON "public"."rd_contractor_year_data" FOR INSERT WITH CHECK (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
 
 
-ALTER TABLE "public"."document_shares" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own cost segregation details" ON "public"."cost_segregation_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
-ALTER TABLE "public"."document_versions" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."employees" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own ctb details" ON "public"."convertible_tax_bonds_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."family_management_company_details" ENABLE ROW LEVEL SECURITY;
 
-
-ALTER TABLE "public"."feature_usage_tracking" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."hire_children_details" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."invitations" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."invoice_line_items" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."payment_methods" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."payments" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."performance_metrics" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."personal_years" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."platform_usage_metrics" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."profile_permissions" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."profile_roles" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."profile_sync_conflicts" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."rd_contractor_year_data" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."rd_contractors" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."rd_employee_subcomponents" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."rd_expenses" ENABLE ROW LEVEL SECURITY;
-
-
-ALTER TABLE "public"."rd_federal_credit_results" ENABLE ROW LEVEL SECURITY;
-
+CREATE POLICY "Users can insert their own federal credit results" ON "public"."rd_federal_credit_results" FOR INSERT WITH CHECK (("auth"."uid"() IS NOT NULL));
 
-ALTER TABLE "public"."rd_research_steps" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."rd_research_subcomponents" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own hire children details" ON "public"."hire_children_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."rd_selected_filter" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own preferences" ON "public"."user_preferences" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
-ALTER TABLE "public"."rd_selected_steps" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."rd_supplies" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));
 
 
-ALTER TABLE "public"."reinsurance_details" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own state pro forma data" ON "public"."rd_state_proforma_data" FOR INSERT WITH CHECK (("business_year_id" IN ( SELECT "business_years"."id"
+   FROM "public"."business_years"
+  WHERE ("business_years"."business_id" IN ( SELECT "rd_businesses"."id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" = "auth"."uid"()))))));
 
-ALTER TABLE "public"."research_activities" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."role_definitions" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own strategy details" ON "public"."strategy_details" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."tax_proposals" "tp"
+  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."security_events" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own supplies" ON "public"."rd_supplies" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."businesses"
+  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
-ALTER TABLE "public"."strategy_details" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."subscription_plans" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM ("public"."rd_supplies"
+     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
+  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
-ALTER TABLE "public"."subscriptions" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own supply year data" ON "public"."rd_supply_year_data" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
+   FROM "public"."rd_business_years"
+  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
+                   FROM "public"."clients"
+                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
 
-ALTER TABLE "public"."supply_expenses" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."tax_profiles" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can insert their own tax profile" ON "public"."tax_profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
 
-ALTER TABLE "public"."tax_proposals" ENABLE ROW LEVEL SECURITY;
 
+CREATE POLICY "Users can insert their own tax proposals" ON "public"."tax_proposals" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));
 
-ALTER TABLE "public"."tool_enrollments" ENABLE ROW LEVEL SECURITY;
 
 
-ALTER TABLE "public"."tool_usage_logs" ENABLE ROW LEVEL SECURITY;
+CREATE POLICY "Users can manage their own client files" ON "public"."admin_client_files" USING (("admin_id" = "auth"."uid"()));
 
 
-GRANT USAGE ON SCHEMA "public" TO "postgres";
-GRANT USAGE ON SCHEMA "public" TO "anon";
-GRANT USAGE ON SCHEMA "public" TO "authenticated";
-GRANT USAGE ON SCHEMA "public" TO "service_role";
 
+CREATE POLICY "Users can manage their own tool enrollments" ON "public"."tool_enrollments" USING ((EXISTS ( SELECT 1
+   FROM "public"."admin_client_files" "acf"
+  WHERE (("acf"."id" = "tool_enrollments"."client_file_id") AND ("acf"."admin_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."accept_invitation"("invitation_token" character varying, "user_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."accept_invitation"("invitation_token" character varying, "user_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."accept_invitation"("invitation_token" character varying, "user_id" "uuid") TO "service_role";
 
+CREATE POLICY "Users can select their own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));
 
 
-GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
+CREATE POLICY "Users can select their own tax profile" ON "public"."tax_profiles" FOR SELECT USING (("user_id" = "auth"."uid"()));
 
 
-GRANT ALL ON FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date") TO "anon";
-GRANT ALL ON FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."aggregate_daily_usage_metrics"("p_date" "date") TO "service_role";
 
+CREATE POLICY "Users can update business years for their businesses" ON "public"."business_years" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."businesses"
+     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
+  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."analyze_performance_metrics"("p_hours" integer, "p_percentile" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."analyze_performance_metrics"("p_hours" integer, "p_percentile" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."analyze_performance_metrics"("p_hours" integer, "p_percentile" integer) TO "service_role";
 
+CREATE POLICY "Users can update businesses for their clients" ON "public"."businesses" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "anon";
-GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "service_role";
 
+CREATE POLICY "Users can update own calculations" ON "public"."tax_calculations" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying, "p_scope_id" "uuid", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying, "p_scope_id" "uuid", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."assign_profile_role"("p_profile_id" "uuid", "p_role_name" character varying, "p_scope" character varying, "p_scope_id" "uuid", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "service_role";
 
+CREATE POLICY "Users can update own leads" ON "public"."leads" FOR UPDATE USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."auto_log_account_changes"() TO "anon";
-GRANT ALL ON FUNCTION "public"."auto_log_account_changes"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."auto_log_account_changes"() TO "service_role";
 
+CREATE POLICY "Users can update own profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));
 
 
-GRANT ALL ON FUNCTION "public"."auto_log_profile_changes"() TO "anon";
-GRANT ALL ON FUNCTION "public"."auto_log_profile_changes"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."auto_log_profile_changes"() TO "service_role";
 
+CREATE POLICY "Users can update own rd_federal_credit" ON "public"."rd_federal_credit" FOR UPDATE USING (("client_id" IN ( SELECT "clients"."id"
+   FROM "public"."clients"
+  WHERE ("clients"."created_by" = "auth"."uid"()))));
 
 
-GRANT ALL ON FUNCTION "public"."auto_log_significant_tool_usage"() TO "anon";
-GRANT ALL ON FUNCTION "public"."auto_log_significant_tool_usage"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."auto_log_significant_tool_usage"() TO "service_role";
 
+CREATE POLICY "Users can update own tax profiles" ON "public"."tax_profiles" FOR UPDATE USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."auto_log_tool_assignment_changes"() TO "anon";
-GRANT ALL ON FUNCTION "public"."auto_log_tool_assignment_changes"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."auto_log_tool_assignment_changes"() TO "service_role";
 
+CREATE POLICY "Users can update own user preferences" ON "public"."user_preferences" FOR UPDATE USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type", "p_subscription_level" "public"."subscription_level_type", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type", "p_subscription_level" "public"."subscription_level_type", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."bulk_assign_tools"("p_account_ids" "uuid"[], "p_tool_ids" "uuid"[], "p_access_level" "public"."access_level_type", "p_subscription_level" "public"."subscription_level_type", "p_expires_at" timestamp with time zone, "p_notes" "text") TO "service_role";
 
-
-
-GRANT ALL ON FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[], "p_sync_strategy" "text", "p_max_conflicts" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[], "p_sync_strategy" "text", "p_max_conflicts" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."bulk_sync_profiles"("p_profile_ids" "uuid"[], "p_sync_strategy" "text", "p_max_conflicts" integer) TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."bulk_update_tool_status"("p_assignment_filters" "jsonb", "p_new_status" character varying, "p_notes" "text") TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "service_role";
-
+CREATE POLICY "Users can update personal years for their clients" ON "public"."personal_years" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."calculate_dashboard_metrics"("p_client_id" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own augusta rule details" ON "public"."augusta_rule_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "service_role";
 
+CREATE POLICY "Users can update their own businesses" ON "public"."centralized_businesses" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
 
 
-GRANT ALL ON FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."check_profile_permission"("p_profile_id" "uuid", "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own calculations" ON "public"."calculations" FOR UPDATE USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."cleanup_expired_sessions"() TO "anon";
-GRANT ALL ON FUNCTION "public"."cleanup_expired_sessions"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."cleanup_expired_sessions"() TO "service_role";
 
+CREATE POLICY "Users can update their own charitable donation details" ON "public"."charitable_donation_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."cleanup_old_security_events"() TO "anon";
-GRANT ALL ON FUNCTION "public"."cleanup_old_security_events"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."cleanup_old_security_events"() TO "service_role";
 
+CREATE POLICY "Users can update their own clients" ON "public"."clients" FOR UPDATE USING (("auth"."uid"() = "created_by"));
 
 
-GRANT ALL ON FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."complete_bulk_operation"("p_bulk_operation_id" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
 
 
-GRANT ALL ON FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_activity_alert"("p_profile_id" "uuid", "p_alert_type" character varying, "p_severity" character varying, "p_title" "text", "p_description" "text", "p_metadata" "jsonb") TO "service_role";
 
+CREATE POLICY "Users can update their own contractor year data" ON "public"."rd_contractor_year_data" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
 
 
-GRANT ALL ON FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_bulk_operation"("p_operation_type" character varying, "p_operation_name" character varying, "p_target_profile_ids" "uuid"[], "p_operation_data" "jsonb", "p_metadata" "jsonb") TO "service_role";
 
+CREATE POLICY "Users can update their own cost segregation details" ON "public"."cost_segregation_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
+CREATE POLICY "Users can update their own ctb details" ON "public"."convertible_tax_bonds_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "anon";
-GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "service_role";
 
+CREATE POLICY "Users can update their own federal credit results" ON "public"."rd_federal_credit_results" FOR UPDATE USING (("auth"."uid"() IS NOT NULL));
 
 
-GRANT ALL ON FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_default_folders_for_client"("p_client_id" "uuid", "p_created_by" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own hire children details" ON "public"."hire_children_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_document_folder"("p_client_id" "uuid", "p_parent_folder_id" "uuid", "p_name" character varying, "p_created_by" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own state pro forma data" ON "public"."rd_state_proforma_data" FOR UPDATE USING (("business_year_id" IN ( SELECT "business_years"."id"
+   FROM "public"."business_years"
+  WHERE ("business_years"."business_id" IN ( SELECT "rd_businesses"."id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" = "auth"."uid"()))))));
 
 
-GRANT ALL ON FUNCTION "public"."create_profile_if_missing"("user_id" "uuid", "user_email" "text", "user_name" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_profile_if_missing"("user_id" "uuid", "user_email" "text", "user_name" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_profile_if_missing"("user_id" "uuid", "user_email" "text", "user_name" "text") TO "service_role";
 
+CREATE POLICY "Users can update their own strategy details" ON "public"."strategy_details" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM "public"."tax_proposals" "tp"
+  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_security_alert"("p_alert_type" character varying, "p_severity" character varying, "p_user_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_security_alert"("p_alert_type" character varying, "p_severity" character varying, "p_user_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_security_alert"("p_alert_type" character varying, "p_severity" character varying, "p_user_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "service_role";
 
+CREATE POLICY "Users can update their own supplies" ON "public"."rd_supplies" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM "public"."businesses"
+  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "anon";
-GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "service_role";
 
+CREATE POLICY "Users can update their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM ("public"."rd_supplies"
+     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
+  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid", "p_trial_days" integer, "p_billing_contact_profile_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid", "p_trial_days" integer, "p_billing_contact_profile_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."create_subscription"("p_account_id" "uuid", "p_plan_id" "uuid", "p_payment_method_id" "uuid", "p_trial_days" integer, "p_billing_contact_profile_id" "uuid") TO "service_role";
 
+CREATE POLICY "Users can update their own supply year data" ON "public"."rd_supply_year_data" FOR UPDATE USING ((EXISTS ( SELECT 1
+   FROM "public"."rd_business_years"
+  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
+                   FROM "public"."clients"
+                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
 
 
-GRANT ALL ON FUNCTION "public"."detect_profile_sync_discrepancies"() TO "anon";
-GRANT ALL ON FUNCTION "public"."detect_profile_sync_discrepancies"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."detect_profile_sync_discrepancies"() TO "service_role";
 
+CREATE POLICY "Users can update their own tax profile" ON "public"."tax_profiles" FOR UPDATE USING (("user_id" = "auth"."uid"()));
 
 
-GRANT ALL ON FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer, "p_min_threshold" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer, "p_min_threshold" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."detect_suspicious_activity"("p_lookback_hours" integer, "p_min_threshold" integer) TO "service_role";
 
+CREATE POLICY "Users can update their own tax proposals" ON "public"."tax_proposals" FOR UPDATE USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "service_role";
 
+CREATE POLICY "Users can view business years for their businesses" ON "public"."business_years" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."businesses"
+     JOIN "public"."clients" ON (("businesses"."client_id" = "clients"."id")))
+  WHERE (("businesses"."id" = "business_years"."business_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."ensure_client_has_owner"() TO "anon";
-GRANT ALL ON FUNCTION "public"."ensure_client_has_owner"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."ensure_client_has_owner"() TO "service_role";
 
+CREATE POLICY "Users can view businesses for their clients" ON "public"."businesses" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "businesses"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
-GRANT ALL ON FUNCTION "public"."expire_old_invitations"() TO "anon";
-GRANT ALL ON FUNCTION "public"."expire_old_invitations"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."expire_old_invitations"() TO "service_role";
 
+CREATE POLICY "Users can view own calculations" ON "public"."tax_calculations" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."expire_tool_access"() TO "anon";
-GRANT ALL ON FUNCTION "public"."expire_tool_access"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."expire_tool_access"() TO "service_role";
 
+CREATE POLICY "Users can view own leads" ON "public"."leads" FOR SELECT USING (("auth"."uid"() = "user_id"));
 
 
-GRANT ALL ON FUNCTION "public"."generate_invitation_token"() TO "anon";
-GRANT ALL ON FUNCTION "public"."generate_invitation_token"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."generate_invitation_token"() TO "service_role";
 
+CREATE POLICY "Users can view own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));
 
 
-GRANT ALL ON FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date", "p_billing_period_end" "date") TO "anon";
-GRANT ALL ON FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date", "p_billing_period_end" "date") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."generate_invoice"("p_subscription_id" "uuid", "p_billing_period_start" "date", "p_billing_period_end" "date") TO "service_role";
+
+CREATE POLICY "Users can view own rd_federal_credit" ON "public"."rd_federal_credit" FOR SELECT USING (("client_id" IN ( SELECT "clients"."id"
+   FROM "public"."clients"
+  WHERE ("clients"."created_by" = "auth"."uid"()))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_account_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_type" character varying) TO "service_role";
+CREATE POLICY "Users can view own tax profiles" ON "public"."tax_profiles" FOR SELECT USING (("auth"."uid"() = "user_id"));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_activity_trends"("p_days" integer, "p_granularity" character varying) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_activity_trends"("p_days" integer, "p_granularity" character varying) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_activity_trends"("p_days" integer, "p_granularity" character varying) TO "service_role";
+CREATE POLICY "Users can view own user preferences" ON "public"."user_preferences" FOR SELECT USING (("auth"."uid"() = "user_id"));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_affiliate_from_client"("client_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view personal years for their clients" ON "public"."personal_years" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."clients"
+  WHERE (("clients"."id" = "personal_years"."client_id") AND ("clients"."created_by" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_auth_sync_status_summary"() TO "anon";
-GRANT ALL ON FUNCTION "public"."get_auth_sync_status_summary"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_auth_sync_status_summary"() TO "service_role";
+CREATE POLICY "Users can view their own augusta rule details" ON "public"."augusta_rule_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "augusta_rule_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "service_role";
+CREATE POLICY "Users can view their own businesses" ON "public"."centralized_businesses" FOR SELECT USING (("auth"."uid"() IS NOT NULL));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_capacity_planning_metrics"("p_days" integer) TO "service_role";
+CREATE POLICY "Users can view their own calculations" ON "public"."calculations" FOR SELECT USING (("auth"."uid"() = "user_id"));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_client_document_stats"("p_client_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own charitable donation details" ON "public"."charitable_donation_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "charitable_donation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_client_info"("client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_client_info"("client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_client_info"("client_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own client files" ON "public"."admin_client_files" FOR SELECT USING (("admin_id" = "auth"."uid"()));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own clients" ON "public"."clients" FOR SELECT USING (("auth"."uid"() = "created_by"));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own contractor subcomponents" ON "public"."rd_contractor_subcomponents" FOR SELECT USING (("auth"."uid"() IN ( SELECT "rd_contractor_subcomponents"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_subcomponents"."business_year_id"))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying, "p_days" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying, "p_days" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_feature_adoption_stats"("p_feature_category" character varying, "p_days" integer) TO "service_role";
+CREATE POLICY "Users can view their own contractor year data" ON "public"."rd_contractor_year_data" FOR SELECT USING (("auth"."uid"() IN ( SELECT "rd_contractor_year_data"."user_id"
+   FROM "public"."rd_business_years"
+  WHERE ("rd_business_years"."id" = "rd_contractor_year_data"."business_year_id"))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer, "p_account_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer, "p_account_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_platform_usage_trends"("p_metric_type" character varying, "p_days" integer, "p_account_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own cost segregation details" ON "public"."cost_segregation_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "cost_segregation_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_profile_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_profile_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_profile_activity_summary"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_profile_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own ctb details" ON "public"."convertible_tax_bonds_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "convertible_tax_bonds_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer, "p_offset" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer, "p_offset" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_profile_activity_timeline"("p_profile_id" "uuid", "p_limit" integer, "p_offset" integer) TO "service_role";
+CREATE POLICY "Users can view their own federal credit results" ON "public"."rd_federal_credit_results" FOR SELECT USING (("auth"."uid"() IS NOT NULL));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_profile_effective_permissions"("p_profile_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own hire children details" ON "public"."hire_children_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."strategy_details" "sd"
+     JOIN "public"."tax_proposals" "tp" ON (("tp"."id" = "sd"."proposal_id")))
+  WHERE (("sd"."id" = "hire_children_details"."strategy_detail_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_profile_summary"("p_profile_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own state pro forma data" ON "public"."rd_state_proforma_data" FOR SELECT USING (("business_year_id" IN ( SELECT "business_years"."id"
+   FROM "public"."business_years"
+  WHERE ("business_years"."business_id" IN ( SELECT "rd_businesses"."id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" = "auth"."uid"()))))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_sync_conflicts_summary"() TO "anon";
-GRANT ALL ON FUNCTION "public"."get_sync_conflicts_summary"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_sync_conflicts_summary"() TO "service_role";
+CREATE POLICY "Users can view their own strategy details" ON "public"."strategy_details" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."tax_proposals" "tp"
+  WHERE (("tp"."id" = "strategy_details"."proposal_id") AND ("tp"."user_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_tax_proposal_affiliate"("proposal_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_tax_proposal_affiliate"("proposal_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_tax_proposal_affiliate"("proposal_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own supplies" ON "public"."rd_supplies" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."businesses"
+  WHERE (("rd_supplies"."business_id" = "businesses"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_tool_usage_analytics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_tool_category" character varying) TO "service_role";
+CREATE POLICY "Users can view their own supply subcomponents" ON "public"."rd_supply_subcomponents" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM ("public"."rd_supplies"
+     JOIN "public"."businesses" ON (("rd_supplies"."business_id" = "businesses"."id")))
+  WHERE (("rd_supply_subcomponents"."supply_id" = "rd_supplies"."id") AND ("businesses"."client_id" = "auth"."uid"())))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_tool_usage_metrics"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own supply year data" ON "public"."rd_supply_year_data" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."rd_business_years"
+  WHERE (("rd_business_years"."id" = "rd_supply_year_data"."business_year_id") AND ("rd_business_years"."business_id" IN ( SELECT "rd_business_years"."business_id"
+           FROM "public"."rd_businesses"
+          WHERE ("rd_businesses"."client_id" IN ( SELECT "clients"."id"
+                   FROM "public"."clients"
+                  WHERE ("rd_businesses"."client_id" = "auth"."uid"())))))))));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "service_role";
+CREATE POLICY "Users can view their own tax proposals" ON "public"."tax_proposals" FOR SELECT USING (("auth"."uid"() = "user_id"));
 
 
 
-GRANT ALL ON FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid", "p_format" character varying) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid", "p_format" character varying) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_usage_export_data"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_account_id" "uuid", "p_tool_id" "uuid", "p_format" character varying) TO "service_role";
+CREATE POLICY "Users can view their own tool enrollments" ON "public"."tool_enrollments" FOR SELECT USING ((EXISTS ( SELECT 1
+   FROM "public"."admin_client_files" "acf"
+  WHERE (("acf"."id" = "tool_enrollments"."client_file_id") AND ("acf"."admin_id" = "auth"."uid"())))));
 
 
-
-GRANT ALL ON FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying) TO "anon";
-GRANT ALL ON FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_usage_trends"("p_start_date" timestamp with time zone, "p_end_date" timestamp with time zone, "p_interval" character varying) TO "service_role";
+
+ALTER TABLE "public"."admin_client_files" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."augusta_rule_details" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."get_user_account_id"("user_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_user_account_id"("user_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_user_account_id"("user_id" "uuid") TO "service_role";
 
+ALTER TABLE "public"."business_years" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."get_user_client_role"("check_user_id" "uuid", "check_client_id" "uuid") TO "service_role";
+ALTER TABLE "public"."businesses" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."calculations" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid", "p_expires_at" timestamp with time zone, "p_conditions" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid", "p_expires_at" timestamp with time zone, "p_conditions" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."grant_profile_permission"("p_profile_id" "uuid", "p_permission_name" character varying, "p_resource_type" character varying, "p_action" character varying, "p_resource_id" "uuid", "p_expires_at" timestamp with time zone, "p_conditions" "jsonb") TO "service_role";
 
+ALTER TABLE "public"."centralized_businesses" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
-GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";
+ALTER TABLE "public"."charitable_donation_details" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."clients" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "service_role";
 
+ALTER TABLE "public"."contractor_expenses" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."is_admin"() TO "anon";
-GRANT ALL ON FUNCTION "public"."is_admin"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."is_admin"() TO "service_role";
+ALTER TABLE "public"."convertible_tax_bonds_details" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."cost_segregation_details" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."is_affiliated_with_client"("client_id_to_check" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."is_affiliated_with_client"("client_id_to_check" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."is_affiliated_with_client"("client_id_to_check" "uuid") TO "service_role";
 
+ALTER TABLE "public"."employees" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."is_security_admin"() TO "anon";
-GRANT ALL ON FUNCTION "public"."is_security_admin"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."is_security_admin"() TO "service_role";
+ALTER TABLE "public"."family_management_company_details" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."hire_children_details" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."is_super_admin"() TO "anon";
-GRANT ALL ON FUNCTION "public"."is_super_admin"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."is_super_admin"() TO "service_role";
 
+ALTER TABLE "public"."personal_years" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_account_activity"("p_account_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "service_role";
+ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_client_portal_tokens" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid", "additional_info" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid", "additional_info" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_client_access"("action_type" "text", "client_id" "uuid", "user_id" "uuid", "additional_info" "jsonb") TO "service_role";
 
+ALTER TABLE "public"."rd_contractor_year_data" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text", "p_priority" "public"."activity_priority", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text", "p_priority" "public"."activity_priority", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_client_activity"("p_client_id" "uuid", "p_user_id" "uuid", "p_activity_type" "public"."activity_type", "p_title" "text", "p_description" "text", "p_priority" "public"."activity_priority", "p_metadata" "jsonb") TO "service_role";
+ALTER TABLE "public"."rd_contractors" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_employee_subcomponents" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."log_document_access"() TO "anon";
-GRANT ALL ON FUNCTION "public"."log_document_access"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_document_access"() TO "service_role";
 
+ALTER TABLE "public"."rd_expenses" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_profile_activity"("p_profile_id" "uuid", "p_activity_type" character varying, "p_target_type" character varying, "p_target_id" "uuid", "p_description" "text", "p_metadata" "jsonb") TO "service_role";
+ALTER TABLE "public"."rd_federal_credit" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_federal_credit_results" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid", "event_data" "jsonb", "severity" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid", "event_data" "jsonb", "severity" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_security_event"("event_type" "text", "client_id" "uuid", "event_data" "jsonb", "severity" "text") TO "service_role";
 
+ALTER TABLE "public"."rd_qc_document_controls" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying, "p_duration_seconds" integer, "p_data_volume_mb" numeric, "p_success" boolean, "p_error_code" character varying, "p_error_message" "text", "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying, "p_duration_seconds" integer, "p_data_volume_mb" numeric, "p_success" boolean, "p_error_code" character varying, "p_error_message" "text", "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."log_tool_usage"("p_account_id" "uuid", "p_tool_id" "uuid", "p_action" character varying, "p_feature_used" character varying, "p_duration_seconds" integer, "p_data_volume_mb" numeric, "p_success" boolean, "p_error_code" character varying, "p_error_message" "text", "p_metadata" "jsonb") TO "service_role";
+ALTER TABLE "public"."rd_reports" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_research_steps" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."perform_sync_health_check"() TO "anon";
-GRANT ALL ON FUNCTION "public"."perform_sync_health_check"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."perform_sync_health_check"() TO "service_role";
 
+ALTER TABLE "public"."rd_research_subcomponents" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."process_bulk_operation_target"("p_bulk_operation_id" "uuid", "p_target_profile_id" "uuid", "p_operation_type" character varying, "p_operation_data" "jsonb") TO "service_role";
+ALTER TABLE "public"."rd_selected_filter" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_selected_steps" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying, "p_payment_method_id" "uuid", "p_subscription_id" "uuid", "p_description" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying, "p_payment_method_id" "uuid", "p_subscription_id" "uuid", "p_description" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."process_payment"("p_account_id" "uuid", "p_amount_cents" integer, "p_currency" character varying, "p_payment_method_id" "uuid", "p_subscription_id" "uuid", "p_description" "text") TO "service_role";
 
+ALTER TABLE "public"."rd_signature_records" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."refresh_usage_analytics"() TO "anon";
-GRANT ALL ON FUNCTION "public"."refresh_usage_analytics"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."refresh_usage_analytics"() TO "service_role";
+ALTER TABLE "public"."rd_signatures" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."rd_state_proforma_data" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."resolve_sync_conflict"("p_conflict_id" "uuid", "p_resolution_strategy" "text", "p_resolution_notes" "text") TO "service_role";
 
+ALTER TABLE "public"."rd_supplies" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."restore_account"("account_uuid" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."restore_account"("account_uuid" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."restore_account"("account_uuid" "uuid") TO "service_role";
+ALTER TABLE "public"."reinsurance_details" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."research_activities" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."revoke_profile_role"("p_role_id" "uuid", "p_reason" "text") TO "service_role";
 
+ALTER TABLE "public"."strategy_details" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text") TO "anon";
-GRANT ALL ON FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."rollback_bulk_operation"("p_bulk_operation_id" "uuid", "p_rollback_reason" "text") TO "service_role";
+ALTER TABLE "public"."supply_expenses" ENABLE ROW LEVEL SECURITY;
 
 
+ALTER TABLE "public"."tax_calculations" ENABLE ROW LEVEL SECURITY;
 
-GRANT ALL ON FUNCTION "public"."schedule_analytics_refresh"() TO "anon";
-GRANT ALL ON FUNCTION "public"."schedule_analytics_refresh"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."schedule_analytics_refresh"() TO "service_role";
 
+ALTER TABLE "public"."tax_profiles" ENABLE ROW LEVEL SECURITY;
 
 
-GRANT ALL ON FUNCTION "public"."security_health_check"() TO "anon";
-GRANT ALL ON FUNCTION "public"."security_health_check"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."security_health_check"() TO "service_role";
+ALTER TABLE "public"."tool_enrollments" ENABLE ROW LEVEL SECURITY;
 
 
+GRANT USAGE ON SCHEMA "public" TO "postgres";
+GRANT USAGE ON SCHEMA "public" TO "anon";
+GRANT USAGE ON SCHEMA "public" TO "authenticated";
+GRANT USAGE ON SCHEMA "public" TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."set_invitation_token"() TO "anon";
-GRANT ALL ON FUNCTION "public"."set_invitation_token"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."set_invitation_token"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."add_business_year"("p_business_id" "uuid", "p_year" integer, "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "anon";
+GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."archive_client"("p_client_id" "uuid", "p_archive" boolean) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."share_document"("p_document_id" "uuid", "p_client_id" "uuid", "p_shared_with_user_id" "uuid", "p_shared_with_email" character varying, "p_share_type" character varying, "p_expires_at" timestamp with time zone, "p_password_hash" character varying, "p_max_downloads" integer, "p_is_public_link" boolean, "p_can_view" boolean, "p_can_download" boolean, "p_can_comment" boolean, "p_can_edit" boolean, "p_created_by" "uuid") TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."archive_rd_federal_credit_version"() TO "anon";
+GRANT ALL ON FUNCTION "public"."archive_rd_federal_credit_version"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."archive_rd_federal_credit_version"() TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."soft_delete_account"("account_uuid" "uuid") TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."calculate_base_amount"("business_id" "uuid", "tax_year" integer) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text", "p_force_sync" boolean) TO "anon";
-GRANT ALL ON FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text", "p_force_sync" boolean) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."sync_profile_with_auth"("p_profile_id" "uuid", "p_strategy" "text", "p_force_sync" boolean) TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."calculate_household_income"("p_user_id" "uuid", "p_year" integer) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."track_feature_usage"("p_profile_id" "uuid", "p_feature_name" character varying, "p_feature_category" character varying, "p_metadata" "jsonb") TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) TO "anon";
+GRANT ALL ON FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."check_document_release_eligibility"("p_business_year_id" "uuid", "p_document_type" character varying) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_account_tool_access_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_account_tool_access_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_account_tool_access_updated_at"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."create_business_with_enrollment"("p_business_name" "text", "p_entity_type" "text", "p_client_file_id" "uuid", "p_tool_slug" "text", "p_ein" "text", "p_business_address" "text", "p_business_city" "text", "p_business_state" "text", "p_business_zip" "text", "p_business_phone" "text", "p_business_email" "text", "p_industry" "text", "p_year_established" integer, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
-GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "anon";
+GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."create_client_with_business"("p_full_name" "text", "p_email" "text", "p_phone" "text", "p_filing_status" "text", "p_dependents" integer, "p_home_address" "text", "p_state" "text", "p_wages_income" numeric, "p_passive_income" numeric, "p_unearned_income" numeric, "p_capital_gains" numeric, "p_household_income" numeric, "p_standard_deduction" boolean, "p_custom_deduction" numeric, "p_business_owner" boolean, "p_business_name" "text", "p_entity_type" "text", "p_business_address" "text", "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_business_annual_revenue" numeric) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "anon";
+GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."create_strategy_details_for_proposal"() TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status", "p_pending_actions" integer, "p_completion_percentage" numeric, "p_next_action_due" timestamp with time zone) TO "anon";
-GRANT ALL ON FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status", "p_pending_actions" integer, "p_completion_percentage" numeric, "p_next_action_due" timestamp with time zone) TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_client_engagement_status"("p_client_id" "uuid", "p_status" "public"."engagement_status", "p_pending_actions" integer, "p_completion_percentage" numeric, "p_next_action_due" timestamp with time zone) TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "anon";
+GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."enroll_client_in_tool"("p_client_file_id" "uuid", "p_business_id" "uuid", "p_tool_slug" "text", "p_notes" "text") TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_client_users_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_client_users_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_client_users_updated_at"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."generate_portal_token"("p_business_id" "uuid") TO "anon";
+GRANT ALL ON FUNCTION "public"."generate_portal_token"("p_business_id" "uuid") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."generate_portal_token"("p_business_id" "uuid") TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_document_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_document_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_document_updated_at"() TO "service_role";
 
 
+GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."get_base_period_years"("business_start_year" integer, "tax_year" integer) TO "service_role";
 
-GRANT ALL ON FUNCTION "public"."update_invitations_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_invitations_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_invitations_updated_at"() TO "service_role";
 
 
-
-GRANT ALL ON FUNCTION "public"."update_profile_updated_at"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_profile_updated_at"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_profile_updated_at"() TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
-GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."upload_document"("p_client_id" "uuid", "p_folder_id" "uuid", "p_original_name" character varying, "p_file_name" character varying, "p_file_size" bigint, "p_mime_type" character varying, "p_file_extension" character varying, "p_storage_path" "text", "p_checksum" character varying, "p_document_type" character varying, "p_tax_year" integer, "p_category" character varying, "p_tags" "text"[], "p_uploaded_by" "uuid") TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."user_has_admin_account"("user_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_has_admin_account"("user_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_has_admin_account"("user_id" "uuid") TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_has_client_access"("check_user_id" "uuid", "check_client_id" "uuid") TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_has_client_role"("check_user_id" "uuid", "check_client_id" "uuid", "required_role" "public"."client_role") TO "service_role";
-
-
-
-GRANT ALL ON FUNCTION "public"."user_has_direct_client_access"("user_id" "uuid", "client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_has_direct_client_access"("user_id" "uuid", "client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_has_direct_client_access"("user_id" "uuid", "client_id" "uuid") TO "service_role";
+GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "anon";
+GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."get_client_tools"("p_client_file_id" "uuid", "p_business_id" "uuid") TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."user_is_admin"("user_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_is_admin"("user_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_is_admin"("user_id" "uuid") TO "service_role";
+GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "anon";
+GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."get_client_with_data"("client_uuid" "uuid") TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."user_is_client_owner"("user_id" "uuid", "client_id" "uuid") TO "anon";
-GRANT ALL ON FUNCTION "public"."user_is_client_owner"("user_id" "uuid", "client_id" "uuid") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."user_is_client_owner"("user_id" "uuid", "client_id" "uuid") TO "service_role";
+GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "anon";
+GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."get_unified_client_list"("p_tool_filter" "text", "p_admin_id" "uuid", "p_affiliate_id" "uuid") TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role") TO "anon";
-GRANT ALL ON FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."validate_client_access"("check_client_id" "uuid", "required_role" "public"."client_role") TO "service_role";
+GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
+GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."validate_document_share"() TO "anon";
-GRANT ALL ON FUNCTION "public"."validate_document_share"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."validate_document_share"() TO "service_role";
+GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."handle_updated_at"() TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "anon";
-GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "authenticated";
-GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "service_role";
+GRANT ALL ON FUNCTION "public"."is_admin"() TO "anon";
+GRANT ALL ON FUNCTION "public"."is_admin"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."is_admin"() TO "service_role";
 
 
 
-GRANT ALL ON FUNCTION "public"."validate_rls_enabled"() TO "anon";
-GRANT ALL ON FUNCTION "public"."validate_rls_enabled"() TO "authenticated";
-GRANT ALL ON FUNCTION "public"."validate_rls_enabled"() TO "service_role";
+GRANT ALL ON FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"() TO "anon";
+GRANT ALL ON FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."safe_update_selected_subcomponent_practice_percent"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."account_activities" TO "anon";
-GRANT ALL ON TABLE "public"."account_activities" TO "authenticated";
-GRANT ALL ON TABLE "public"."account_activities" TO "service_role";
+GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."set_updated_at"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."account_tool_access" TO "anon";
-GRANT ALL ON TABLE "public"."account_tool_access" TO "authenticated";
-GRANT ALL ON TABLE "public"."account_tool_access" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "anon";
+GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_business_year"("p_year_id" "uuid", "p_is_active" boolean, "p_ordinary_k1_income" numeric, "p_guaranteed_k1_income" numeric, "p_annual_revenue" numeric, "p_employee_count" integer) TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."accounts" TO "anon";
-GRANT ALL ON TABLE "public"."accounts" TO "authenticated";
-GRANT ALL ON TABLE "public"."accounts" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_business_years_updated_at"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."active_accounts" TO "anon";
-GRANT ALL ON TABLE "public"."active_accounts" TO "authenticated";
-GRANT ALL ON TABLE "public"."active_accounts" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_credits_calculated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_credits_calculated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_credits_calculated_at"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."profile_roles" TO "anon";
-GRANT ALL ON TABLE "public"."profile_roles" TO "authenticated";
-GRANT ALL ON TABLE "public"."profile_roles" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_rd_federal_credit_updated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_rd_federal_credit_updated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_rd_federal_credit_updated_at"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."profiles" TO "anon";
-GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
-GRANT ALL ON TABLE "public"."profiles" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_rd_state_proforma_data_updated_at"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_rd_state_proforma_data_updated_at"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_rd_state_proforma_data_updated_at"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."role_definitions" TO "anon";
-GRANT ALL ON TABLE "public"."role_definitions" TO "authenticated";
-GRANT ALL ON TABLE "public"."role_definitions" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_selected_subcomponent_step_name"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_selected_subcomponent_step_name"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_selected_subcomponent_step_name"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."active_profile_roles" TO "anon";
-GRANT ALL ON TABLE "public"."active_profile_roles" TO "authenticated";
-GRANT ALL ON TABLE "public"."active_profile_roles" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_total_qre"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_total_qre"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_total_qre"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."tools" TO "anon";
-GRANT ALL ON TABLE "public"."tools" TO "authenticated";
-GRANT ALL ON TABLE "public"."tools" TO "service_role";
+GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
+GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
+GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."active_tool_assignments" TO "anon";
-GRANT ALL ON TABLE "public"."active_tool_assignments" TO "authenticated";
-GRANT ALL ON TABLE "public"."active_tool_assignments" TO "service_role";
+GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "anon";
+GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."validate_historical_data"("data" "jsonb") TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."activity_summary_by_type" TO "anon";
-GRANT ALL ON TABLE "public"."activity_summary_by_type" TO "authenticated";
-GRANT ALL ON TABLE "public"."activity_summary_by_type" TO "service_role";
+GRANT ALL ON FUNCTION "public"."validate_portal_token"("p_token" character varying, "p_ip_address" "inet") TO "anon";
+GRANT ALL ON FUNCTION "public"."validate_portal_token"("p_token" character varying, "p_ip_address" "inet") TO "authenticated";
+GRANT ALL ON FUNCTION "public"."validate_portal_token"("p_token" character varying, "p_ip_address" "inet") TO "service_role";
 
 
 
@@ -13150,60 +5905,12 @@
 
 
 
-GRANT ALL ON TABLE "public"."admin_sessions" TO "anon";
-GRANT ALL ON TABLE "public"."admin_sessions" TO "authenticated";
-GRANT ALL ON TABLE "public"."admin_sessions" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."affiliate_tool_permissions" TO "anon";
-GRANT ALL ON TABLE "public"."affiliate_tool_permissions" TO "authenticated";
-GRANT ALL ON TABLE "public"."affiliate_tool_permissions" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."affiliates" TO "anon";
-GRANT ALL ON TABLE "public"."affiliates" TO "authenticated";
-GRANT ALL ON TABLE "public"."affiliates" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."augusta_rule_details" TO "anon";
 GRANT ALL ON TABLE "public"."augusta_rule_details" TO "authenticated";
 GRANT ALL ON TABLE "public"."augusta_rule_details" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."billing_events" TO "anon";
-GRANT ALL ON TABLE "public"."billing_events" TO "authenticated";
-GRANT ALL ON TABLE "public"."billing_events" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."billing_invoices" TO "anon";
-GRANT ALL ON TABLE "public"."billing_invoices" TO "authenticated";
-GRANT ALL ON TABLE "public"."billing_invoices" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."bulk_operation_results" TO "anon";
-GRANT ALL ON TABLE "public"."bulk_operation_results" TO "authenticated";
-GRANT ALL ON TABLE "public"."bulk_operation_results" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."bulk_operations" TO "anon";
-GRANT ALL ON TABLE "public"."bulk_operations" TO "authenticated";
-GRANT ALL ON TABLE "public"."bulk_operations" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."bulk_operation_summaries" TO "anon";
-GRANT ALL ON TABLE "public"."bulk_operation_summaries" TO "authenticated";
-GRANT ALL ON TABLE "public"."bulk_operation_summaries" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."business_years" TO "anon";
 GRANT ALL ON TABLE "public"."business_years" TO "authenticated";
 GRANT ALL ON TABLE "public"."business_years" TO "service_role";
@@ -13234,42 +5941,12 @@
 
 
 
-GRANT ALL ON TABLE "public"."client_activities" TO "anon";
-GRANT ALL ON TABLE "public"."client_activities" TO "authenticated";
-GRANT ALL ON TABLE "public"."client_activities" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."client_dashboard_metrics" TO "anon";
-GRANT ALL ON TABLE "public"."client_dashboard_metrics" TO "authenticated";
-GRANT ALL ON TABLE "public"."client_dashboard_metrics" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."client_engagement_status" TO "anon";
-GRANT ALL ON TABLE "public"."client_engagement_status" TO "authenticated";
-GRANT ALL ON TABLE "public"."client_engagement_status" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."clients" TO "anon";
 GRANT ALL ON TABLE "public"."clients" TO "authenticated";
 GRANT ALL ON TABLE "public"."clients" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."client_dashboard_summary" TO "anon";
-GRANT ALL ON TABLE "public"."client_dashboard_summary" TO "authenticated";
-GRANT ALL ON TABLE "public"."client_dashboard_summary" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."client_users" TO "anon";
-GRANT ALL ON TABLE "public"."client_users" TO "authenticated";
-GRANT ALL ON TABLE "public"."client_users" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."commission_transactions" TO "anon";
 GRANT ALL ON TABLE "public"."commission_transactions" TO "authenticated";
 GRANT ALL ON TABLE "public"."commission_transactions" TO "service_role";
@@ -13294,66 +5971,6 @@
 
 
 
-GRANT ALL ON TABLE "public"."tool_usage_logs" TO "anon";
-GRANT ALL ON TABLE "public"."tool_usage_logs" TO "authenticated";
-GRANT ALL ON TABLE "public"."tool_usage_logs" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."daily_usage_summary" TO "anon";
-GRANT ALL ON TABLE "public"."daily_usage_summary" TO "authenticated";
-GRANT ALL ON TABLE "public"."daily_usage_summary" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_access_logs" TO "anon";
-GRANT ALL ON TABLE "public"."document_access_logs" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_access_logs" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_comments" TO "anon";
-GRANT ALL ON TABLE "public"."document_comments" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_comments" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_files" TO "anon";
-GRANT ALL ON TABLE "public"."document_files" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_files" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_folders" TO "anon";
-GRANT ALL ON TABLE "public"."document_folders" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_folders" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_processing_jobs" TO "anon";
-GRANT ALL ON TABLE "public"."document_processing_jobs" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_processing_jobs" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_shares" TO "anon";
-GRANT ALL ON TABLE "public"."document_shares" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_shares" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."document_versions" TO "anon";
-GRANT ALL ON TABLE "public"."document_versions" TO "authenticated";
-GRANT ALL ON TABLE "public"."document_versions" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."drf_tmp_test" TO "anon";
-GRANT ALL ON TABLE "public"."drf_tmp_test" TO "authenticated";
-GRANT ALL ON TABLE "public"."drf_tmp_test" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."employees" TO "anon";
 GRANT ALL ON TABLE "public"."employees" TO "authenticated";
 GRANT ALL ON TABLE "public"."employees" TO "service_role";
@@ -13372,108 +5989,36 @@
 
 
 
-GRANT ALL ON TABLE "public"."feature_usage_tracking" TO "anon";
-GRANT ALL ON TABLE "public"."feature_usage_tracking" TO "authenticated";
-GRANT ALL ON TABLE "public"."feature_usage_tracking" TO "service_role";
+GRANT ALL ON TABLE "public"."form_6765_overrides" TO "anon";
+GRANT ALL ON TABLE "public"."form_6765_overrides" TO "authenticated";
+GRANT ALL ON TABLE "public"."form_6765_overrides" TO "service_role";
 
 
 
 GRANT ALL ON TABLE "public"."hire_children_details" TO "anon";
 GRANT ALL ON TABLE "public"."hire_children_details" TO "authenticated";
 GRANT ALL ON TABLE "public"."hire_children_details" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."invitations" TO "anon";
-GRANT ALL ON TABLE "public"."invitations" TO "authenticated";
-GRANT ALL ON TABLE "public"."invitations" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."invoice_line_items" TO "anon";
-GRANT ALL ON TABLE "public"."invoice_line_items" TO "authenticated";
-GRANT ALL ON TABLE "public"."invoice_line_items" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."invoices" TO "anon";
-GRANT ALL ON TABLE "public"."invoices" TO "authenticated";
-GRANT ALL ON TABLE "public"."invoices" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."leads" TO "anon";
 GRANT ALL ON TABLE "public"."leads" TO "authenticated";
 GRANT ALL ON TABLE "public"."leads" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."login_attempts" TO "anon";
-GRANT ALL ON TABLE "public"."login_attempts" TO "authenticated";
-GRANT ALL ON TABLE "public"."login_attempts" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."mfa_settings" TO "anon";
-GRANT ALL ON TABLE "public"."mfa_settings" TO "authenticated";
-GRANT ALL ON TABLE "public"."mfa_settings" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."payment_methods" TO "anon";
-GRANT ALL ON TABLE "public"."payment_methods" TO "authenticated";
-GRANT ALL ON TABLE "public"."payment_methods" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."payments" TO "anon";
-GRANT ALL ON TABLE "public"."payments" TO "authenticated";
-GRANT ALL ON TABLE "public"."payments" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."performance_metrics" TO "anon";
-GRANT ALL ON TABLE "public"."performance_metrics" TO "authenticated";
-GRANT ALL ON TABLE "public"."performance_metrics" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."personal_years" TO "anon";
 GRANT ALL ON TABLE "public"."personal_years" TO "authenticated";
 GRANT ALL ON TABLE "public"."personal_years" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."platform_usage_metrics" TO "anon";
-GRANT ALL ON TABLE "public"."platform_usage_metrics" TO "authenticated";
-GRANT ALL ON TABLE "public"."platform_usage_metrics" TO "service_role";
+GRANT ALL ON TABLE "public"."profiles" TO "anon";
+GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
+GRANT ALL ON TABLE "public"."profiles" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."profile_activity_monitoring" TO "anon";
-GRANT ALL ON TABLE "public"."profile_activity_monitoring" TO "authenticated";
-GRANT ALL ON TABLE "public"."profile_activity_monitoring" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."profile_sync_conflicts" TO "anon";
-GRANT ALL ON TABLE "public"."profile_sync_conflicts" TO "authenticated";
-GRANT ALL ON TABLE "public"."profile_sync_conflicts" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."profile_management_summary" TO "anon";
-GRANT ALL ON TABLE "public"."profile_management_summary" TO "authenticated";
-GRANT ALL ON TABLE "public"."profile_management_summary" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."profile_permissions" TO "anon";
-GRANT ALL ON TABLE "public"."profile_permissions" TO "authenticated";
-GRANT ALL ON TABLE "public"."profile_permissions" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."proposal_assignments" TO "anon";
 GRANT ALL ON TABLE "public"."proposal_assignments" TO "authenticated";
 GRANT ALL ON TABLE "public"."proposal_assignments" TO "service_role";
@@ -13522,6 +6067,12 @@
 
 
 
+GRANT ALL ON TABLE "public"."rd_billable_time_summary" TO "anon";
+GRANT ALL ON TABLE "public"."rd_billable_time_summary" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_billable_time_summary" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_business_years" TO "anon";
 GRANT ALL ON TABLE "public"."rd_business_years" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_business_years" TO "service_role";
@@ -13534,6 +6085,12 @@
 
 
 
+GRANT ALL ON TABLE "public"."rd_client_portal_tokens" TO "anon";
+GRANT ALL ON TABLE "public"."rd_client_portal_tokens" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_client_portal_tokens" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_contractor_subcomponents" TO "anon";
 GRANT ALL ON TABLE "public"."rd_contractor_subcomponents" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_contractor_subcomponents" TO "service_role";
@@ -13552,6 +6109,12 @@
 
 
 
+GRANT ALL ON TABLE "public"."rd_document_links" TO "anon";
+GRANT ALL ON TABLE "public"."rd_document_links" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_document_links" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_employee_subcomponents" TO "anon";
 GRANT ALL ON TABLE "public"."rd_employee_subcomponents" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_employee_subcomponents" TO "service_role";
@@ -13576,12 +6139,42 @@
 
 
 
+GRANT ALL ON TABLE "public"."rd_federal_credit" TO "anon";
+GRANT ALL ON TABLE "public"."rd_federal_credit" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_federal_credit" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_federal_credit_latest" TO "anon";
+GRANT ALL ON TABLE "public"."rd_federal_credit_latest" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_federal_credit_latest" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_federal_credit_results" TO "anon";
 GRANT ALL ON TABLE "public"."rd_federal_credit_results" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_federal_credit_results" TO "service_role";
 
 
 
+GRANT ALL ON TABLE "public"."rd_procedure_analysis" TO "anon";
+GRANT ALL ON TABLE "public"."rd_procedure_analysis" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_procedure_analysis" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_procedure_research_links" TO "anon";
+GRANT ALL ON TABLE "public"."rd_procedure_research_links" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_procedure_research_links" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_qc_document_controls" TO "anon";
+GRANT ALL ON TABLE "public"."rd_qc_document_controls" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_qc_document_controls" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_reports" TO "anon";
 GRANT ALL ON TABLE "public"."rd_reports" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_reports" TO "service_role";
@@ -13633,15 +6226,57 @@
 GRANT ALL ON TABLE "public"."rd_selected_subcomponents" TO "anon";
 GRANT ALL ON TABLE "public"."rd_selected_subcomponents" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_selected_subcomponents" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_signature_records" TO "anon";
+GRANT ALL ON TABLE "public"."rd_signature_records" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_signature_records" TO "service_role";
+
 
 
+GRANT ALL ON TABLE "public"."rd_signatures" TO "anon";
+GRANT ALL ON TABLE "public"."rd_signatures" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_signatures" TO "service_role";
 
+
+
 GRANT ALL ON TABLE "public"."rd_state_calculations" TO "anon";
 GRANT ALL ON TABLE "public"."rd_state_calculations" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_state_calculations" TO "service_role";
 
 
 
+GRANT ALL ON TABLE "public"."rd_state_calculations_full" TO "anon";
+GRANT ALL ON TABLE "public"."rd_state_calculations_full" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_state_calculations_full" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_state_credit_configs" TO "anon";
+GRANT ALL ON TABLE "public"."rd_state_credit_configs" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_state_credit_configs" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_state_proforma_data" TO "anon";
+GRANT ALL ON TABLE "public"."rd_state_proforma_data" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_state_proforma_data" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_state_proforma_lines" TO "anon";
+GRANT ALL ON TABLE "public"."rd_state_proforma_lines" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_state_proforma_lines" TO "service_role";
+
+
+
+GRANT ALL ON TABLE "public"."rd_state_proformas" TO "anon";
+GRANT ALL ON TABLE "public"."rd_state_proformas" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_state_proformas" TO "service_role";
+
+
+
 GRANT ALL ON TABLE "public"."rd_supplies" TO "anon";
 GRANT ALL ON TABLE "public"."rd_supplies" TO "authenticated";
 GRANT ALL ON TABLE "public"."rd_supplies" TO "service_role";
@@ -13660,18 +6295,12 @@
 
 
 
-GRANT ALL ON TABLE "public"."recent_account_activities" TO "anon";
-GRANT ALL ON TABLE "public"."recent_account_activities" TO "authenticated";
-GRANT ALL ON TABLE "public"."recent_account_activities" TO "service_role";
+GRANT ALL ON TABLE "public"."rd_support_documents" TO "anon";
+GRANT ALL ON TABLE "public"."rd_support_documents" TO "authenticated";
+GRANT ALL ON TABLE "public"."rd_support_documents" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."recent_client_activities" TO "anon";
-GRANT ALL ON TABLE "public"."recent_client_activities" TO "authenticated";
-GRANT ALL ON TABLE "public"."recent_client_activities" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."reinsurance_details" TO "anon";
 GRANT ALL ON TABLE "public"."reinsurance_details" TO "authenticated";
 GRANT ALL ON TABLE "public"."reinsurance_details" TO "service_role";
@@ -13684,24 +6313,6 @@
 
 
 
-GRANT ALL ON TABLE "public"."security_alerts" TO "anon";
-GRANT ALL ON TABLE "public"."security_alerts" TO "authenticated";
-GRANT ALL ON TABLE "public"."security_alerts" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."security_events" TO "anon";
-GRANT ALL ON TABLE "public"."security_events" TO "authenticated";
-GRANT ALL ON TABLE "public"."security_events" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."security_policy_audit" TO "anon";
-GRANT ALL ON TABLE "public"."security_policy_audit" TO "authenticated";
-GRANT ALL ON TABLE "public"."security_policy_audit" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."strategy_commission_rates" TO "anon";
 GRANT ALL ON TABLE "public"."strategy_commission_rates" TO "authenticated";
 GRANT ALL ON TABLE "public"."strategy_commission_rates" TO "service_role";
@@ -13714,18 +6325,6 @@
 
 
 
-GRANT ALL ON TABLE "public"."subscription_plans" TO "anon";
-GRANT ALL ON TABLE "public"."subscription_plans" TO "authenticated";
-GRANT ALL ON TABLE "public"."subscription_plans" TO "service_role";
-
-
-
-GRANT ALL ON TABLE "public"."subscriptions" TO "anon";
-GRANT ALL ON TABLE "public"."subscriptions" TO "authenticated";
-GRANT ALL ON TABLE "public"."subscriptions" TO "service_role";
-
-
-
 GRANT ALL ON TABLE "public"."supply_expenses" TO "anon";
 GRANT ALL ON TABLE "public"."supply_expenses" TO "authenticated";
 GRANT ALL ON TABLE "public"."supply_expenses" TO "service_role";
@@ -13762,58 +6361,46 @@
 
 
 
-GRANT ALL ON TABLE "public"."tool_usage_summary" TO "anon";
-GRANT ALL ON TABLE "public"."tool_usage_summary" TO "authenticated";
-GRANT ALL ON TABLE "public"."tool_usage_summary" TO "service_role";
+GRANT ALL ON TABLE "public"."user_preferences" TO "anon";
+GRANT ALL ON TABLE "public"."user_preferences" TO "authenticated";
+GRANT ALL ON TABLE "public"."user_preferences" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."transactions" TO "anon";
-GRANT ALL ON TABLE "public"."transactions" TO "authenticated";
-GRANT ALL ON TABLE "public"."transactions" TO "service_role";
+GRANT ALL ON TABLE "public"."users" TO "anon";
+GRANT ALL ON TABLE "public"."users" TO "authenticated";
+GRANT ALL ON TABLE "public"."users" TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."user_access_summary" TO "anon";
-GRANT ALL ON TABLE "public"."user_access_summary" TO "authenticated";
-GRANT ALL ON TABLE "public"."user_access_summary" TO "service_role";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
 
 
 
-GRANT ALL ON TABLE "public"."users_with_auth" TO "anon";
-GRANT ALL ON TABLE "public"."users_with_auth" TO "authenticated";
-GRANT ALL ON TABLE "public"."users_with_auth" TO "service_role";
 
 
 
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
 
 
 
 
 
 
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
+ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
 
 
 
 
 
 
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
-ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";
-
-
-
-
-
-
 RESET ALL;

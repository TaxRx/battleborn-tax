// Epic 3 Sprint 3: Bulk Operations Dashboard Component
// File: BulkOperationsDashboard.tsx
// Purpose: Comprehensive bulk operations management and monitoring interface
// Story: 3.4 - Bulk Profile Operations

import React, { useState, useEffect } from 'react';
import { 
  Zap, 
  Play, 
  Pause, 
  RotateCcw, 
  X, 
  Eye, 
  Clock, 
  CheckCircle, 
  XCircle, 
  AlertTriangle,
  Users,
  ArrowRight,
  BarChart3,
  Calendar,
  Settings,
  Plus,
  RefreshCw,
  Download
} from 'lucide-react';
import AdminProfileService, { 
  BulkOperationStatus, 
  BulkOperationDetails,
  EnhancedBulkOperation 
} from '../../services/adminProfileService';

interface BulkOperationsDashboardProps {
  selectedProfileIds?: string[];
  onOperationCreated?: (operationId: string) => void;
}

const BulkOperationsDashboard: React.FC<BulkOperationsDashboardProps> = ({
  selectedProfileIds = [],
  onOperationCreated
}) => {
  const [operations, setOperations] = useState<BulkOperationStatus[]>([]);
  const [selectedOperation, setSelectedOperation] = useState<BulkOperationDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [processing, setProcessing] = useState<string | null>(null);
  const [newOperation, setNewOperation] = useState<Partial<EnhancedBulkOperation>>({
    operationType: 'update_status',
    operationName: '',
    targetProfileIds: selectedProfileIds,
    operationData: {},
    metadata: {}
  });

  const profileService = AdminProfileService.getInstance();

  const operationTypes = [
    { value: 'update_status', label: 'Update Status', description: 'Change profile status' },
    { value: 'assign_role', label: 'Assign Role', description: 'Add role to profiles' },
    { value: 'revoke_role', label: 'Revoke Role', description: 'Remove role from profiles' },
    { value: 'grant_permission', label: 'Grant Permission', description: 'Add specific permission' },
    { value: 'revoke_permission', label: 'Revoke Permission', description: 'Remove specific permission' },
    { value: 'sync_auth', label: 'Sync Auth', description: 'Synchronize with auth.users' },
    { value: 'verify_email', label: 'Verify Email', description: 'Mark emails as verified' },
    { value: 'reset_password', label: 'Reset Password', description: 'Force password reset' },
    { value: 'update_metadata', label: 'Update Metadata', description: 'Modify profile metadata' }
  ];

  const loadOperations = async () => {
    try {
      setLoading(true);
      const operationsData = await profileService.getBulkOperations(50, 0);
      setOperations(operationsData);
    } catch (error) {
      console.error('Error loading bulk operations:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadOperationDetails = async (operationId: string) => {
    try {
      const details = await profileService.getBulkOperationDetails(operationId);
      setSelectedOperation(details);
      setShowDetailsModal(true);
    } catch (error) {
      console.error('Error loading operation details:', error);
    }
  };

  const createOperation = async () => {
    try {
      if (!newOperation.operationName || !newOperation.operationType || !newOperation.targetProfileIds?.length) {
        alert('Please fill in all required fields');
        return;
      }

      const result = await profileService.createBulkOperation({
        id: '', // Will be generated by the service
        operationType: newOperation.operationType,
        operationName: newOperation.operationName,
        targetProfileIds: newOperation.targetProfileIds,
        operationData: newOperation.operationData || {},
        metadata: newOperation.metadata
      } as EnhancedBulkOperation);

      await loadOperations();
      setShowCreateModal(false);
      setNewOperation({
        operationType: 'update_status',
        operationName: '',
        targetProfileIds: selectedProfileIds,
        operationData: {},
        metadata: {}
      });

      onOperationCreated?.(result.operationId);
    } catch (error) {
      console.error('Error creating bulk operation:', error);
      alert('Failed to create bulk operation');
    }
  };

  const processOperation = async (operationId: string) => {
    try {
      setProcessing(operationId);
      await profileService.processBulkOperation(operationId);
      await loadOperations();
    } catch (error) {
      console.error('Error processing operation:', error);
      alert('Failed to process operation');
    } finally {
      setProcessing(null);
    }
  };

  const rollbackOperation = async (operationId: string) => {
    if (!confirm('Are you sure you want to rollback this operation? This cannot be undone.')) {
      return;
    }

    try {
      await profileService.rollbackBulkOperation(operationId, 'Manual rollback from dashboard');
      await loadOperations();
      if (selectedOperation?.id === operationId) {
        await loadOperationDetails(operationId);
      }
    } catch (error) {
      console.error('Error rolling back operation:', error);
      alert('Failed to rollback operation');
    }
  };

  const cancelOperation = async (operationId: string) => {
    if (!confirm('Are you sure you want to cancel this operation?')) {
      return;
    }

    try {
      await profileService.cancelBulkOperation(operationId, 'Manual cancellation from dashboard');
      await loadOperations();
    } catch (error) {
      console.error('Error cancelling operation:', error);
      alert('Failed to cancel operation');
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'failed':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'running':
        return <RefreshCw className="w-4 h-4 text-blue-600 animate-spin" />;
      case 'pending':
        return <Clock className="w-4 h-4 text-yellow-600" />;
      case 'cancelled':
        return <X className="w-4 h-4 text-gray-600" />;
      case 'rolled_back':
        return <RotateCcw className="w-4 h-4 text-purple-600" />;
      default:
        return <Clock className="w-4 h-4 text-gray-600" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success':
        return 'bg-green-50 text-green-800 border-green-200';
      case 'partial':
        return 'bg-yellow-50 text-yellow-800 border-yellow-200';
      case 'failed':
        return 'bg-red-50 text-red-800 border-red-200';
      case 'rolled_back':
        return 'bg-purple-50 text-purple-800 border-purple-200';
      case 'running':
        return 'bg-blue-50 text-blue-800 border-blue-200';
      case 'pending':
        return 'bg-gray-50 text-gray-800 border-gray-200';
      default:
        return 'bg-gray-50 text-gray-800 border-gray-200';
    }
  };

  useEffect(() => {
    loadOperations();
    const interval = setInterval(loadOperations, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (selectedProfileIds.length > 0) {
      setNewOperation(prev => ({
        ...prev,
        targetProfileIds: selectedProfileIds
      }));
    }
  }, [selectedProfileIds]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <RefreshCw className="w-8 h-8 animate-spin text-gray-400" />
        <span className="ml-2 text-gray-600">Loading bulk operations...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center">
            <Zap className="w-6 h-6 mr-2 text-blue-600" />
            Bulk Operations Dashboard
          </h2>
          <p className="text-gray-600">Create, monitor, and manage bulk profile operations</p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={() => setShowCreateModal(true)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center"
          >
            <Plus className="w-4 h-4 mr-2" />
            Create Operation
          </button>
          <button
            onClick={loadOperations}
            className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <BarChart3 className="w-8 h-8 text-blue-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {operations.filter(op => op.status === 'running').length}
              </div>
              <div className="text-sm text-gray-600">Running</div>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <Clock className="w-8 h-8 text-yellow-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {operations.filter(op => op.status === 'pending').length}
              </div>
              <div className="text-sm text-gray-600">Pending</div>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <CheckCircle className="w-8 h-8 text-green-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {operations.filter(op => op.overallStatus === 'success').length}
              </div>
              <div className="text-sm text-gray-600">Completed</div>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <RotateCcw className="w-8 h-8 text-purple-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900">
                {operations.filter(op => op.canRollback).length}
              </div>
              <div className="text-sm text-gray-600">Rollbackable</div>
            </div>
          </div>
        </div>
      </div>

      {/* Operations List */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Recent Operations</h3>
        </div>
        
        {operations.length === 0 ? (
          <div className="text-center py-12 text-gray-500">
            <Zap className="w-12 h-12 mx-auto mb-3 text-gray-300" />
            <p>No bulk operations found</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Operation
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Progress
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Results
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Created
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {operations.map((operation) => (
                  <tr key={operation.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {operation.operationName}
                        </div>
                        <div className="text-sm text-gray-500">
                          {operation.operationType.replace('_', ' ')} • {operation.totalTargets} profiles
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {getStatusIcon(operation.status)}
                        <span className={`ml-2 px-3 py-1 text-xs font-medium rounded-full border ${getStatusColor(operation.overallStatus)}`}>
                          {operation.status}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full" 
                          style={{ width: `${operation.progressPercentage}%` }}
                        />
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {operation.progressPercentage}% ({operation.processedCount}/{operation.totalTargets})
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <div className="flex space-x-4">
                        <span className="text-green-600">{operation.successCount} success</span>
                        {operation.failedCount > 0 && (
                          <span className="text-red-600">{operation.failedCount} failed</span>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex items-center">
                        <Calendar className="w-4 h-4 mr-1" />
                        {new Date(operation.createdAt).toLocaleDateString()}
                      </div>
                      <div className="text-xs text-gray-400">
                        by {operation.initiatedByName}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => loadOperationDetails(operation.id)}
                          className="p-1 text-blue-600 hover:bg-blue-50 rounded"
                          title="View Details"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        
                        {operation.status === 'pending' && (
                          <button
                            onClick={() => processOperation(operation.id)}
                            disabled={processing === operation.id}
                            className="p-1 text-green-600 hover:bg-green-50 rounded disabled:opacity-50"
                            title="Start Operation"
                          >
                            <Play className="w-4 h-4" />
                          </button>
                        )}
                        
                        {operation.canRollback && (
                          <button
                            onClick={() => rollbackOperation(operation.id)}
                            className="p-1 text-purple-600 hover:bg-purple-50 rounded"
                            title="Rollback"
                          >
                            <RotateCcw className="w-4 h-4" />
                          </button>
                        )}
                        
                        {['pending', 'running'].includes(operation.status) && (
                          <button
                            onClick={() => cancelOperation(operation.id)}
                            className="p-1 text-red-600 hover:bg-red-50 rounded"
                            title="Cancel"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Create Operation Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full mx-4">
            <h3 className="text-lg font-semibold mb-4">Create Bulk Operation</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Operation Name</label>
                <input
                  type="text"
                  value={newOperation.operationName || ''}
                  onChange={(e) => setNewOperation({ ...newOperation, operationName: e.target.value })}
                  className="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                  placeholder="e.g., Update inactive users status"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Operation Type</label>
                <select
                  value={newOperation.operationType || 'update_status'}
                  onChange={(e) => setNewOperation({ ...newOperation, operationType: e.target.value as any })}
                  className="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                >
                  {operationTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.label} - {type.description}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Target Profiles</label>
                <div className="text-sm text-gray-600">
                  {newOperation.targetProfileIds?.length || 0} profiles selected
                </div>
              </div>
              
              {/* Operation-specific fields */}
              {newOperation.operationType === 'update_status' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">New Status</label>
                  <select
                    onChange={(e) => setNewOperation({ 
                      ...newOperation, 
                      operationData: { ...newOperation.operationData, status: e.target.value } 
                    })}
                    className="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="">Select status...</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                    <option value="pending">Pending</option>
                  </select>
                </div>
              )}
              
              {newOperation.operationType === 'assign_role' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Role Name</label>
                  <select
                    onChange={(e) => setNewOperation({ 
                      ...newOperation, 
                      operationData: { ...newOperation.operationData, role_name: e.target.value } 
                    })}
                    className="w-full p-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="">Select role...</option>
                    <option value="admin">Admin</option>
                    <option value="affiliate_manager">Affiliate Manager</option>
                    <option value="affiliate">Affiliate</option>
                    <option value="client_manager">Client Manager</option>
                    <option value="client">Client</option>
                    <option value="read_only">Read Only</option>
                  </select>
                </div>
              )}
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={createOperation}
                disabled={!newOperation.operationName || !newOperation.operationType || !newOperation.targetProfileIds?.length}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              >
                Create Operation
              </button>
              <button
                onClick={() => setShowCreateModal(false)}
                className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Operation Details Modal */}
      {showDetailsModal && selectedOperation && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Operation Details</h3>
              <button
                onClick={() => setShowDetailsModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="grid grid-cols-2 gap-6 mb-6">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Operation Info</h4>
                <div className="space-y-2 text-sm">
                  <div><strong>Name:</strong> {selectedOperation.operationName}</div>
                  <div><strong>Type:</strong> {selectedOperation.operationType}</div>
                  <div><strong>Status:</strong> {selectedOperation.status}</div>
                  <div><strong>Progress:</strong> {selectedOperation.progressPercentage}%</div>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Results</h4>
                <div className="space-y-2 text-sm">
                  <div><strong>Total:</strong> {selectedOperation.totalTargets}</div>
                  <div><strong>Processed:</strong> {selectedOperation.processedCount}</div>
                  <div><strong>Successful:</strong> {selectedOperation.successCount}</div>
                  <div><strong>Failed:</strong> {selectedOperation.failedCount}</div>
                </div>
              </div>
            </div>
            
            <div className="border-t pt-4">
              <h4 className="font-medium text-gray-900 mb-3">Individual Results</h4>
              <div className="max-h-64 overflow-y-auto">
                <table className="min-w-full text-sm">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-2">Profile ID</th>
                      <th className="text-left py-2">Status</th>
                      <th className="text-left py-2">Duration</th>
                      <th className="text-left py-2">Result</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedOperation.results.map((result) => (
                      <tr key={result.id} className="border-b">
                        <td className="py-2">{result.targetProfileId.slice(0, 8)}...</td>
                        <td className="py-2">
                          <span className={`px-2 py-1 rounded text-xs ${
                            result.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                          }`}>
                            {result.status}
                          </span>
                        </td>
                        <td className="py-2">{result.durationMs ? `${result.durationMs}ms` : '-'}</td>
                        <td className="py-2">
                          {result.success ? 'Success' : result.errorMessage || 'Failed'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BulkOperationsDashboard;